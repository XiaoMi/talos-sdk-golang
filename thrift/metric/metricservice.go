// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package metric

import (
	"bytes"
	"fmt"

	"github.com/XiaoMi/talos-sdk-golang/thrift/common"
	"github.com/XiaoMi/talos-sdk-golang/thrift/thrift"
	"github.com/XiaoMi/talos-sdk-golang/thrift/topic"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = common.GoUnusedProtection__
var _ = topic.GoUnusedProtection__

type MetricService interface {
	common.TalosBaseService

	// listTopicsInfo will return the topics which owned by the call developer
	// and its describe information.
	//
	ListTopics() (r *topic.ListTopicsInfoResponse, err error)
	// query ConsumerGroup
	//
	//
	// Parameters:
	//  - Request
	QueryConsumerGroup(request *QueryConsumerGroupRequest) (r *QueryConsumerGroupResponse, err error)
	// get TopicConsumeUnit by consumerGroup and topicName
	//
	//
	// Parameters:
	//  - Request
	GetTopicConsumeUnit(request *GetTopicConsumeUnitRequest) (r *GetTopicConsumeUnitResponse, err error)
	// query TopicConsumeUnit by topicName
	//
	//
	// Parameters:
	//  - Request
	QueryTopicConsumeUnit(request *QueryTopicConsumeUnitRequest) (r *QueryTopicConsumeUnitResponse, err error)
	// Get DataPreview from talos;
	//
	//
	// Parameters:
	//  - Request
	GetDataPreview(request *GetDataPreviewRequest) (r *GetDataPreviewResponse, err error)
}

type MetricServiceClient struct {
	*common.TalosBaseServiceClient
}

func NewMetricServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MetricServiceClient {
	return &MetricServiceClient{TalosBaseServiceClient: common.NewTalosBaseServiceClientFactory(t, f)}
}

func NewMetricServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MetricServiceClient {
	return &MetricServiceClient{TalosBaseServiceClient: common.NewTalosBaseServiceClientProtocol(t, iprot, oprot)}
}

// listTopicsInfo will return the topics which owned by the call developer
// and its describe information.
//
func (p *MetricServiceClient) ListTopics() (r *topic.ListTopicsInfoResponse, err error) {
	if err = p.sendListTopics(); err != nil {
		return
	}
	return p.recvListTopics()
}

func (p *MetricServiceClient) sendListTopics() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("listTopics", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ListTopicsArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetricServiceClient) recvListTopics() (value *topic.ListTopicsInfoResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error9 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error10 error
		error10, err = error9.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error10
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listTopics failed: out of sequence response")
		return
	}
	result := ListTopicsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// query ConsumerGroup
//
//
// Parameters:
//  - Request
func (p *MetricServiceClient) QueryConsumerGroup(request *QueryConsumerGroupRequest) (r *QueryConsumerGroupResponse, err error) {
	if err = p.sendQueryConsumerGroup(request); err != nil {
		return
	}
	return p.recvQueryConsumerGroup()
}

func (p *MetricServiceClient) sendQueryConsumerGroup(request *QueryConsumerGroupRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("queryConsumerGroup", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := QueryConsumerGroupArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetricServiceClient) recvQueryConsumerGroup() (value *QueryConsumerGroupResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error11 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error12 error
		error12, err = error11.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error12
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "queryConsumerGroup failed: out of sequence response")
		return
	}
	result := QueryConsumerGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// get TopicConsumeUnit by consumerGroup and topicName
//
//
// Parameters:
//  - Request
func (p *MetricServiceClient) GetTopicConsumeUnit(request *GetTopicConsumeUnitRequest) (r *GetTopicConsumeUnitResponse, err error) {
	if err = p.sendGetTopicConsumeUnit(request); err != nil {
		return
	}
	return p.recvGetTopicConsumeUnit()
}

func (p *MetricServiceClient) sendGetTopicConsumeUnit(request *GetTopicConsumeUnitRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getTopicConsumeUnit", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetTopicConsumeUnitArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetricServiceClient) recvGetTopicConsumeUnit() (value *GetTopicConsumeUnitResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error13 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error14 error
		error14, err = error13.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error14
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getTopicConsumeUnit failed: out of sequence response")
		return
	}
	result := GetTopicConsumeUnitResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// query TopicConsumeUnit by topicName
//
//
// Parameters:
//  - Request
func (p *MetricServiceClient) QueryTopicConsumeUnit(request *QueryTopicConsumeUnitRequest) (r *QueryTopicConsumeUnitResponse, err error) {
	if err = p.sendQueryTopicConsumeUnit(request); err != nil {
		return
	}
	return p.recvQueryTopicConsumeUnit()
}

func (p *MetricServiceClient) sendQueryTopicConsumeUnit(request *QueryTopicConsumeUnitRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("queryTopicConsumeUnit", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := QueryTopicConsumeUnitArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetricServiceClient) recvQueryTopicConsumeUnit() (value *QueryTopicConsumeUnitResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error15 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error16 error
		error16, err = error15.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error16
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "queryTopicConsumeUnit failed: out of sequence response")
		return
	}
	result := QueryTopicConsumeUnitResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Get DataPreview from talos;
//
//
// Parameters:
//  - Request
func (p *MetricServiceClient) GetDataPreview(request *GetDataPreviewRequest) (r *GetDataPreviewResponse, err error) {
	if err = p.sendGetDataPreview(request); err != nil {
		return
	}
	return p.recvGetDataPreview()
}

func (p *MetricServiceClient) sendGetDataPreview(request *GetDataPreviewRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getDataPreview", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetDataPreviewArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MetricServiceClient) recvGetDataPreview() (value *GetDataPreviewResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error17 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error18 error
		error18, err = error17.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error18
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getDataPreview failed: out of sequence response")
		return
	}
	result := GetDataPreviewResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

type MetricServiceProcessor struct {
	*common.TalosBaseServiceProcessor
}

func NewMetricServiceProcessor(handler MetricService) *MetricServiceProcessor {
	self19 := &MetricServiceProcessor{common.NewTalosBaseServiceProcessor(handler)}
	self19.AddToProcessorMap("listTopics", &metricServiceProcessorListTopics{handler: handler})
	self19.AddToProcessorMap("queryConsumerGroup", &metricServiceProcessorQueryConsumerGroup{handler: handler})
	self19.AddToProcessorMap("getTopicConsumeUnit", &metricServiceProcessorGetTopicConsumeUnit{handler: handler})
	self19.AddToProcessorMap("queryTopicConsumeUnit", &metricServiceProcessorQueryTopicConsumeUnit{handler: handler})
	self19.AddToProcessorMap("getDataPreview", &metricServiceProcessorGetDataPreview{handler: handler})
	return self19
}

type metricServiceProcessorListTopics struct {
	handler MetricService
}

func (p *metricServiceProcessorListTopics) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ListTopicsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listTopics", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ListTopicsResult{}
	var retval *topic.ListTopicsInfoResponse
	var err2 error
	if retval, err2 = p.handler.ListTopics(); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listTopics: "+err2.Error())
			oprot.WriteMessageBegin("listTopics", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listTopics", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metricServiceProcessorQueryConsumerGroup struct {
	handler MetricService
}

func (p *metricServiceProcessorQueryConsumerGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := QueryConsumerGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("queryConsumerGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := QueryConsumerGroupResult{}
	var retval *QueryConsumerGroupResponse
	var err2 error
	if retval, err2 = p.handler.QueryConsumerGroup(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryConsumerGroup: "+err2.Error())
			oprot.WriteMessageBegin("queryConsumerGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("queryConsumerGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metricServiceProcessorGetTopicConsumeUnit struct {
	handler MetricService
}

func (p *metricServiceProcessorGetTopicConsumeUnit) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetTopicConsumeUnitArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getTopicConsumeUnit", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetTopicConsumeUnitResult{}
	var retval *GetTopicConsumeUnitResponse
	var err2 error
	if retval, err2 = p.handler.GetTopicConsumeUnit(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTopicConsumeUnit: "+err2.Error())
			oprot.WriteMessageBegin("getTopicConsumeUnit", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getTopicConsumeUnit", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metricServiceProcessorQueryTopicConsumeUnit struct {
	handler MetricService
}

func (p *metricServiceProcessorQueryTopicConsumeUnit) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := QueryTopicConsumeUnitArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("queryTopicConsumeUnit", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := QueryTopicConsumeUnitResult{}
	var retval *QueryTopicConsumeUnitResponse
	var err2 error
	if retval, err2 = p.handler.QueryTopicConsumeUnit(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryTopicConsumeUnit: "+err2.Error())
			oprot.WriteMessageBegin("queryTopicConsumeUnit", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("queryTopicConsumeUnit", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metricServiceProcessorGetDataPreview struct {
	handler MetricService
}

func (p *metricServiceProcessorGetDataPreview) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetDataPreviewArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getDataPreview", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetDataPreviewResult{}
	var retval *GetDataPreviewResponse
	var err2 error
	if retval, err2 = p.handler.GetDataPreview(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getDataPreview: "+err2.Error())
			oprot.WriteMessageBegin("getDataPreview", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getDataPreview", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type ListTopicsArgs struct {
}

func NewListTopicsArgs() *ListTopicsArgs {
	return &ListTopicsArgs{}
}

func (p *ListTopicsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListTopicsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listTopics_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListTopicsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListTopicsArgs(%+v)", *p)
}

type ListTopicsResult struct {
	Success *topic.ListTopicsInfoResponse `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException  `thrift:"e,1" json:"e"`
}

func NewListTopicsResult() *ListTopicsResult {
	return &ListTopicsResult{}
}

var ListTopicsResult_Success_DEFAULT *topic.ListTopicsInfoResponse

func (p *ListTopicsResult) GetSuccess() *topic.ListTopicsInfoResponse {
	if !p.IsSetSuccess() {
		return ListTopicsResult_Success_DEFAULT
	}
	return p.Success
}

var ListTopicsResult_E_DEFAULT *common.GalaxyTalosException

func (p *ListTopicsResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return ListTopicsResult_E_DEFAULT
	}
	return p.E
}
func (p *ListTopicsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListTopicsResult) IsSetE() bool {
	return p.E != nil
}

func (p *ListTopicsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListTopicsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &topic.ListTopicsInfoResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *ListTopicsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ListTopicsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listTopics_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListTopicsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *ListTopicsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ListTopicsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListTopicsResult(%+v)", *p)
}

type QueryConsumerGroupArgs struct {
	Request *QueryConsumerGroupRequest `thrift:"request,1" json:"request"`
}

func NewQueryConsumerGroupArgs() *QueryConsumerGroupArgs {
	return &QueryConsumerGroupArgs{}
}

var QueryConsumerGroupArgs_Request_DEFAULT *QueryConsumerGroupRequest

func (p *QueryConsumerGroupArgs) GetRequest() *QueryConsumerGroupRequest {
	if !p.IsSetRequest() {
		return QueryConsumerGroupArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *QueryConsumerGroupArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *QueryConsumerGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryConsumerGroupArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &QueryConsumerGroupRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *QueryConsumerGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryConsumerGroup_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryConsumerGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *QueryConsumerGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryConsumerGroupArgs(%+v)", *p)
}

type QueryConsumerGroupResult struct {
	Success *QueryConsumerGroupResponse  `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewQueryConsumerGroupResult() *QueryConsumerGroupResult {
	return &QueryConsumerGroupResult{}
}

var QueryConsumerGroupResult_Success_DEFAULT *QueryConsumerGroupResponse

func (p *QueryConsumerGroupResult) GetSuccess() *QueryConsumerGroupResponse {
	if !p.IsSetSuccess() {
		return QueryConsumerGroupResult_Success_DEFAULT
	}
	return p.Success
}

var QueryConsumerGroupResult_E_DEFAULT *common.GalaxyTalosException

func (p *QueryConsumerGroupResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return QueryConsumerGroupResult_E_DEFAULT
	}
	return p.E
}
func (p *QueryConsumerGroupResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *QueryConsumerGroupResult) IsSetE() bool {
	return p.E != nil
}

func (p *QueryConsumerGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryConsumerGroupResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &QueryConsumerGroupResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *QueryConsumerGroupResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *QueryConsumerGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryConsumerGroup_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryConsumerGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *QueryConsumerGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *QueryConsumerGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryConsumerGroupResult(%+v)", *p)
}

type GetTopicConsumeUnitArgs struct {
	Request *GetTopicConsumeUnitRequest `thrift:"request,1" json:"request"`
}

func NewGetTopicConsumeUnitArgs() *GetTopicConsumeUnitArgs {
	return &GetTopicConsumeUnitArgs{}
}

var GetTopicConsumeUnitArgs_Request_DEFAULT *GetTopicConsumeUnitRequest

func (p *GetTopicConsumeUnitArgs) GetRequest() *GetTopicConsumeUnitRequest {
	if !p.IsSetRequest() {
		return GetTopicConsumeUnitArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *GetTopicConsumeUnitArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *GetTopicConsumeUnitArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTopicConsumeUnitArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &GetTopicConsumeUnitRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *GetTopicConsumeUnitArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTopicConsumeUnit_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTopicConsumeUnitArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *GetTopicConsumeUnitArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTopicConsumeUnitArgs(%+v)", *p)
}

type GetTopicConsumeUnitResult struct {
	Success *GetTopicConsumeUnitResponse `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewGetTopicConsumeUnitResult() *GetTopicConsumeUnitResult {
	return &GetTopicConsumeUnitResult{}
}

var GetTopicConsumeUnitResult_Success_DEFAULT *GetTopicConsumeUnitResponse

func (p *GetTopicConsumeUnitResult) GetSuccess() *GetTopicConsumeUnitResponse {
	if !p.IsSetSuccess() {
		return GetTopicConsumeUnitResult_Success_DEFAULT
	}
	return p.Success
}

var GetTopicConsumeUnitResult_E_DEFAULT *common.GalaxyTalosException

func (p *GetTopicConsumeUnitResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return GetTopicConsumeUnitResult_E_DEFAULT
	}
	return p.E
}
func (p *GetTopicConsumeUnitResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetTopicConsumeUnitResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetTopicConsumeUnitResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTopicConsumeUnitResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetTopicConsumeUnitResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetTopicConsumeUnitResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetTopicConsumeUnitResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTopicConsumeUnit_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTopicConsumeUnitResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetTopicConsumeUnitResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetTopicConsumeUnitResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTopicConsumeUnitResult(%+v)", *p)
}

type QueryTopicConsumeUnitArgs struct {
	Request *QueryTopicConsumeUnitRequest `thrift:"request,1" json:"request"`
}

func NewQueryTopicConsumeUnitArgs() *QueryTopicConsumeUnitArgs {
	return &QueryTopicConsumeUnitArgs{}
}

var QueryTopicConsumeUnitArgs_Request_DEFAULT *QueryTopicConsumeUnitRequest

func (p *QueryTopicConsumeUnitArgs) GetRequest() *QueryTopicConsumeUnitRequest {
	if !p.IsSetRequest() {
		return QueryTopicConsumeUnitArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *QueryTopicConsumeUnitArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *QueryTopicConsumeUnitArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryTopicConsumeUnitArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &QueryTopicConsumeUnitRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *QueryTopicConsumeUnitArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryTopicConsumeUnit_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryTopicConsumeUnitArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *QueryTopicConsumeUnitArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryTopicConsumeUnitArgs(%+v)", *p)
}

type QueryTopicConsumeUnitResult struct {
	Success *QueryTopicConsumeUnitResponse `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException   `thrift:"e,1" json:"e"`
}

func NewQueryTopicConsumeUnitResult() *QueryTopicConsumeUnitResult {
	return &QueryTopicConsumeUnitResult{}
}

var QueryTopicConsumeUnitResult_Success_DEFAULT *QueryTopicConsumeUnitResponse

func (p *QueryTopicConsumeUnitResult) GetSuccess() *QueryTopicConsumeUnitResponse {
	if !p.IsSetSuccess() {
		return QueryTopicConsumeUnitResult_Success_DEFAULT
	}
	return p.Success
}

var QueryTopicConsumeUnitResult_E_DEFAULT *common.GalaxyTalosException

func (p *QueryTopicConsumeUnitResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return QueryTopicConsumeUnitResult_E_DEFAULT
	}
	return p.E
}
func (p *QueryTopicConsumeUnitResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *QueryTopicConsumeUnitResult) IsSetE() bool {
	return p.E != nil
}

func (p *QueryTopicConsumeUnitResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryTopicConsumeUnitResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &QueryTopicConsumeUnitResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *QueryTopicConsumeUnitResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *QueryTopicConsumeUnitResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryTopicConsumeUnit_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryTopicConsumeUnitResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *QueryTopicConsumeUnitResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *QueryTopicConsumeUnitResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryTopicConsumeUnitResult(%+v)", *p)
}

type GetDataPreviewArgs struct {
	Request *GetDataPreviewRequest `thrift:"request,1" json:"request"`
}

func NewGetDataPreviewArgs() *GetDataPreviewArgs {
	return &GetDataPreviewArgs{}
}

var GetDataPreviewArgs_Request_DEFAULT *GetDataPreviewRequest

func (p *GetDataPreviewArgs) GetRequest() *GetDataPreviewRequest {
	if !p.IsSetRequest() {
		return GetDataPreviewArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *GetDataPreviewArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *GetDataPreviewArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetDataPreviewArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &GetDataPreviewRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *GetDataPreviewArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getDataPreview_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetDataPreviewArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *GetDataPreviewArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDataPreviewArgs(%+v)", *p)
}

type GetDataPreviewResult struct {
	Success *GetDataPreviewResponse      `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewGetDataPreviewResult() *GetDataPreviewResult {
	return &GetDataPreviewResult{}
}

var GetDataPreviewResult_Success_DEFAULT *GetDataPreviewResponse

func (p *GetDataPreviewResult) GetSuccess() *GetDataPreviewResponse {
	if !p.IsSetSuccess() {
		return GetDataPreviewResult_Success_DEFAULT
	}
	return p.Success
}

var GetDataPreviewResult_E_DEFAULT *common.GalaxyTalosException

func (p *GetDataPreviewResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return GetDataPreviewResult_E_DEFAULT
	}
	return p.E
}
func (p *GetDataPreviewResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetDataPreviewResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetDataPreviewResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetDataPreviewResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetDataPreviewResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetDataPreviewResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetDataPreviewResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getDataPreview_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetDataPreviewResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetDataPreviewResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetDataPreviewResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDataPreviewResult(%+v)", *p)
}
