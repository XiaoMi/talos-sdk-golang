// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package message

import (
	"bytes"
	"fmt"
	"github.com/XiaoMi/talos-sdk-golang/thrift/common"
	"github.com/XiaoMi/talos-sdk-golang/thrift/thrift"
	"github.com/XiaoMi/talos-sdk-golang/thrift/topic"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = common.GoUnusedProtection__
var _ = topic.GoUnusedProtection__
var GoUnusedProtection__ int

type MessageType int64

const (
	MessageType_BINARY   MessageType = 1
	MessageType_UTF8     MessageType = 2
	MessageType_THRIFT   MessageType = 3
	MessageType_AVRO     MessageType = 4
	MessageType_PROTOBUF MessageType = 5
)

func (p MessageType) String() string {
	switch p {
	case MessageType_BINARY:
		return "MessageType_BINARY"
	case MessageType_UTF8:
		return "MessageType_UTF8"
	case MessageType_THRIFT:
		return "MessageType_THRIFT"
	case MessageType_AVRO:
		return "MessageType_AVRO"
	case MessageType_PROTOBUF:
		return "MessageType_PROTOBUF"
	}
	return "<UNSET>"
}

func MessageTypeFromString(s string) (MessageType, error) {
	switch s {
	case "MessageType_BINARY":
		return MessageType_BINARY, nil
	case "MessageType_UTF8":
		return MessageType_UTF8, nil
	case "MessageType_THRIFT":
		return MessageType_THRIFT, nil
	case "MessageType_AVRO":
		return MessageType_AVRO, nil
	case "MessageType_PROTOBUF":
		return MessageType_PROTOBUF, nil
	}
	return MessageType(0), fmt.Errorf("not a valid MessageType string")
}

func MessageTypePtr(v MessageType) *MessageType { return &v }

type MessageOffset int64

const (
	MessageOffset_START_OFFSET  MessageOffset = -1
	MessageOffset_LATEST_OFFSET MessageOffset = -2
)

func (p MessageOffset) String() string {
	switch p {
	case MessageOffset_START_OFFSET:
		return "MessageOffset_START_OFFSET"
	case MessageOffset_LATEST_OFFSET:
		return "MessageOffset_LATEST_OFFSET"
	}
	return "<UNSET>"
}

func MessageOffsetFromString(s string) (MessageOffset, error) {
	switch s {
	case "MessageOffset_START_OFFSET":
		return MessageOffset_START_OFFSET, nil
	case "MessageOffset_LATEST_OFFSET":
		return MessageOffset_LATEST_OFFSET, nil
	}
	return MessageOffset(0), fmt.Errorf("not a valid MessageOffset string")
}

func MessageOffsetPtr(v MessageOffset) *MessageOffset { return &v }

type MessageCompressionType int64

const (
	MessageCompressionType_NONE   MessageCompressionType = 0
	MessageCompressionType_SNAPPY MessageCompressionType = 1
	MessageCompressionType_GZIP   MessageCompressionType = 2
	MessageCompressionType_ZSTD   MessageCompressionType = 3
	MessageCompressionType_LZ4    MessageCompressionType = 4
)

func (p MessageCompressionType) String() string {
	switch p {
	case MessageCompressionType_NONE:
		return "MessageCompressionType_NONE"
	case MessageCompressionType_SNAPPY:
		return "MessageCompressionType_SNAPPY"
	case MessageCompressionType_GZIP:
		return "MessageCompressionType_GZIP"
	case MessageCompressionType_ZSTD:
		return "MessageCompressionType_ZSTD"
	case MessageCompressionType_LZ4:
		return "MessageCompressionType_LZ4"
	}
	return "<UNSET>"
}

func MessageCompressionTypeFromString(s string) (MessageCompressionType, error) {
	switch s {
	case "MessageCompressionType_NONE":
		return MessageCompressionType_NONE, nil
	case "MessageCompressionType_SNAPPY":
		return MessageCompressionType_SNAPPY, nil
	case "MessageCompressionType_GZIP":
		return MessageCompressionType_GZIP, nil
	case "MessageCompressionType_ZSTD":
		return MessageCompressionType_ZSTD, nil
	case "MessageCompressionType_LZ4":
		return MessageCompressionType_LZ4, nil
	}
	return MessageCompressionType(0), fmt.Errorf("not a valid MessageCompressionType string")
}

func MessageCompressionTypePtr(v MessageCompressionType) *MessageCompressionType { return &v }

type Message struct {
	PartitionKey      *string      `thrift:"partitionKey,1" json:"partitionKey"`
	SequenceNumber    *string      `thrift:"sequenceNumber,2" json:"sequenceNumber"`
	Message           []byte       `thrift:"message,3,required" json:"message"`
	CreateTimestamp   *int64       `thrift:"createTimestamp,4" json:"createTimestamp"`
	AppendTimestamp   *int64       `thrift:"appendTimestamp,5" json:"appendTimestamp"`
	MessageType       *MessageType `thrift:"messageType,6" json:"messageType"`
	SchemaFingerprint *string      `thrift:"SchemaFingerprint,7" json:"SchemaFingerprint"`
	Tag               *string      `thrift:"tag,8" json:"tag"`
}

func NewMessage() *Message {
	return &Message{}
}

var Message_PartitionKey_DEFAULT string

func (p *Message) GetPartitionKey() string {
	if !p.IsSetPartitionKey() {
		return Message_PartitionKey_DEFAULT
	}
	return *p.PartitionKey
}

var Message_SequenceNumber_DEFAULT string

func (p *Message) GetSequenceNumber() string {
	if !p.IsSetSequenceNumber() {
		return Message_SequenceNumber_DEFAULT
	}
	return *p.SequenceNumber
}

func (p *Message) GetMessage() []byte {
	return p.Message
}

var Message_CreateTimestamp_DEFAULT int64

func (p *Message) GetCreateTimestamp() int64 {
	if !p.IsSetCreateTimestamp() {
		return Message_CreateTimestamp_DEFAULT
	}
	return *p.CreateTimestamp
}

var Message_AppendTimestamp_DEFAULT int64

func (p *Message) GetAppendTimestamp() int64 {
	if !p.IsSetAppendTimestamp() {
		return Message_AppendTimestamp_DEFAULT
	}
	return *p.AppendTimestamp
}

var Message_MessageType_DEFAULT MessageType

func (p *Message) GetMessageType() MessageType {
	if !p.IsSetMessageType() {
		return Message_MessageType_DEFAULT
	}
	return *p.MessageType
}

var Message_SchemaFingerprint_DEFAULT string

func (p *Message) GetSchemaFingerprint() string {
	if !p.IsSetSchemaFingerprint() {
		return Message_SchemaFingerprint_DEFAULT
	}
	return *p.SchemaFingerprint
}

var Message_Tag_DEFAULT string

func (p *Message) GetTag() string {
	if !p.IsSetTag() {
		return Message_Tag_DEFAULT
	}
	return *p.Tag
}
func (p *Message) IsSetPartitionKey() bool {
	return p.PartitionKey != nil
}

func (p *Message) IsSetSequenceNumber() bool {
	return p.SequenceNumber != nil
}

func (p *Message) IsSetCreateTimestamp() bool {
	return p.CreateTimestamp != nil
}

func (p *Message) IsSetAppendTimestamp() bool {
	return p.AppendTimestamp != nil
}

func (p *Message) IsSetMessageType() bool {
	return p.MessageType != nil
}

func (p *Message) IsSetSchemaFingerprint() bool {
	return p.SchemaFingerprint != nil
}

func (p *Message) IsSetTag() bool {
	return p.Tag != nil
}

func (p *Message) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Message) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.PartitionKey = &v
	}
	return nil
}

func (p *Message) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.SequenceNumber = &v
	}
	return nil
}

func (p *Message) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *Message) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.CreateTimestamp = &v
	}
	return nil
}

func (p *Message) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.AppendTimestamp = &v
	}
	return nil
}

func (p *Message) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		temp := MessageType(v)
		p.MessageType = &temp
	}
	return nil
}

func (p *Message) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.SchemaFingerprint = &v
	}
	return nil
}

func (p *Message) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.Tag = &v
	}
	return nil
}

func (p *Message) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Message"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Message) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionKey() {
		if err := oprot.WriteFieldBegin("partitionKey", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:partitionKey: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.PartitionKey)); err != nil {
			return fmt.Errorf("%T.partitionKey (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:partitionKey: %s", p, err)
		}
	}
	return err
}

func (p *Message) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSequenceNumber() {
		if err := oprot.WriteFieldBegin("sequenceNumber", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:sequenceNumber: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.SequenceNumber)); err != nil {
			return fmt.Errorf("%T.sequenceNumber (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:sequenceNumber: %s", p, err)
		}
	}
	return err
}

func (p *Message) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:message: %s", p, err)
	}
	if err := oprot.WriteBinary(p.Message); err != nil {
		return fmt.Errorf("%T.message (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:message: %s", p, err)
	}
	return err
}

func (p *Message) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreateTimestamp() {
		if err := oprot.WriteFieldBegin("createTimestamp", thrift.I64, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:createTimestamp: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.CreateTimestamp)); err != nil {
			return fmt.Errorf("%T.createTimestamp (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:createTimestamp: %s", p, err)
		}
	}
	return err
}

func (p *Message) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppendTimestamp() {
		if err := oprot.WriteFieldBegin("appendTimestamp", thrift.I64, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:appendTimestamp: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.AppendTimestamp)); err != nil {
			return fmt.Errorf("%T.appendTimestamp (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:appendTimestamp: %s", p, err)
		}
	}
	return err
}

func (p *Message) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessageType() {
		if err := oprot.WriteFieldBegin("messageType", thrift.I32, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:messageType: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.MessageType)); err != nil {
			return fmt.Errorf("%T.messageType (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:messageType: %s", p, err)
		}
	}
	return err
}

func (p *Message) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetSchemaFingerprint() {
		if err := oprot.WriteFieldBegin("SchemaFingerprint", thrift.STRING, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:SchemaFingerprint: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.SchemaFingerprint)); err != nil {
			return fmt.Errorf("%T.SchemaFingerprint (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:SchemaFingerprint: %s", p, err)
		}
	}
	return err
}

func (p *Message) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetTag() {
		if err := oprot.WriteFieldBegin("tag", thrift.STRING, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:tag: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Tag)); err != nil {
			return fmt.Errorf("%T.tag (8) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:tag: %s", p, err)
		}
	}
	return err
}

func (p *Message) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Message(%+v)", *p)
}

type MessageIndex struct {
	TopicAndPartition *topic.TopicAndPartition `thrift:"topicAndPartition,1,required" json:"topicAndPartition"`
	MessageOffset     int64                    `thrift:"messageOffset,2,required" json:"messageOffset"`
	HdfsLogFileOffset int64                    `thrift:"hdfsLogFileOffset,3,required" json:"hdfsLogFileOffset"`
	MessageNumber     int32                    `thrift:"messageNumber,4,required" json:"messageNumber"`
	AppendTimeStamp   int64                    `thrift:"appendTimeStamp,5,required" json:"appendTimeStamp"`
}

func NewMessageIndex() *MessageIndex {
	return &MessageIndex{}
}

var MessageIndex_TopicAndPartition_DEFAULT *topic.TopicAndPartition

func (p *MessageIndex) GetTopicAndPartition() *topic.TopicAndPartition {
	if !p.IsSetTopicAndPartition() {
		return MessageIndex_TopicAndPartition_DEFAULT
	}
	return p.TopicAndPartition
}

func (p *MessageIndex) GetMessageOffset() int64 {
	return p.MessageOffset
}

func (p *MessageIndex) GetHdfsLogFileOffset() int64 {
	return p.HdfsLogFileOffset
}

func (p *MessageIndex) GetMessageNumber() int32 {
	return p.MessageNumber
}

func (p *MessageIndex) GetAppendTimeStamp() int64 {
	return p.AppendTimeStamp
}
func (p *MessageIndex) IsSetTopicAndPartition() bool {
	return p.TopicAndPartition != nil
}

func (p *MessageIndex) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MessageIndex) ReadField1(iprot thrift.TProtocol) error {
	p.TopicAndPartition = &topic.TopicAndPartition{}
	if err := p.TopicAndPartition.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicAndPartition, err)
	}
	return nil
}

func (p *MessageIndex) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MessageOffset = v
	}
	return nil
}

func (p *MessageIndex) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.HdfsLogFileOffset = v
	}
	return nil
}

func (p *MessageIndex) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.MessageNumber = v
	}
	return nil
}

func (p *MessageIndex) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.AppendTimeStamp = v
	}
	return nil
}

func (p *MessageIndex) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MessageIndex"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MessageIndex) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicAndPartition", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicAndPartition: %s", p, err)
	}
	if err := p.TopicAndPartition.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicAndPartition, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicAndPartition: %s", p, err)
	}
	return err
}

func (p *MessageIndex) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageOffset", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:messageOffset: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.MessageOffset)); err != nil {
		return fmt.Errorf("%T.messageOffset (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:messageOffset: %s", p, err)
	}
	return err
}

func (p *MessageIndex) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hdfsLogFileOffset", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:hdfsLogFileOffset: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.HdfsLogFileOffset)); err != nil {
		return fmt.Errorf("%T.hdfsLogFileOffset (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:hdfsLogFileOffset: %s", p, err)
	}
	return err
}

func (p *MessageIndex) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageNumber", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:messageNumber: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MessageNumber)); err != nil {
		return fmt.Errorf("%T.messageNumber (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:messageNumber: %s", p, err)
	}
	return err
}

func (p *MessageIndex) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appendTimeStamp", thrift.I64, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:appendTimeStamp: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.AppendTimeStamp)); err != nil {
		return fmt.Errorf("%T.appendTimeStamp (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:appendTimeStamp: %s", p, err)
	}
	return err
}

func (p *MessageIndex) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MessageIndex(%+v)", *p)
}

type HdfsMessageIndex struct {
	MessageOffset     int64  `thrift:"messageOffset,1,required" json:"messageOffset"`
	FilePath          string `thrift:"filePath,2,required" json:"filePath"`
	HdfsLogFileOffset int64  `thrift:"hdfsLogFileOffset,3,required" json:"hdfsLogFileOffset"`
	MessageNumber     int32  `thrift:"messageNumber,4,required" json:"messageNumber"`
}

func NewHdfsMessageIndex() *HdfsMessageIndex {
	return &HdfsMessageIndex{}
}

func (p *HdfsMessageIndex) GetMessageOffset() int64 {
	return p.MessageOffset
}

func (p *HdfsMessageIndex) GetFilePath() string {
	return p.FilePath
}

func (p *HdfsMessageIndex) GetHdfsLogFileOffset() int64 {
	return p.HdfsLogFileOffset
}

func (p *HdfsMessageIndex) GetMessageNumber() int32 {
	return p.MessageNumber
}
func (p *HdfsMessageIndex) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *HdfsMessageIndex) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.MessageOffset = v
	}
	return nil
}

func (p *HdfsMessageIndex) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.FilePath = v
	}
	return nil
}

func (p *HdfsMessageIndex) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.HdfsLogFileOffset = v
	}
	return nil
}

func (p *HdfsMessageIndex) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.MessageNumber = v
	}
	return nil
}

func (p *HdfsMessageIndex) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HdfsMessageIndex"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *HdfsMessageIndex) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageOffset", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:messageOffset: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.MessageOffset)); err != nil {
		return fmt.Errorf("%T.messageOffset (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:messageOffset: %s", p, err)
	}
	return err
}

func (p *HdfsMessageIndex) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("filePath", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:filePath: %s", p, err)
	}
	if err := oprot.WriteString(string(p.FilePath)); err != nil {
		return fmt.Errorf("%T.filePath (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:filePath: %s", p, err)
	}
	return err
}

func (p *HdfsMessageIndex) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hdfsLogFileOffset", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:hdfsLogFileOffset: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.HdfsLogFileOffset)); err != nil {
		return fmt.Errorf("%T.hdfsLogFileOffset (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:hdfsLogFileOffset: %s", p, err)
	}
	return err
}

func (p *HdfsMessageIndex) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageNumber", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:messageNumber: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MessageNumber)); err != nil {
		return fmt.Errorf("%T.messageNumber (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:messageNumber: %s", p, err)
	}
	return err
}

func (p *HdfsMessageIndex) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HdfsMessageIndex(%+v)", *p)
}

type MessageAndOffset struct {
	Message                *Message `thrift:"message,1,required" json:"message"`
	MessageOffset          int64    `thrift:"messageOffset,2,required" json:"messageOffset"`
	UnHandledMessageNumber *int64   `thrift:"unHandledMessageNumber,3" json:"unHandledMessageNumber"`
}

func NewMessageAndOffset() *MessageAndOffset {
	return &MessageAndOffset{}
}

var MessageAndOffset_Message_DEFAULT *Message

func (p *MessageAndOffset) GetMessage() *Message {
	if !p.IsSetMessage() {
		return MessageAndOffset_Message_DEFAULT
	}
	return p.Message
}

func (p *MessageAndOffset) GetMessageOffset() int64 {
	return p.MessageOffset
}

var MessageAndOffset_UnHandledMessageNumber_DEFAULT int64

func (p *MessageAndOffset) GetUnHandledMessageNumber() int64 {
	if !p.IsSetUnHandledMessageNumber() {
		return MessageAndOffset_UnHandledMessageNumber_DEFAULT
	}
	return *p.UnHandledMessageNumber
}
func (p *MessageAndOffset) IsSetMessage() bool {
	return p.Message != nil
}

func (p *MessageAndOffset) IsSetUnHandledMessageNumber() bool {
	return p.UnHandledMessageNumber != nil
}

func (p *MessageAndOffset) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MessageAndOffset) ReadField1(iprot thrift.TProtocol) error {
	p.Message = &Message{}
	if err := p.Message.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Message, err)
	}
	return nil
}

func (p *MessageAndOffset) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MessageOffset = v
	}
	return nil
}

func (p *MessageAndOffset) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.UnHandledMessageNumber = &v
	}
	return nil
}

func (p *MessageAndOffset) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MessageAndOffset"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MessageAndOffset) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:message: %s", p, err)
	}
	if err := p.Message.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Message, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:message: %s", p, err)
	}
	return err
}

func (p *MessageAndOffset) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageOffset", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:messageOffset: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.MessageOffset)); err != nil {
		return fmt.Errorf("%T.messageOffset (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:messageOffset: %s", p, err)
	}
	return err
}

func (p *MessageAndOffset) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetUnHandledMessageNumber() {
		if err := oprot.WriteFieldBegin("unHandledMessageNumber", thrift.I64, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:unHandledMessageNumber: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.UnHandledMessageNumber)); err != nil {
			return fmt.Errorf("%T.unHandledMessageNumber (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:unHandledMessageNumber: %s", p, err)
		}
	}
	return err
}

func (p *MessageAndOffset) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MessageAndOffset(%+v)", *p)
}

type FetchMessageResult_ struct {
	MessageList    []*MessageAndOffset `thrift:"messageList,1,required" json:"messageList"`
	NextReadOffset *int64              `thrift:"nextReadOffset,2" json:"nextReadOffset"`
}

func NewFetchMessageResult_() *FetchMessageResult_ {
	return &FetchMessageResult_{}
}

func (p *FetchMessageResult_) GetMessageList() []*MessageAndOffset {
	return p.MessageList
}

var FetchMessageResult__NextReadOffset_DEFAULT int64

func (p *FetchMessageResult_) GetNextReadOffset() int64 {
	if !p.IsSetNextReadOffset() {
		return FetchMessageResult__NextReadOffset_DEFAULT
	}
	return *p.NextReadOffset
}
func (p *FetchMessageResult_) IsSetNextReadOffset() bool {
	return p.NextReadOffset != nil
}

func (p *FetchMessageResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FetchMessageResult_) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*MessageAndOffset, 0, size)
	p.MessageList = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &MessageAndOffset{}
		if err := _elem0.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem0, err)
		}
		p.MessageList = append(p.MessageList, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *FetchMessageResult_) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.NextReadOffset = &v
	}
	return nil
}

func (p *FetchMessageResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FetchMessageResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FetchMessageResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageList", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:messageList: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MessageList)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.MessageList {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:messageList: %s", p, err)
	}
	return err
}

func (p *FetchMessageResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextReadOffset() {
		if err := oprot.WriteFieldBegin("nextReadOffset", thrift.I64, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:nextReadOffset: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.NextReadOffset)); err != nil {
			return fmt.Errorf("%T.nextReadOffset (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:nextReadOffset: %s", p, err)
		}
	}
	return err
}

func (p *FetchMessageResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FetchMessageResult_(%+v)", *p)
}

type MessageBlock struct {
	StartMessageOffset  int64                  `thrift:"startMessageOffset,1,required" json:"startMessageOffset"`
	MessageNumber       int32                  `thrift:"messageNumber,2,required" json:"messageNumber"`
	CompressionType     MessageCompressionType `thrift:"compressionType,3,required" json:"compressionType"`
	MessageBlock        []byte                 `thrift:"messageBlock,4,required" json:"messageBlock"`
	MessageBlockSize    *int32                 `thrift:"messageBlockSize,5" json:"messageBlockSize"`
	AppendTimestamp     *int64                 `thrift:"appendTimestamp,6" json:"appendTimestamp"`
	CreateTimestamp     *int64                 `thrift:"createTimestamp,7" json:"createTimestamp"`
	CreateTimestampList []int64                `thrift:"createTimestampList,8" json:"createTimestampList"`
	TransactionId       *int64                 `thrift:"transactionId,9" json:"transactionId"`
	Tag                 *string                `thrift:"tag,10" json:"tag"`
	TagCode             *int32                 `thrift:"tagCode,11" json:"tagCode"`
}

func NewMessageBlock() *MessageBlock {
	return &MessageBlock{
		CompressionType: 0,
	}
}

func (p *MessageBlock) GetStartMessageOffset() int64 {
	return p.StartMessageOffset
}

func (p *MessageBlock) GetMessageNumber() int32 {
	return p.MessageNumber
}

func (p *MessageBlock) GetCompressionType() MessageCompressionType {
	return p.CompressionType
}

func (p *MessageBlock) GetMessageBlock() []byte {
	return p.MessageBlock
}

var MessageBlock_MessageBlockSize_DEFAULT int32

func (p *MessageBlock) GetMessageBlockSize() int32 {
	if !p.IsSetMessageBlockSize() {
		return MessageBlock_MessageBlockSize_DEFAULT
	}
	return *p.MessageBlockSize
}

var MessageBlock_AppendTimestamp_DEFAULT int64

func (p *MessageBlock) GetAppendTimestamp() int64 {
	if !p.IsSetAppendTimestamp() {
		return MessageBlock_AppendTimestamp_DEFAULT
	}
	return *p.AppendTimestamp
}

var MessageBlock_CreateTimestamp_DEFAULT int64

func (p *MessageBlock) GetCreateTimestamp() int64 {
	if !p.IsSetCreateTimestamp() {
		return MessageBlock_CreateTimestamp_DEFAULT
	}
	return *p.CreateTimestamp
}

var MessageBlock_CreateTimestampList_DEFAULT []int64

func (p *MessageBlock) GetCreateTimestampList() []int64 {
	return p.CreateTimestampList
}

var MessageBlock_TransactionId_DEFAULT int64

func (p *MessageBlock) GetTransactionId() int64 {
	if !p.IsSetTransactionId() {
		return MessageBlock_TransactionId_DEFAULT
	}
	return *p.TransactionId
}

var MessageBlock_Tag_DEFAULT string

func (p *MessageBlock) GetTag() string {
	if !p.IsSetTag() {
		return MessageBlock_Tag_DEFAULT
	}
	return *p.Tag
}

var MessageBlock_TagCode_DEFAULT int32

func (p *MessageBlock) GetTagCode() int32 {
	if !p.IsSetTagCode() {
		return MessageBlock_TagCode_DEFAULT
	}
	return *p.TagCode
}
func (p *MessageBlock) IsSetMessageBlockSize() bool {
	return p.MessageBlockSize != nil
}

func (p *MessageBlock) IsSetAppendTimestamp() bool {
	return p.AppendTimestamp != nil
}

func (p *MessageBlock) IsSetCreateTimestamp() bool {
	return p.CreateTimestamp != nil
}

func (p *MessageBlock) IsSetCreateTimestampList() bool {
	return p.CreateTimestampList != nil
}

func (p *MessageBlock) IsSetTransactionId() bool {
	return p.TransactionId != nil
}

func (p *MessageBlock) IsSetTag() bool {
	return p.Tag != nil
}

func (p *MessageBlock) IsSetTagCode() bool {
	return p.TagCode != nil
}

func (p *MessageBlock) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MessageBlock) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.StartMessageOffset = v
	}
	return nil
}

func (p *MessageBlock) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MessageNumber = v
	}
	return nil
}

func (p *MessageBlock) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := MessageCompressionType(v)
		p.CompressionType = temp
	}
	return nil
}

func (p *MessageBlock) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.MessageBlock = v
	}
	return nil
}

func (p *MessageBlock) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.MessageBlockSize = &v
	}
	return nil
}

func (p *MessageBlock) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.AppendTimestamp = &v
	}
	return nil
}

func (p *MessageBlock) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.CreateTimestamp = &v
	}
	return nil
}

func (p *MessageBlock) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]int64, 0, size)
	p.CreateTimestampList = tSlice
	for i := 0; i < size; i++ {
		var _elem1 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem1 = v
		}
		p.CreateTimestampList = append(p.CreateTimestampList, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *MessageBlock) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.TransactionId = &v
	}
	return nil
}

func (p *MessageBlock) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.Tag = &v
	}
	return nil
}

func (p *MessageBlock) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		p.TagCode = &v
	}
	return nil
}

func (p *MessageBlock) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MessageBlock"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MessageBlock) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startMessageOffset", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:startMessageOffset: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.StartMessageOffset)); err != nil {
		return fmt.Errorf("%T.startMessageOffset (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:startMessageOffset: %s", p, err)
	}
	return err
}

func (p *MessageBlock) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageNumber", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:messageNumber: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MessageNumber)); err != nil {
		return fmt.Errorf("%T.messageNumber (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:messageNumber: %s", p, err)
	}
	return err
}

func (p *MessageBlock) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("compressionType", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:compressionType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.CompressionType)); err != nil {
		return fmt.Errorf("%T.compressionType (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:compressionType: %s", p, err)
	}
	return err
}

func (p *MessageBlock) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageBlock", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:messageBlock: %s", p, err)
	}
	if err := oprot.WriteBinary(p.MessageBlock); err != nil {
		return fmt.Errorf("%T.messageBlock (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:messageBlock: %s", p, err)
	}
	return err
}

func (p *MessageBlock) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessageBlockSize() {
		if err := oprot.WriteFieldBegin("messageBlockSize", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:messageBlockSize: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.MessageBlockSize)); err != nil {
			return fmt.Errorf("%T.messageBlockSize (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:messageBlockSize: %s", p, err)
		}
	}
	return err
}

func (p *MessageBlock) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppendTimestamp() {
		if err := oprot.WriteFieldBegin("appendTimestamp", thrift.I64, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:appendTimestamp: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.AppendTimestamp)); err != nil {
			return fmt.Errorf("%T.appendTimestamp (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:appendTimestamp: %s", p, err)
		}
	}
	return err
}

func (p *MessageBlock) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreateTimestamp() {
		if err := oprot.WriteFieldBegin("createTimestamp", thrift.I64, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:createTimestamp: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.CreateTimestamp)); err != nil {
			return fmt.Errorf("%T.createTimestamp (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:createTimestamp: %s", p, err)
		}
	}
	return err
}

func (p *MessageBlock) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreateTimestampList() {
		if err := oprot.WriteFieldBegin("createTimestampList", thrift.LIST, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:createTimestampList: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.CreateTimestampList)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.CreateTimestampList {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:createTimestampList: %s", p, err)
		}
	}
	return err
}

func (p *MessageBlock) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetTransactionId() {
		if err := oprot.WriteFieldBegin("transactionId", thrift.I64, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:transactionId: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.TransactionId)); err != nil {
			return fmt.Errorf("%T.transactionId (9) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:transactionId: %s", p, err)
		}
	}
	return err
}

func (p *MessageBlock) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetTag() {
		if err := oprot.WriteFieldBegin("tag", thrift.STRING, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:tag: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Tag)); err != nil {
			return fmt.Errorf("%T.tag (10) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:tag: %s", p, err)
		}
	}
	return err
}

func (p *MessageBlock) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagCode() {
		if err := oprot.WriteFieldBegin("tagCode", thrift.I32, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:tagCode: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.TagCode)); err != nil {
			return fmt.Errorf("%T.tagCode (11) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:tagCode: %s", p, err)
		}
	}
	return err
}

func (p *MessageBlock) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MessageBlock(%+v)", *p)
}

type PutMessageRequest struct {
	TopicAndPartition *topic.TopicAndPartition `thrift:"topicAndPartition,1,required" json:"topicAndPartition"`
	MessageBlocks     []*MessageBlock          `thrift:"messageBlocks,2,required" json:"messageBlocks"`
	MessageNumber     int32                    `thrift:"messageNumber,3,required" json:"messageNumber"`
	SequenceId        string                   `thrift:"sequenceId,4,required" json:"sequenceId"`
	TimeoutTimestamp  *int64                   `thrift:"timeoutTimestamp,5" json:"timeoutTimestamp"`
}

func NewPutMessageRequest() *PutMessageRequest {
	return &PutMessageRequest{}
}

var PutMessageRequest_TopicAndPartition_DEFAULT *topic.TopicAndPartition

func (p *PutMessageRequest) GetTopicAndPartition() *topic.TopicAndPartition {
	if !p.IsSetTopicAndPartition() {
		return PutMessageRequest_TopicAndPartition_DEFAULT
	}
	return p.TopicAndPartition
}

func (p *PutMessageRequest) GetMessageBlocks() []*MessageBlock {
	return p.MessageBlocks
}

func (p *PutMessageRequest) GetMessageNumber() int32 {
	return p.MessageNumber
}

func (p *PutMessageRequest) GetSequenceId() string {
	return p.SequenceId
}

var PutMessageRequest_TimeoutTimestamp_DEFAULT int64

func (p *PutMessageRequest) GetTimeoutTimestamp() int64 {
	if !p.IsSetTimeoutTimestamp() {
		return PutMessageRequest_TimeoutTimestamp_DEFAULT
	}
	return *p.TimeoutTimestamp
}
func (p *PutMessageRequest) IsSetTopicAndPartition() bool {
	return p.TopicAndPartition != nil
}

func (p *PutMessageRequest) IsSetTimeoutTimestamp() bool {
	return p.TimeoutTimestamp != nil
}

func (p *PutMessageRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PutMessageRequest) ReadField1(iprot thrift.TProtocol) error {
	p.TopicAndPartition = &topic.TopicAndPartition{}
	if err := p.TopicAndPartition.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicAndPartition, err)
	}
	return nil
}

func (p *PutMessageRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*MessageBlock, 0, size)
	p.MessageBlocks = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &MessageBlock{
			CompressionType: 0,
		}
		if err := _elem2.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem2, err)
		}
		p.MessageBlocks = append(p.MessageBlocks, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *PutMessageRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MessageNumber = v
	}
	return nil
}

func (p *PutMessageRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.SequenceId = v
	}
	return nil
}

func (p *PutMessageRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.TimeoutTimestamp = &v
	}
	return nil
}

func (p *PutMessageRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PutMessageRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PutMessageRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicAndPartition", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicAndPartition: %s", p, err)
	}
	if err := p.TopicAndPartition.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicAndPartition, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicAndPartition: %s", p, err)
	}
	return err
}

func (p *PutMessageRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageBlocks", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:messageBlocks: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MessageBlocks)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.MessageBlocks {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:messageBlocks: %s", p, err)
	}
	return err
}

func (p *PutMessageRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageNumber", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:messageNumber: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MessageNumber)); err != nil {
		return fmt.Errorf("%T.messageNumber (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:messageNumber: %s", p, err)
	}
	return err
}

func (p *PutMessageRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sequenceId", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:sequenceId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SequenceId)); err != nil {
		return fmt.Errorf("%T.sequenceId (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:sequenceId: %s", p, err)
	}
	return err
}

func (p *PutMessageRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeoutTimestamp() {
		if err := oprot.WriteFieldBegin("timeoutTimestamp", thrift.I64, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:timeoutTimestamp: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.TimeoutTimestamp)); err != nil {
			return fmt.Errorf("%T.timeoutTimestamp (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:timeoutTimestamp: %s", p, err)
		}
	}
	return err
}

func (p *PutMessageRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PutMessageRequest(%+v)", *p)
}

type PutMessageResponse struct {
	SequenceId string `thrift:"sequenceId,1,required" json:"sequenceId"`
	IsTransfer *bool  `thrift:"isTransfer,2" json:"isTransfer"`
}

func NewPutMessageResponse() *PutMessageResponse {
	return &PutMessageResponse{}
}

func (p *PutMessageResponse) GetSequenceId() string {
	return p.SequenceId
}

var PutMessageResponse_IsTransfer_DEFAULT bool

func (p *PutMessageResponse) GetIsTransfer() bool {
	if !p.IsSetIsTransfer() {
		return PutMessageResponse_IsTransfer_DEFAULT
	}
	return *p.IsTransfer
}
func (p *PutMessageResponse) IsSetIsTransfer() bool {
	return p.IsTransfer != nil
}

func (p *PutMessageResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PutMessageResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.SequenceId = v
	}
	return nil
}

func (p *PutMessageResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.IsTransfer = &v
	}
	return nil
}

func (p *PutMessageResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PutMessageResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PutMessageResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sequenceId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:sequenceId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SequenceId)); err != nil {
		return fmt.Errorf("%T.sequenceId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:sequenceId: %s", p, err)
	}
	return err
}

func (p *PutMessageResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsTransfer() {
		if err := oprot.WriteFieldBegin("isTransfer", thrift.BOOL, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:isTransfer: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.IsTransfer)); err != nil {
			return fmt.Errorf("%T.isTransfer (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:isTransfer: %s", p, err)
		}
	}
	return err
}

func (p *PutMessageResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PutMessageResponse(%+v)", *p)
}

type GetMessageRequest struct {
	TopicAndPartition *topic.TopicAndPartition `thrift:"topicAndPartition,1,required" json:"topicAndPartition"`
	// unused field # 2
	MessageOffset              int64           `thrift:"messageOffset,3,required" json:"messageOffset"`
	MaxGetMessageNumber        int32           `thrift:"maxGetMessageNumber,4" json:"maxGetMessageNumber"`
	MaxGetMessageBytes         int32           `thrift:"maxGetMessageBytes,5" json:"maxGetMessageBytes"`
	ShowUnHandledMessageNumber bool            `thrift:"showUnHandledMessageNumber,6" json:"showUnHandledMessageNumber"`
	SequenceId                 string          `thrift:"sequenceId,7,required" json:"sequenceId"`
	TimeoutTimestamp           *int64          `thrift:"timeoutTimestamp,8" json:"timeoutTimestamp"`
	MessageTags                map[string]bool `thrift:"messageTags,9" json:"messageTags"`
}

func NewGetMessageRequest() *GetMessageRequest {
	return &GetMessageRequest{
		MaxGetMessageNumber: 2000,

		MaxGetMessageBytes: 10485760,

		ShowUnHandledMessageNumber: true,
	}
}

var GetMessageRequest_TopicAndPartition_DEFAULT *topic.TopicAndPartition

func (p *GetMessageRequest) GetTopicAndPartition() *topic.TopicAndPartition {
	if !p.IsSetTopicAndPartition() {
		return GetMessageRequest_TopicAndPartition_DEFAULT
	}
	return p.TopicAndPartition
}

func (p *GetMessageRequest) GetMessageOffset() int64 {
	return p.MessageOffset
}

var GetMessageRequest_MaxGetMessageNumber_DEFAULT int32 = 2000

func (p *GetMessageRequest) GetMaxGetMessageNumber() int32 {
	return p.MaxGetMessageNumber
}

var GetMessageRequest_MaxGetMessageBytes_DEFAULT int32 = 10485760

func (p *GetMessageRequest) GetMaxGetMessageBytes() int32 {
	return p.MaxGetMessageBytes
}

var GetMessageRequest_ShowUnHandledMessageNumber_DEFAULT bool = true

func (p *GetMessageRequest) GetShowUnHandledMessageNumber() bool {
	return p.ShowUnHandledMessageNumber
}

func (p *GetMessageRequest) GetSequenceId() string {
	return p.SequenceId
}

var GetMessageRequest_TimeoutTimestamp_DEFAULT int64

func (p *GetMessageRequest) GetTimeoutTimestamp() int64 {
	if !p.IsSetTimeoutTimestamp() {
		return GetMessageRequest_TimeoutTimestamp_DEFAULT
	}
	return *p.TimeoutTimestamp
}

var GetMessageRequest_MessageTags_DEFAULT map[string]bool

func (p *GetMessageRequest) GetMessageTags() map[string]bool {
	return p.MessageTags
}
func (p *GetMessageRequest) IsSetTopicAndPartition() bool {
	return p.TopicAndPartition != nil
}

func (p *GetMessageRequest) IsSetMaxGetMessageNumber() bool {
	return p.MaxGetMessageNumber != GetMessageRequest_MaxGetMessageNumber_DEFAULT
}

func (p *GetMessageRequest) IsSetMaxGetMessageBytes() bool {
	return p.MaxGetMessageBytes != GetMessageRequest_MaxGetMessageBytes_DEFAULT
}

func (p *GetMessageRequest) IsSetShowUnHandledMessageNumber() bool {
	return p.ShowUnHandledMessageNumber != GetMessageRequest_ShowUnHandledMessageNumber_DEFAULT
}

func (p *GetMessageRequest) IsSetTimeoutTimestamp() bool {
	return p.TimeoutTimestamp != nil
}

func (p *GetMessageRequest) IsSetMessageTags() bool {
	return p.MessageTags != nil
}

func (p *GetMessageRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetMessageRequest) ReadField1(iprot thrift.TProtocol) error {
	p.TopicAndPartition = &topic.TopicAndPartition{}
	if err := p.TopicAndPartition.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicAndPartition, err)
	}
	return nil
}

func (p *GetMessageRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MessageOffset = v
	}
	return nil
}

func (p *GetMessageRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.MaxGetMessageNumber = v
	}
	return nil
}

func (p *GetMessageRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.MaxGetMessageBytes = v
	}
	return nil
}

func (p *GetMessageRequest) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.ShowUnHandledMessageNumber = v
	}
	return nil
}

func (p *GetMessageRequest) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.SequenceId = v
	}
	return nil
}

func (p *GetMessageRequest) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.TimeoutTimestamp = &v
	}
	return nil
}

func (p *GetMessageRequest) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return fmt.Errorf("error reading set begin: %s", err)
	}
	tSet := make(map[string]bool, size)
	p.MessageTags = tSet
	for i := 0; i < size; i++ {
		var _elem3 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem3 = v
		}
		p.MessageTags[_elem3] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return fmt.Errorf("error reading set end: %s", err)
	}
	return nil
}

func (p *GetMessageRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetMessageRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetMessageRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicAndPartition", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicAndPartition: %s", p, err)
	}
	if err := p.TopicAndPartition.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicAndPartition, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicAndPartition: %s", p, err)
	}
	return err
}

func (p *GetMessageRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageOffset", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:messageOffset: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.MessageOffset)); err != nil {
		return fmt.Errorf("%T.messageOffset (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:messageOffset: %s", p, err)
	}
	return err
}

func (p *GetMessageRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxGetMessageNumber() {
		if err := oprot.WriteFieldBegin("maxGetMessageNumber", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:maxGetMessageNumber: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.MaxGetMessageNumber)); err != nil {
			return fmt.Errorf("%T.maxGetMessageNumber (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:maxGetMessageNumber: %s", p, err)
		}
	}
	return err
}

func (p *GetMessageRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxGetMessageBytes() {
		if err := oprot.WriteFieldBegin("maxGetMessageBytes", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:maxGetMessageBytes: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.MaxGetMessageBytes)); err != nil {
			return fmt.Errorf("%T.maxGetMessageBytes (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:maxGetMessageBytes: %s", p, err)
		}
	}
	return err
}

func (p *GetMessageRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetShowUnHandledMessageNumber() {
		if err := oprot.WriteFieldBegin("showUnHandledMessageNumber", thrift.BOOL, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:showUnHandledMessageNumber: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.ShowUnHandledMessageNumber)); err != nil {
			return fmt.Errorf("%T.showUnHandledMessageNumber (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:showUnHandledMessageNumber: %s", p, err)
		}
	}
	return err
}

func (p *GetMessageRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sequenceId", thrift.STRING, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:sequenceId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SequenceId)); err != nil {
		return fmt.Errorf("%T.sequenceId (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:sequenceId: %s", p, err)
	}
	return err
}

func (p *GetMessageRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeoutTimestamp() {
		if err := oprot.WriteFieldBegin("timeoutTimestamp", thrift.I64, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:timeoutTimestamp: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.TimeoutTimestamp)); err != nil {
			return fmt.Errorf("%T.timeoutTimestamp (8) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:timeoutTimestamp: %s", p, err)
		}
	}
	return err
}

func (p *GetMessageRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessageTags() {
		if err := oprot.WriteFieldBegin("messageTags", thrift.SET, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:messageTags: %s", p, err)
		}
		if err := oprot.WriteSetBegin(thrift.STRING, len(p.MessageTags)); err != nil {
			return fmt.Errorf("error writing set begin: %s", err)
		}
		for v, _ := range p.MessageTags {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return fmt.Errorf("error writing set end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:messageTags: %s", p, err)
		}
	}
	return err
}

func (p *GetMessageRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetMessageRequest(%+v)", *p)
}

type GetMessageResponse struct {
	MessageBlocks          []*MessageBlock `thrift:"messageBlocks,1,required" json:"messageBlocks"`
	MessageNumber          int32           `thrift:"messageNumber,2,required" json:"messageNumber"`
	UnHandledMessageNumber *int64          `thrift:"unHandledMessageNumber,3" json:"unHandledMessageNumber"`
	SequenceId             string          `thrift:"sequenceId,4,required" json:"sequenceId"`
	IsTransfer             *bool           `thrift:"isTransfer,5" json:"isTransfer"`
	NextReadOffset         *int64          `thrift:"nextReadOffset,6" json:"nextReadOffset"`
}

func NewGetMessageResponse() *GetMessageResponse {
	return &GetMessageResponse{}
}

func (p *GetMessageResponse) GetMessageBlocks() []*MessageBlock {
	return p.MessageBlocks
}

func (p *GetMessageResponse) GetMessageNumber() int32 {
	return p.MessageNumber
}

var GetMessageResponse_UnHandledMessageNumber_DEFAULT int64

func (p *GetMessageResponse) GetUnHandledMessageNumber() int64 {
	if !p.IsSetUnHandledMessageNumber() {
		return GetMessageResponse_UnHandledMessageNumber_DEFAULT
	}
	return *p.UnHandledMessageNumber
}

func (p *GetMessageResponse) GetSequenceId() string {
	return p.SequenceId
}

var GetMessageResponse_IsTransfer_DEFAULT bool

func (p *GetMessageResponse) GetIsTransfer() bool {
	if !p.IsSetIsTransfer() {
		return GetMessageResponse_IsTransfer_DEFAULT
	}
	return *p.IsTransfer
}

var GetMessageResponse_NextReadOffset_DEFAULT int64

func (p *GetMessageResponse) GetNextReadOffset() int64 {
	if !p.IsSetNextReadOffset() {
		return GetMessageResponse_NextReadOffset_DEFAULT
	}
	return *p.NextReadOffset
}
func (p *GetMessageResponse) IsSetUnHandledMessageNumber() bool {
	return p.UnHandledMessageNumber != nil
}

func (p *GetMessageResponse) IsSetIsTransfer() bool {
	return p.IsTransfer != nil
}

func (p *GetMessageResponse) IsSetNextReadOffset() bool {
	return p.NextReadOffset != nil
}

func (p *GetMessageResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetMessageResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*MessageBlock, 0, size)
	p.MessageBlocks = tSlice
	for i := 0; i < size; i++ {
		_elem4 := &MessageBlock{
			CompressionType: 0,
		}
		if err := _elem4.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem4, err)
		}
		p.MessageBlocks = append(p.MessageBlocks, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetMessageResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MessageNumber = v
	}
	return nil
}

func (p *GetMessageResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.UnHandledMessageNumber = &v
	}
	return nil
}

func (p *GetMessageResponse) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.SequenceId = v
	}
	return nil
}

func (p *GetMessageResponse) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.IsTransfer = &v
	}
	return nil
}

func (p *GetMessageResponse) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.NextReadOffset = &v
	}
	return nil
}

func (p *GetMessageResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetMessageResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetMessageResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageBlocks", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:messageBlocks: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MessageBlocks)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.MessageBlocks {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:messageBlocks: %s", p, err)
	}
	return err
}

func (p *GetMessageResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageNumber", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:messageNumber: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MessageNumber)); err != nil {
		return fmt.Errorf("%T.messageNumber (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:messageNumber: %s", p, err)
	}
	return err
}

func (p *GetMessageResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetUnHandledMessageNumber() {
		if err := oprot.WriteFieldBegin("unHandledMessageNumber", thrift.I64, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:unHandledMessageNumber: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.UnHandledMessageNumber)); err != nil {
			return fmt.Errorf("%T.unHandledMessageNumber (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:unHandledMessageNumber: %s", p, err)
		}
	}
	return err
}

func (p *GetMessageResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sequenceId", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:sequenceId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SequenceId)); err != nil {
		return fmt.Errorf("%T.sequenceId (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:sequenceId: %s", p, err)
	}
	return err
}

func (p *GetMessageResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsTransfer() {
		if err := oprot.WriteFieldBegin("isTransfer", thrift.BOOL, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:isTransfer: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.IsTransfer)); err != nil {
			return fmt.Errorf("%T.isTransfer (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:isTransfer: %s", p, err)
		}
	}
	return err
}

func (p *GetMessageResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextReadOffset() {
		if err := oprot.WriteFieldBegin("nextReadOffset", thrift.I64, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:nextReadOffset: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.NextReadOffset)); err != nil {
			return fmt.Errorf("%T.nextReadOffset (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:nextReadOffset: %s", p, err)
		}
	}
	return err
}

func (p *GetMessageResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetMessageResponse(%+v)", *p)
}

type PrepareRequest struct {
	TopicAndPartition *topic.TopicAndPartition `thrift:"topicAndPartition,1,required" json:"topicAndPartition"`
	MessageBlock      *MessageBlock            `thrift:"messageBlock,2,required" json:"messageBlock"`
	MessageNumber     int32                    `thrift:"messageNumber,3,required" json:"messageNumber"`
	SequenceId        string                   `thrift:"sequenceId,4,required" json:"sequenceId"`
	TimeoutTimestamp  *int64                   `thrift:"timeoutTimestamp,5" json:"timeoutTimestamp"`
}

func NewPrepareRequest() *PrepareRequest {
	return &PrepareRequest{}
}

var PrepareRequest_TopicAndPartition_DEFAULT *topic.TopicAndPartition

func (p *PrepareRequest) GetTopicAndPartition() *topic.TopicAndPartition {
	if !p.IsSetTopicAndPartition() {
		return PrepareRequest_TopicAndPartition_DEFAULT
	}
	return p.TopicAndPartition
}

var PrepareRequest_MessageBlock_DEFAULT *MessageBlock

func (p *PrepareRequest) GetMessageBlock() *MessageBlock {
	if !p.IsSetMessageBlock() {
		return PrepareRequest_MessageBlock_DEFAULT
	}
	return p.MessageBlock
}

func (p *PrepareRequest) GetMessageNumber() int32 {
	return p.MessageNumber
}

func (p *PrepareRequest) GetSequenceId() string {
	return p.SequenceId
}

var PrepareRequest_TimeoutTimestamp_DEFAULT int64

func (p *PrepareRequest) GetTimeoutTimestamp() int64 {
	if !p.IsSetTimeoutTimestamp() {
		return PrepareRequest_TimeoutTimestamp_DEFAULT
	}
	return *p.TimeoutTimestamp
}
func (p *PrepareRequest) IsSetTopicAndPartition() bool {
	return p.TopicAndPartition != nil
}

func (p *PrepareRequest) IsSetMessageBlock() bool {
	return p.MessageBlock != nil
}

func (p *PrepareRequest) IsSetTimeoutTimestamp() bool {
	return p.TimeoutTimestamp != nil
}

func (p *PrepareRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PrepareRequest) ReadField1(iprot thrift.TProtocol) error {
	p.TopicAndPartition = &topic.TopicAndPartition{}
	if err := p.TopicAndPartition.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicAndPartition, err)
	}
	return nil
}

func (p *PrepareRequest) ReadField2(iprot thrift.TProtocol) error {
	p.MessageBlock = &MessageBlock{
		CompressionType: 0,
	}
	if err := p.MessageBlock.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.MessageBlock, err)
	}
	return nil
}

func (p *PrepareRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MessageNumber = v
	}
	return nil
}

func (p *PrepareRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.SequenceId = v
	}
	return nil
}

func (p *PrepareRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.TimeoutTimestamp = &v
	}
	return nil
}

func (p *PrepareRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PrepareRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PrepareRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicAndPartition", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicAndPartition: %s", p, err)
	}
	if err := p.TopicAndPartition.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicAndPartition, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicAndPartition: %s", p, err)
	}
	return err
}

func (p *PrepareRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageBlock", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:messageBlock: %s", p, err)
	}
	if err := p.MessageBlock.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.MessageBlock, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:messageBlock: %s", p, err)
	}
	return err
}

func (p *PrepareRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageNumber", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:messageNumber: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MessageNumber)); err != nil {
		return fmt.Errorf("%T.messageNumber (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:messageNumber: %s", p, err)
	}
	return err
}

func (p *PrepareRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sequenceId", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:sequenceId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SequenceId)); err != nil {
		return fmt.Errorf("%T.sequenceId (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:sequenceId: %s", p, err)
	}
	return err
}

func (p *PrepareRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeoutTimestamp() {
		if err := oprot.WriteFieldBegin("timeoutTimestamp", thrift.I64, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:timeoutTimestamp: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.TimeoutTimestamp)); err != nil {
			return fmt.Errorf("%T.timeoutTimestamp (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:timeoutTimestamp: %s", p, err)
		}
	}
	return err
}

func (p *PrepareRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PrepareRequest(%+v)", *p)
}

type PrepareResponse struct {
	TopicAndPartition *topic.TopicAndPartition `thrift:"topicAndPartition,1,required" json:"topicAndPartition"`
	TransactionId     int64                    `thrift:"transactionId,2,required" json:"transactionId"`
	IsTransfer        *bool                    `thrift:"isTransfer,3" json:"isTransfer"`
}

func NewPrepareResponse() *PrepareResponse {
	return &PrepareResponse{}
}

var PrepareResponse_TopicAndPartition_DEFAULT *topic.TopicAndPartition

func (p *PrepareResponse) GetTopicAndPartition() *topic.TopicAndPartition {
	if !p.IsSetTopicAndPartition() {
		return PrepareResponse_TopicAndPartition_DEFAULT
	}
	return p.TopicAndPartition
}

func (p *PrepareResponse) GetTransactionId() int64 {
	return p.TransactionId
}

var PrepareResponse_IsTransfer_DEFAULT bool

func (p *PrepareResponse) GetIsTransfer() bool {
	if !p.IsSetIsTransfer() {
		return PrepareResponse_IsTransfer_DEFAULT
	}
	return *p.IsTransfer
}
func (p *PrepareResponse) IsSetTopicAndPartition() bool {
	return p.TopicAndPartition != nil
}

func (p *PrepareResponse) IsSetIsTransfer() bool {
	return p.IsTransfer != nil
}

func (p *PrepareResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PrepareResponse) ReadField1(iprot thrift.TProtocol) error {
	p.TopicAndPartition = &topic.TopicAndPartition{}
	if err := p.TopicAndPartition.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicAndPartition, err)
	}
	return nil
}

func (p *PrepareResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TransactionId = v
	}
	return nil
}

func (p *PrepareResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.IsTransfer = &v
	}
	return nil
}

func (p *PrepareResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PrepareResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PrepareResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicAndPartition", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicAndPartition: %s", p, err)
	}
	if err := p.TopicAndPartition.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicAndPartition, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicAndPartition: %s", p, err)
	}
	return err
}

func (p *PrepareResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("transactionId", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:transactionId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.TransactionId)); err != nil {
		return fmt.Errorf("%T.transactionId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:transactionId: %s", p, err)
	}
	return err
}

func (p *PrepareResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsTransfer() {
		if err := oprot.WriteFieldBegin("isTransfer", thrift.BOOL, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:isTransfer: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.IsTransfer)); err != nil {
			return fmt.Errorf("%T.isTransfer (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:isTransfer: %s", p, err)
		}
	}
	return err
}

func (p *PrepareResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PrepareResponse(%+v)", *p)
}

type CommitRequest struct {
	TopicAndPartition *topic.TopicAndPartition `thrift:"topicAndPartition,1,required" json:"topicAndPartition"`
	TransactionId     int64                    `thrift:"transactionId,2,required" json:"transactionId"`
	SequenceId        string                   `thrift:"sequenceId,3,required" json:"sequenceId"`
}

func NewCommitRequest() *CommitRequest {
	return &CommitRequest{}
}

var CommitRequest_TopicAndPartition_DEFAULT *topic.TopicAndPartition

func (p *CommitRequest) GetTopicAndPartition() *topic.TopicAndPartition {
	if !p.IsSetTopicAndPartition() {
		return CommitRequest_TopicAndPartition_DEFAULT
	}
	return p.TopicAndPartition
}

func (p *CommitRequest) GetTransactionId() int64 {
	return p.TransactionId
}

func (p *CommitRequest) GetSequenceId() string {
	return p.SequenceId
}
func (p *CommitRequest) IsSetTopicAndPartition() bool {
	return p.TopicAndPartition != nil
}

func (p *CommitRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CommitRequest) ReadField1(iprot thrift.TProtocol) error {
	p.TopicAndPartition = &topic.TopicAndPartition{}
	if err := p.TopicAndPartition.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicAndPartition, err)
	}
	return nil
}

func (p *CommitRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TransactionId = v
	}
	return nil
}

func (p *CommitRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.SequenceId = v
	}
	return nil
}

func (p *CommitRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CommitRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CommitRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicAndPartition", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicAndPartition: %s", p, err)
	}
	if err := p.TopicAndPartition.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicAndPartition, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicAndPartition: %s", p, err)
	}
	return err
}

func (p *CommitRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("transactionId", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:transactionId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.TransactionId)); err != nil {
		return fmt.Errorf("%T.transactionId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:transactionId: %s", p, err)
	}
	return err
}

func (p *CommitRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sequenceId", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:sequenceId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SequenceId)); err != nil {
		return fmt.Errorf("%T.sequenceId (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:sequenceId: %s", p, err)
	}
	return err
}

func (p *CommitRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommitRequest(%+v)", *p)
}

type CommitResponse struct {
	TopicAndPartition *topic.TopicAndPartition `thrift:"topicAndPartition,1,required" json:"topicAndPartition"`
	TransactionId     int64                    `thrift:"transactionId,2,required" json:"transactionId"`
	IsTransfer        *bool                    `thrift:"isTransfer,3" json:"isTransfer"`
}

func NewCommitResponse() *CommitResponse {
	return &CommitResponse{}
}

var CommitResponse_TopicAndPartition_DEFAULT *topic.TopicAndPartition

func (p *CommitResponse) GetTopicAndPartition() *topic.TopicAndPartition {
	if !p.IsSetTopicAndPartition() {
		return CommitResponse_TopicAndPartition_DEFAULT
	}
	return p.TopicAndPartition
}

func (p *CommitResponse) GetTransactionId() int64 {
	return p.TransactionId
}

var CommitResponse_IsTransfer_DEFAULT bool

func (p *CommitResponse) GetIsTransfer() bool {
	if !p.IsSetIsTransfer() {
		return CommitResponse_IsTransfer_DEFAULT
	}
	return *p.IsTransfer
}
func (p *CommitResponse) IsSetTopicAndPartition() bool {
	return p.TopicAndPartition != nil
}

func (p *CommitResponse) IsSetIsTransfer() bool {
	return p.IsTransfer != nil
}

func (p *CommitResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CommitResponse) ReadField1(iprot thrift.TProtocol) error {
	p.TopicAndPartition = &topic.TopicAndPartition{}
	if err := p.TopicAndPartition.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicAndPartition, err)
	}
	return nil
}

func (p *CommitResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TransactionId = v
	}
	return nil
}

func (p *CommitResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.IsTransfer = &v
	}
	return nil
}

func (p *CommitResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CommitResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CommitResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicAndPartition", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicAndPartition: %s", p, err)
	}
	if err := p.TopicAndPartition.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicAndPartition, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicAndPartition: %s", p, err)
	}
	return err
}

func (p *CommitResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("transactionId", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:transactionId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.TransactionId)); err != nil {
		return fmt.Errorf("%T.transactionId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:transactionId: %s", p, err)
	}
	return err
}

func (p *CommitResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsTransfer() {
		if err := oprot.WriteFieldBegin("isTransfer", thrift.BOOL, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:isTransfer: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.IsTransfer)); err != nil {
			return fmt.Errorf("%T.isTransfer (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:isTransfer: %s", p, err)
		}
	}
	return err
}

func (p *CommitResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommitResponse(%+v)", *p)
}

type RollbackRequest struct {
	TopicAndPartition *topic.TopicAndPartition `thrift:"topicAndPartition,1,required" json:"topicAndPartition"`
	TransactionId     int64                    `thrift:"transactionId,2,required" json:"transactionId"`
	SequenceId        string                   `thrift:"sequenceId,3,required" json:"sequenceId"`
}

func NewRollbackRequest() *RollbackRequest {
	return &RollbackRequest{}
}

var RollbackRequest_TopicAndPartition_DEFAULT *topic.TopicAndPartition

func (p *RollbackRequest) GetTopicAndPartition() *topic.TopicAndPartition {
	if !p.IsSetTopicAndPartition() {
		return RollbackRequest_TopicAndPartition_DEFAULT
	}
	return p.TopicAndPartition
}

func (p *RollbackRequest) GetTransactionId() int64 {
	return p.TransactionId
}

func (p *RollbackRequest) GetSequenceId() string {
	return p.SequenceId
}
func (p *RollbackRequest) IsSetTopicAndPartition() bool {
	return p.TopicAndPartition != nil
}

func (p *RollbackRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RollbackRequest) ReadField1(iprot thrift.TProtocol) error {
	p.TopicAndPartition = &topic.TopicAndPartition{}
	if err := p.TopicAndPartition.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicAndPartition, err)
	}
	return nil
}

func (p *RollbackRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TransactionId = v
	}
	return nil
}

func (p *RollbackRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.SequenceId = v
	}
	return nil
}

func (p *RollbackRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RollbackRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RollbackRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicAndPartition", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicAndPartition: %s", p, err)
	}
	if err := p.TopicAndPartition.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicAndPartition, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicAndPartition: %s", p, err)
	}
	return err
}

func (p *RollbackRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("transactionId", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:transactionId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.TransactionId)); err != nil {
		return fmt.Errorf("%T.transactionId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:transactionId: %s", p, err)
	}
	return err
}

func (p *RollbackRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sequenceId", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:sequenceId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SequenceId)); err != nil {
		return fmt.Errorf("%T.sequenceId (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:sequenceId: %s", p, err)
	}
	return err
}

func (p *RollbackRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RollbackRequest(%+v)", *p)
}

type RollbackResponse struct {
	TopicAndPartition *topic.TopicAndPartition `thrift:"topicAndPartition,1,required" json:"topicAndPartition"`
	TransactionId     int64                    `thrift:"transactionId,2,required" json:"transactionId"`
	IsTransfer        *bool                    `thrift:"isTransfer,3" json:"isTransfer"`
}

func NewRollbackResponse() *RollbackResponse {
	return &RollbackResponse{}
}

var RollbackResponse_TopicAndPartition_DEFAULT *topic.TopicAndPartition

func (p *RollbackResponse) GetTopicAndPartition() *topic.TopicAndPartition {
	if !p.IsSetTopicAndPartition() {
		return RollbackResponse_TopicAndPartition_DEFAULT
	}
	return p.TopicAndPartition
}

func (p *RollbackResponse) GetTransactionId() int64 {
	return p.TransactionId
}

var RollbackResponse_IsTransfer_DEFAULT bool

func (p *RollbackResponse) GetIsTransfer() bool {
	if !p.IsSetIsTransfer() {
		return RollbackResponse_IsTransfer_DEFAULT
	}
	return *p.IsTransfer
}
func (p *RollbackResponse) IsSetTopicAndPartition() bool {
	return p.TopicAndPartition != nil
}

func (p *RollbackResponse) IsSetIsTransfer() bool {
	return p.IsTransfer != nil
}

func (p *RollbackResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RollbackResponse) ReadField1(iprot thrift.TProtocol) error {
	p.TopicAndPartition = &topic.TopicAndPartition{}
	if err := p.TopicAndPartition.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicAndPartition, err)
	}
	return nil
}

func (p *RollbackResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TransactionId = v
	}
	return nil
}

func (p *RollbackResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.IsTransfer = &v
	}
	return nil
}

func (p *RollbackResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RollbackResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RollbackResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicAndPartition", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicAndPartition: %s", p, err)
	}
	if err := p.TopicAndPartition.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicAndPartition, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicAndPartition: %s", p, err)
	}
	return err
}

func (p *RollbackResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("transactionId", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:transactionId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.TransactionId)); err != nil {
		return fmt.Errorf("%T.transactionId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:transactionId: %s", p, err)
	}
	return err
}

func (p *RollbackResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsTransfer() {
		if err := oprot.WriteFieldBegin("isTransfer", thrift.BOOL, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:isTransfer: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.IsTransfer)); err != nil {
			return fmt.Errorf("%T.isTransfer (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:isTransfer: %s", p, err)
		}
	}
	return err
}

func (p *RollbackResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RollbackResponse(%+v)", *p)
}

type GetUnkownStateTransactionRequest struct {
	TopicAndPartition *topic.TopicAndPartition `thrift:"topicAndPartition,1,required" json:"topicAndPartition"`
	TimeoutTimestamp  *int64                   `thrift:"timeoutTimestamp,2" json:"timeoutTimestamp"`
}

func NewGetUnkownStateTransactionRequest() *GetUnkownStateTransactionRequest {
	return &GetUnkownStateTransactionRequest{}
}

var GetUnkownStateTransactionRequest_TopicAndPartition_DEFAULT *topic.TopicAndPartition

func (p *GetUnkownStateTransactionRequest) GetTopicAndPartition() *topic.TopicAndPartition {
	if !p.IsSetTopicAndPartition() {
		return GetUnkownStateTransactionRequest_TopicAndPartition_DEFAULT
	}
	return p.TopicAndPartition
}

var GetUnkownStateTransactionRequest_TimeoutTimestamp_DEFAULT int64

func (p *GetUnkownStateTransactionRequest) GetTimeoutTimestamp() int64 {
	if !p.IsSetTimeoutTimestamp() {
		return GetUnkownStateTransactionRequest_TimeoutTimestamp_DEFAULT
	}
	return *p.TimeoutTimestamp
}
func (p *GetUnkownStateTransactionRequest) IsSetTopicAndPartition() bool {
	return p.TopicAndPartition != nil
}

func (p *GetUnkownStateTransactionRequest) IsSetTimeoutTimestamp() bool {
	return p.TimeoutTimestamp != nil
}

func (p *GetUnkownStateTransactionRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetUnkownStateTransactionRequest) ReadField1(iprot thrift.TProtocol) error {
	p.TopicAndPartition = &topic.TopicAndPartition{}
	if err := p.TopicAndPartition.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicAndPartition, err)
	}
	return nil
}

func (p *GetUnkownStateTransactionRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TimeoutTimestamp = &v
	}
	return nil
}

func (p *GetUnkownStateTransactionRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetUnkownStateTransactionRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetUnkownStateTransactionRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicAndPartition", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicAndPartition: %s", p, err)
	}
	if err := p.TopicAndPartition.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicAndPartition, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicAndPartition: %s", p, err)
	}
	return err
}

func (p *GetUnkownStateTransactionRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeoutTimestamp() {
		if err := oprot.WriteFieldBegin("timeoutTimestamp", thrift.I64, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:timeoutTimestamp: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.TimeoutTimestamp)); err != nil {
			return fmt.Errorf("%T.timeoutTimestamp (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:timeoutTimestamp: %s", p, err)
		}
	}
	return err
}

func (p *GetUnkownStateTransactionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUnkownStateTransactionRequest(%+v)", *p)
}

type GetUnkownStateTransactionResponse struct {
	UnknowStateTransactions map[int64]*MessageBlock `thrift:"unknowStateTransactions,1,required" json:"unknowStateTransactions"`
	IsReadAllUnknowInfo     bool                    `thrift:"isReadAllUnknowInfo,2,required" json:"isReadAllUnknowInfo"`
}

func NewGetUnkownStateTransactionResponse() *GetUnkownStateTransactionResponse {
	return &GetUnkownStateTransactionResponse{}
}

func (p *GetUnkownStateTransactionResponse) GetUnknowStateTransactions() map[int64]*MessageBlock {
	return p.UnknowStateTransactions
}

func (p *GetUnkownStateTransactionResponse) GetIsReadAllUnknowInfo() bool {
	return p.IsReadAllUnknowInfo
}
func (p *GetUnkownStateTransactionResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetUnkownStateTransactionResponse) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[int64]*MessageBlock, size)
	p.UnknowStateTransactions = tMap
	for i := 0; i < size; i++ {
		var _key5 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key5 = v
		}
		_val6 := &MessageBlock{
			CompressionType: 0,
		}
		if err := _val6.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val6, err)
		}
		p.UnknowStateTransactions[_key5] = _val6
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *GetUnkownStateTransactionResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.IsReadAllUnknowInfo = v
	}
	return nil
}

func (p *GetUnkownStateTransactionResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetUnkownStateTransactionResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetUnkownStateTransactionResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("unknowStateTransactions", thrift.MAP, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:unknowStateTransactions: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.I64, thrift.STRUCT, len(p.UnknowStateTransactions)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.UnknowStateTransactions {
		if err := oprot.WriteI64(int64(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:unknowStateTransactions: %s", p, err)
	}
	return err
}

func (p *GetUnkownStateTransactionResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("isReadAllUnknowInfo", thrift.BOOL, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:isReadAllUnknowInfo: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.IsReadAllUnknowInfo)); err != nil {
		return fmt.Errorf("%T.isReadAllUnknowInfo (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:isReadAllUnknowInfo: %s", p, err)
	}
	return err
}

func (p *GetUnkownStateTransactionResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUnkownStateTransactionResponse(%+v)", *p)
}

type OffsetInfo struct {
	PartitionId int32             `thrift:"partitionId,1,required" json:"partitionId"`
	StartOffset *int64            `thrift:"startOffset,2" json:"startOffset"`
	EndOffset   *int64            `thrift:"endOffset,3" json:"endOffset"`
	ErrorCode   *common.ErrorCode `thrift:"errorCode,4" json:"errorCode"`
	ErrorMsg    *string           `thrift:"errorMsg,5" json:"errorMsg"`
}

func NewOffsetInfo() *OffsetInfo {
	return &OffsetInfo{}
}

func (p *OffsetInfo) GetPartitionId() int32 {
	return p.PartitionId
}

var OffsetInfo_StartOffset_DEFAULT int64

func (p *OffsetInfo) GetStartOffset() int64 {
	if !p.IsSetStartOffset() {
		return OffsetInfo_StartOffset_DEFAULT
	}
	return *p.StartOffset
}

var OffsetInfo_EndOffset_DEFAULT int64

func (p *OffsetInfo) GetEndOffset() int64 {
	if !p.IsSetEndOffset() {
		return OffsetInfo_EndOffset_DEFAULT
	}
	return *p.EndOffset
}

var OffsetInfo_ErrorCode_DEFAULT common.ErrorCode

func (p *OffsetInfo) GetErrorCode() common.ErrorCode {
	if !p.IsSetErrorCode() {
		return OffsetInfo_ErrorCode_DEFAULT
	}
	return *p.ErrorCode
}

var OffsetInfo_ErrorMsg_DEFAULT string

func (p *OffsetInfo) GetErrorMsg() string {
	if !p.IsSetErrorMsg() {
		return OffsetInfo_ErrorMsg_DEFAULT
	}
	return *p.ErrorMsg
}
func (p *OffsetInfo) IsSetStartOffset() bool {
	return p.StartOffset != nil
}

func (p *OffsetInfo) IsSetEndOffset() bool {
	return p.EndOffset != nil
}

func (p *OffsetInfo) IsSetErrorCode() bool {
	return p.ErrorCode != nil
}

func (p *OffsetInfo) IsSetErrorMsg() bool {
	return p.ErrorMsg != nil
}

func (p *OffsetInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *OffsetInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.PartitionId = v
	}
	return nil
}

func (p *OffsetInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.StartOffset = &v
	}
	return nil
}

func (p *OffsetInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.EndOffset = &v
	}
	return nil
}

func (p *OffsetInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		temp := common.ErrorCode(v)
		p.ErrorCode = &temp
	}
	return nil
}

func (p *OffsetInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.ErrorMsg = &v
	}
	return nil
}

func (p *OffsetInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OffsetInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *OffsetInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("partitionId", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:partitionId: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.PartitionId)); err != nil {
		return fmt.Errorf("%T.partitionId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:partitionId: %s", p, err)
	}
	return err
}

func (p *OffsetInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartOffset() {
		if err := oprot.WriteFieldBegin("startOffset", thrift.I64, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:startOffset: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.StartOffset)); err != nil {
			return fmt.Errorf("%T.startOffset (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:startOffset: %s", p, err)
		}
	}
	return err
}

func (p *OffsetInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndOffset() {
		if err := oprot.WriteFieldBegin("endOffset", thrift.I64, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:endOffset: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.EndOffset)); err != nil {
			return fmt.Errorf("%T.endOffset (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:endOffset: %s", p, err)
		}
	}
	return err
}

func (p *OffsetInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorCode() {
		if err := oprot.WriteFieldBegin("errorCode", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:errorCode: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.ErrorCode)); err != nil {
			return fmt.Errorf("%T.errorCode (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:errorCode: %s", p, err)
		}
	}
	return err
}

func (p *OffsetInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorMsg() {
		if err := oprot.WriteFieldBegin("errorMsg", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:errorMsg: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.ErrorMsg)); err != nil {
			return fmt.Errorf("%T.errorMsg (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:errorMsg: %s", p, err)
		}
	}
	return err
}

func (p *OffsetInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OffsetInfo(%+v)", *p)
}

type GetTopicOffsetRequest struct {
	TopicTalosResourceName *topic.TopicTalosResourceName `thrift:"topicTalosResourceName,1,required" json:"topicTalosResourceName"`
}

func NewGetTopicOffsetRequest() *GetTopicOffsetRequest {
	return &GetTopicOffsetRequest{}
}

var GetTopicOffsetRequest_TopicTalosResourceName_DEFAULT *topic.TopicTalosResourceName

func (p *GetTopicOffsetRequest) GetTopicTalosResourceName() *topic.TopicTalosResourceName {
	if !p.IsSetTopicTalosResourceName() {
		return GetTopicOffsetRequest_TopicTalosResourceName_DEFAULT
	}
	return p.TopicTalosResourceName
}
func (p *GetTopicOffsetRequest) IsSetTopicTalosResourceName() bool {
	return p.TopicTalosResourceName != nil
}

func (p *GetTopicOffsetRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTopicOffsetRequest) ReadField1(iprot thrift.TProtocol) error {
	p.TopicTalosResourceName = &topic.TopicTalosResourceName{}
	if err := p.TopicTalosResourceName.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicTalosResourceName, err)
	}
	return nil
}

func (p *GetTopicOffsetRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetTopicOffsetRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTopicOffsetRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicTalosResourceName", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicTalosResourceName: %s", p, err)
	}
	if err := p.TopicTalosResourceName.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicTalosResourceName, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicTalosResourceName: %s", p, err)
	}
	return err
}

func (p *GetTopicOffsetRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTopicOffsetRequest(%+v)", *p)
}

type GetTopicOffsetResponse struct {
	OffsetInfoList []*OffsetInfo `thrift:"offsetInfoList,1,required" json:"offsetInfoList"`
}

func NewGetTopicOffsetResponse() *GetTopicOffsetResponse {
	return &GetTopicOffsetResponse{}
}

func (p *GetTopicOffsetResponse) GetOffsetInfoList() []*OffsetInfo {
	return p.OffsetInfoList
}
func (p *GetTopicOffsetResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTopicOffsetResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*OffsetInfo, 0, size)
	p.OffsetInfoList = tSlice
	for i := 0; i < size; i++ {
		_elem7 := &OffsetInfo{}
		if err := _elem7.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem7, err)
		}
		p.OffsetInfoList = append(p.OffsetInfoList, _elem7)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetTopicOffsetResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetTopicOffsetResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTopicOffsetResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("offsetInfoList", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:offsetInfoList: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.OffsetInfoList)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.OffsetInfoList {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:offsetInfoList: %s", p, err)
	}
	return err
}

func (p *GetTopicOffsetResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTopicOffsetResponse(%+v)", *p)
}

type GetPartitionOffsetRequest struct {
	TopicAndPartition *topic.TopicAndPartition `thrift:"topicAndPartition,1,required" json:"topicAndPartition"`
}

func NewGetPartitionOffsetRequest() *GetPartitionOffsetRequest {
	return &GetPartitionOffsetRequest{}
}

var GetPartitionOffsetRequest_TopicAndPartition_DEFAULT *topic.TopicAndPartition

func (p *GetPartitionOffsetRequest) GetTopicAndPartition() *topic.TopicAndPartition {
	if !p.IsSetTopicAndPartition() {
		return GetPartitionOffsetRequest_TopicAndPartition_DEFAULT
	}
	return p.TopicAndPartition
}
func (p *GetPartitionOffsetRequest) IsSetTopicAndPartition() bool {
	return p.TopicAndPartition != nil
}

func (p *GetPartitionOffsetRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionOffsetRequest) ReadField1(iprot thrift.TProtocol) error {
	p.TopicAndPartition = &topic.TopicAndPartition{}
	if err := p.TopicAndPartition.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicAndPartition, err)
	}
	return nil
}

func (p *GetPartitionOffsetRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetPartitionOffsetRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionOffsetRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicAndPartition", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicAndPartition: %s", p, err)
	}
	if err := p.TopicAndPartition.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicAndPartition, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicAndPartition: %s", p, err)
	}
	return err
}

func (p *GetPartitionOffsetRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionOffsetRequest(%+v)", *p)
}

type GetPartitionOffsetResponse struct {
	OffsetInfo *OffsetInfo `thrift:"offsetInfo,1,required" json:"offsetInfo"`
}

func NewGetPartitionOffsetResponse() *GetPartitionOffsetResponse {
	return &GetPartitionOffsetResponse{}
}

var GetPartitionOffsetResponse_OffsetInfo_DEFAULT *OffsetInfo

func (p *GetPartitionOffsetResponse) GetOffsetInfo() *OffsetInfo {
	if !p.IsSetOffsetInfo() {
		return GetPartitionOffsetResponse_OffsetInfo_DEFAULT
	}
	return p.OffsetInfo
}
func (p *GetPartitionOffsetResponse) IsSetOffsetInfo() bool {
	return p.OffsetInfo != nil
}

func (p *GetPartitionOffsetResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionOffsetResponse) ReadField1(iprot thrift.TProtocol) error {
	p.OffsetInfo = &OffsetInfo{}
	if err := p.OffsetInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.OffsetInfo, err)
	}
	return nil
}

func (p *GetPartitionOffsetResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetPartitionOffsetResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionOffsetResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("offsetInfo", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:offsetInfo: %s", p, err)
	}
	if err := p.OffsetInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.OffsetInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:offsetInfo: %s", p, err)
	}
	return err
}

func (p *GetPartitionOffsetResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionOffsetResponse(%+v)", *p)
}

type GetPartitionsOffsetRequest struct {
	TopicAndPartitionList []*topic.TopicAndPartition `thrift:"topicAndPartitionList,1,required" json:"topicAndPartitionList"`
}

func NewGetPartitionsOffsetRequest() *GetPartitionsOffsetRequest {
	return &GetPartitionsOffsetRequest{}
}

func (p *GetPartitionsOffsetRequest) GetTopicAndPartitionList() []*topic.TopicAndPartition {
	return p.TopicAndPartitionList
}
func (p *GetPartitionsOffsetRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionsOffsetRequest) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*topic.TopicAndPartition, 0, size)
	p.TopicAndPartitionList = tSlice
	for i := 0; i < size; i++ {
		_elem8 := &topic.TopicAndPartition{}
		if err := _elem8.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem8, err)
		}
		p.TopicAndPartitionList = append(p.TopicAndPartitionList, _elem8)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetPartitionsOffsetRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetPartitionsOffsetRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionsOffsetRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicAndPartitionList", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicAndPartitionList: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TopicAndPartitionList)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.TopicAndPartitionList {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicAndPartitionList: %s", p, err)
	}
	return err
}

func (p *GetPartitionsOffsetRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionsOffsetRequest(%+v)", *p)
}

type GetPartitionsOffsetResponse struct {
	OffsetInfoList []*OffsetInfo `thrift:"offsetInfoList,1,required" json:"offsetInfoList"`
}

func NewGetPartitionsOffsetResponse() *GetPartitionsOffsetResponse {
	return &GetPartitionsOffsetResponse{}
}

func (p *GetPartitionsOffsetResponse) GetOffsetInfoList() []*OffsetInfo {
	return p.OffsetInfoList
}
func (p *GetPartitionsOffsetResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionsOffsetResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*OffsetInfo, 0, size)
	p.OffsetInfoList = tSlice
	for i := 0; i < size; i++ {
		_elem9 := &OffsetInfo{}
		if err := _elem9.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem9, err)
		}
		p.OffsetInfoList = append(p.OffsetInfoList, _elem9)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetPartitionsOffsetResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetPartitionsOffsetResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionsOffsetResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("offsetInfoList", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:offsetInfoList: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.OffsetInfoList)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.OffsetInfoList {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:offsetInfoList: %s", p, err)
	}
	return err
}

func (p *GetPartitionsOffsetResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionsOffsetResponse(%+v)", *p)
}

type GetScheduleInfoRequest struct {
	TopicTalosResourceName *topic.TopicTalosResourceName `thrift:"topicTalosResourceName,1,required" json:"topicTalosResourceName"`
}

func NewGetScheduleInfoRequest() *GetScheduleInfoRequest {
	return &GetScheduleInfoRequest{}
}

var GetScheduleInfoRequest_TopicTalosResourceName_DEFAULT *topic.TopicTalosResourceName

func (p *GetScheduleInfoRequest) GetTopicTalosResourceName() *topic.TopicTalosResourceName {
	if !p.IsSetTopicTalosResourceName() {
		return GetScheduleInfoRequest_TopicTalosResourceName_DEFAULT
	}
	return p.TopicTalosResourceName
}
func (p *GetScheduleInfoRequest) IsSetTopicTalosResourceName() bool {
	return p.TopicTalosResourceName != nil
}

func (p *GetScheduleInfoRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetScheduleInfoRequest) ReadField1(iprot thrift.TProtocol) error {
	p.TopicTalosResourceName = &topic.TopicTalosResourceName{}
	if err := p.TopicTalosResourceName.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicTalosResourceName, err)
	}
	return nil
}

func (p *GetScheduleInfoRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetScheduleInfoRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetScheduleInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicTalosResourceName", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicTalosResourceName: %s", p, err)
	}
	if err := p.TopicTalosResourceName.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicTalosResourceName, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicTalosResourceName: %s", p, err)
	}
	return err
}

func (p *GetScheduleInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetScheduleInfoRequest(%+v)", *p)
}

type GetScheduleInfoResponse struct {
	ScheduleInfo map[*topic.TopicAndPartition]string `thrift:"scheduleInfo,1,required" json:"scheduleInfo"`
}

func NewGetScheduleInfoResponse() *GetScheduleInfoResponse {
	return &GetScheduleInfoResponse{}
}

func (p *GetScheduleInfoResponse) GetScheduleInfo() map[*topic.TopicAndPartition]string {
	return p.ScheduleInfo
}
func (p *GetScheduleInfoResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetScheduleInfoResponse) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[*topic.TopicAndPartition]string, size)
	p.ScheduleInfo = tMap
	for i := 0; i < size; i++ {
		_key10 := &topic.TopicAndPartition{}
		if err := _key10.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _key10, err)
		}
		var _val11 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val11 = v
		}
		p.ScheduleInfo[_key10] = _val11
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *GetScheduleInfoResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetScheduleInfoResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetScheduleInfoResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("scheduleInfo", thrift.MAP, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:scheduleInfo: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRUCT, thrift.STRING, len(p.ScheduleInfo)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.ScheduleInfo {
		if err := k.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", k, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:scheduleInfo: %s", p, err)
	}
	return err
}

func (p *GetScheduleInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetScheduleInfoResponse(%+v)", *p)
}

type GetCheckpointRequest struct {
	TopicTalosResourceName *topic.TopicTalosResourceName `thrift:"topicTalosResourceName,1,required" json:"topicTalosResourceName"`
	PartitionTimeIndexMap  map[int32]int64               `thrift:"partitionTimeIndexMap,2,required" json:"partitionTimeIndexMap"`
}

func NewGetCheckpointRequest() *GetCheckpointRequest {
	return &GetCheckpointRequest{}
}

var GetCheckpointRequest_TopicTalosResourceName_DEFAULT *topic.TopicTalosResourceName

func (p *GetCheckpointRequest) GetTopicTalosResourceName() *topic.TopicTalosResourceName {
	if !p.IsSetTopicTalosResourceName() {
		return GetCheckpointRequest_TopicTalosResourceName_DEFAULT
	}
	return p.TopicTalosResourceName
}

func (p *GetCheckpointRequest) GetPartitionTimeIndexMap() map[int32]int64 {
	return p.PartitionTimeIndexMap
}
func (p *GetCheckpointRequest) IsSetTopicTalosResourceName() bool {
	return p.TopicTalosResourceName != nil
}

func (p *GetCheckpointRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetCheckpointRequest) ReadField1(iprot thrift.TProtocol) error {
	p.TopicTalosResourceName = &topic.TopicTalosResourceName{}
	if err := p.TopicTalosResourceName.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicTalosResourceName, err)
	}
	return nil
}

func (p *GetCheckpointRequest) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[int32]int64, size)
	p.PartitionTimeIndexMap = tMap
	for i := 0; i < size; i++ {
		var _key12 int32
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key12 = v
		}
		var _val13 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val13 = v
		}
		p.PartitionTimeIndexMap[_key12] = _val13
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *GetCheckpointRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetCheckpointRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetCheckpointRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicTalosResourceName", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicTalosResourceName: %s", p, err)
	}
	if err := p.TopicTalosResourceName.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicTalosResourceName, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicTalosResourceName: %s", p, err)
	}
	return err
}

func (p *GetCheckpointRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("partitionTimeIndexMap", thrift.MAP, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:partitionTimeIndexMap: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.I64, len(p.PartitionTimeIndexMap)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.PartitionTimeIndexMap {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteI64(int64(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:partitionTimeIndexMap: %s", p, err)
	}
	return err
}

func (p *GetCheckpointRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCheckpointRequest(%+v)", *p)
}

type GetCheckpointResponse struct {
	PartitionsCheckPoint map[int32]int64 `thrift:"partitionsCheckPoint,1,required" json:"partitionsCheckPoint"`
}

func NewGetCheckpointResponse() *GetCheckpointResponse {
	return &GetCheckpointResponse{}
}

func (p *GetCheckpointResponse) GetPartitionsCheckPoint() map[int32]int64 {
	return p.PartitionsCheckPoint
}
func (p *GetCheckpointResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetCheckpointResponse) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[int32]int64, size)
	p.PartitionsCheckPoint = tMap
	for i := 0; i < size; i++ {
		var _key14 int32
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key14 = v
		}
		var _val15 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val15 = v
		}
		p.PartitionsCheckPoint[_key14] = _val15
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *GetCheckpointResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetCheckpointResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetCheckpointResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("partitionsCheckPoint", thrift.MAP, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:partitionsCheckPoint: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.I64, len(p.PartitionsCheckPoint)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.PartitionsCheckPoint {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteI64(int64(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:partitionsCheckPoint: %s", p, err)
	}
	return err
}

func (p *GetCheckpointResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCheckpointResponse(%+v)", *p)
}

type GetPartitionCheckpointRequest struct {
	TopicAndPartition  *topic.TopicAndPartition `thrift:"topicAndPartition,1,required" json:"topicAndPartition"`
	PartitionTimeIndex int64                    `thrift:"partitionTimeIndex,2,required" json:"partitionTimeIndex"`
}

func NewGetPartitionCheckpointRequest() *GetPartitionCheckpointRequest {
	return &GetPartitionCheckpointRequest{}
}

var GetPartitionCheckpointRequest_TopicAndPartition_DEFAULT *topic.TopicAndPartition

func (p *GetPartitionCheckpointRequest) GetTopicAndPartition() *topic.TopicAndPartition {
	if !p.IsSetTopicAndPartition() {
		return GetPartitionCheckpointRequest_TopicAndPartition_DEFAULT
	}
	return p.TopicAndPartition
}

func (p *GetPartitionCheckpointRequest) GetPartitionTimeIndex() int64 {
	return p.PartitionTimeIndex
}
func (p *GetPartitionCheckpointRequest) IsSetTopicAndPartition() bool {
	return p.TopicAndPartition != nil
}

func (p *GetPartitionCheckpointRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionCheckpointRequest) ReadField1(iprot thrift.TProtocol) error {
	p.TopicAndPartition = &topic.TopicAndPartition{}
	if err := p.TopicAndPartition.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicAndPartition, err)
	}
	return nil
}

func (p *GetPartitionCheckpointRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.PartitionTimeIndex = v
	}
	return nil
}

func (p *GetPartitionCheckpointRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetPartitionCheckpointRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionCheckpointRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicAndPartition", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicAndPartition: %s", p, err)
	}
	if err := p.TopicAndPartition.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicAndPartition, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicAndPartition: %s", p, err)
	}
	return err
}

func (p *GetPartitionCheckpointRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("partitionTimeIndex", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:partitionTimeIndex: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.PartitionTimeIndex)); err != nil {
		return fmt.Errorf("%T.partitionTimeIndex (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:partitionTimeIndex: %s", p, err)
	}
	return err
}

func (p *GetPartitionCheckpointRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionCheckpointRequest(%+v)", *p)
}

type GetPartitionCheckpointResponse struct {
	PartitionCheckPoint int64 `thrift:"partitionCheckPoint,1,required" json:"partitionCheckPoint"`
}

func NewGetPartitionCheckpointResponse() *GetPartitionCheckpointResponse {
	return &GetPartitionCheckpointResponse{}
}

func (p *GetPartitionCheckpointResponse) GetPartitionCheckPoint() int64 {
	return p.PartitionCheckPoint
}
func (p *GetPartitionCheckpointResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionCheckpointResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.PartitionCheckPoint = v
	}
	return nil
}

func (p *GetPartitionCheckpointResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetPartitionCheckpointResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionCheckpointResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("partitionCheckPoint", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:partitionCheckPoint: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.PartitionCheckPoint)); err != nil {
		return fmt.Errorf("%T.partitionCheckPoint (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:partitionCheckPoint: %s", p, err)
	}
	return err
}

func (p *GetPartitionCheckpointResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionCheckpointResponse(%+v)", *p)
}

type DeleteMessageIndexRequest struct {
	TopicAndPartition *topic.TopicAndPartition `thrift:"topicAndPartition,1,required" json:"topicAndPartition"`
	StartOffset       int64                    `thrift:"startOffset,2,required" json:"startOffset"`
	EndOffset         int64                    `thrift:"endOffset,3,required" json:"endOffset"`
}

func NewDeleteMessageIndexRequest() *DeleteMessageIndexRequest {
	return &DeleteMessageIndexRequest{}
}

var DeleteMessageIndexRequest_TopicAndPartition_DEFAULT *topic.TopicAndPartition

func (p *DeleteMessageIndexRequest) GetTopicAndPartition() *topic.TopicAndPartition {
	if !p.IsSetTopicAndPartition() {
		return DeleteMessageIndexRequest_TopicAndPartition_DEFAULT
	}
	return p.TopicAndPartition
}

func (p *DeleteMessageIndexRequest) GetStartOffset() int64 {
	return p.StartOffset
}

func (p *DeleteMessageIndexRequest) GetEndOffset() int64 {
	return p.EndOffset
}
func (p *DeleteMessageIndexRequest) IsSetTopicAndPartition() bool {
	return p.TopicAndPartition != nil
}

func (p *DeleteMessageIndexRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteMessageIndexRequest) ReadField1(iprot thrift.TProtocol) error {
	p.TopicAndPartition = &topic.TopicAndPartition{}
	if err := p.TopicAndPartition.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicAndPartition, err)
	}
	return nil
}

func (p *DeleteMessageIndexRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.StartOffset = v
	}
	return nil
}

func (p *DeleteMessageIndexRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.EndOffset = v
	}
	return nil
}

func (p *DeleteMessageIndexRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeleteMessageIndexRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteMessageIndexRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicAndPartition", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicAndPartition: %s", p, err)
	}
	if err := p.TopicAndPartition.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicAndPartition, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicAndPartition: %s", p, err)
	}
	return err
}

func (p *DeleteMessageIndexRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startOffset", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:startOffset: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.StartOffset)); err != nil {
		return fmt.Errorf("%T.startOffset (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:startOffset: %s", p, err)
	}
	return err
}

func (p *DeleteMessageIndexRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("endOffset", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:endOffset: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.EndOffset)); err != nil {
		return fmt.Errorf("%T.endOffset (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:endOffset: %s", p, err)
	}
	return err
}

func (p *DeleteMessageIndexRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteMessageIndexRequest(%+v)", *p)
}
