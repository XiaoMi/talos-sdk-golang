// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"flag"
	"fmt"
	"github.com/XiaoMi/talos-sdk-golang/thrift/thrift"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	"thrift/message"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  PutMessageResponse putMessage(PutMessageRequest request)")
	fmt.Fprintln(os.Stderr, "  GetMessageResponse getMessage(GetMessageRequest request)")
	fmt.Fprintln(os.Stderr, "  GetTopicOffsetResponse getTopicOffset(GetTopicOffsetRequest request)")
	fmt.Fprintln(os.Stderr, "  GetPartitionOffsetResponse getPartitionOffset(GetPartitionOffsetRequest request)")
	fmt.Fprintln(os.Stderr, "  GetPartitionsOffsetResponse getPartitionsOffset(GetPartitionsOffsetRequest request)")
	fmt.Fprintln(os.Stderr, "  GetScheduleInfoResponse getScheduleInfo(GetScheduleInfoRequest request)")
	fmt.Fprintln(os.Stderr, "  PrepareResponse prepare(PrepareRequest request)")
	fmt.Fprintln(os.Stderr, "  CommitResponse commit(CommitRequest request)")
	fmt.Fprintln(os.Stderr, "  RollbackResponse rollback(RollbackRequest request)")
	fmt.Fprintln(os.Stderr, "  GetUnkownStateTransactionResponse getUnkownStateTransaction(GetUnkownStateTransactionRequest request)")
	fmt.Fprintln(os.Stderr, "  GetCheckpointResponse getTopicCheckpoint(GetCheckpointRequest request)")
	fmt.Fprintln(os.Stderr, "  GetPartitionCheckpointResponse getPartitionCheckpoint(GetPartitionCheckpointRequest request)")
	fmt.Fprintln(os.Stderr, "  void deleteMessageIndex(DeleteMessageIndexRequest request)")
	fmt.Fprintln(os.Stderr, "  Version getServiceVersion()")
	fmt.Fprintln(os.Stderr, "  void validClientVersion(Version clientVersion)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := message.NewMessageServiceClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "putMessage":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "PutMessage requires 1 args")
			flag.Usage()
		}
		arg43 := flag.Arg(1)
		mbTrans44 := thrift.NewTMemoryBufferLen(len(arg43))
		defer mbTrans44.Close()
		_, err45 := mbTrans44.WriteString(arg43)
		if err45 != nil {
			Usage()
			return
		}
		factory46 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt47 := factory46.GetProtocol(mbTrans44)
		argvalue0 := message.NewPutMessageRequest()
		err48 := argvalue0.Read(jsProt47)
		if err48 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.PutMessage(value0))
		fmt.Print("\n")
		break
	case "getMessage":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetMessage requires 1 args")
			flag.Usage()
		}
		arg49 := flag.Arg(1)
		mbTrans50 := thrift.NewTMemoryBufferLen(len(arg49))
		defer mbTrans50.Close()
		_, err51 := mbTrans50.WriteString(arg49)
		if err51 != nil {
			Usage()
			return
		}
		factory52 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt53 := factory52.GetProtocol(mbTrans50)
		argvalue0 := message.NewGetMessageRequest()
		err54 := argvalue0.Read(jsProt53)
		if err54 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetMessage(value0))
		fmt.Print("\n")
		break
	case "getTopicOffset":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTopicOffset requires 1 args")
			flag.Usage()
		}
		arg55 := flag.Arg(1)
		mbTrans56 := thrift.NewTMemoryBufferLen(len(arg55))
		defer mbTrans56.Close()
		_, err57 := mbTrans56.WriteString(arg55)
		if err57 != nil {
			Usage()
			return
		}
		factory58 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt59 := factory58.GetProtocol(mbTrans56)
		argvalue0 := message.NewGetTopicOffsetRequest()
		err60 := argvalue0.Read(jsProt59)
		if err60 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetTopicOffset(value0))
		fmt.Print("\n")
		break
	case "getPartitionOffset":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPartitionOffset requires 1 args")
			flag.Usage()
		}
		arg61 := flag.Arg(1)
		mbTrans62 := thrift.NewTMemoryBufferLen(len(arg61))
		defer mbTrans62.Close()
		_, err63 := mbTrans62.WriteString(arg61)
		if err63 != nil {
			Usage()
			return
		}
		factory64 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt65 := factory64.GetProtocol(mbTrans62)
		argvalue0 := message.NewGetPartitionOffsetRequest()
		err66 := argvalue0.Read(jsProt65)
		if err66 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPartitionOffset(value0))
		fmt.Print("\n")
		break
	case "getPartitionsOffset":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPartitionsOffset requires 1 args")
			flag.Usage()
		}
		arg67 := flag.Arg(1)
		mbTrans68 := thrift.NewTMemoryBufferLen(len(arg67))
		defer mbTrans68.Close()
		_, err69 := mbTrans68.WriteString(arg67)
		if err69 != nil {
			Usage()
			return
		}
		factory70 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt71 := factory70.GetProtocol(mbTrans68)
		argvalue0 := message.NewGetPartitionsOffsetRequest()
		err72 := argvalue0.Read(jsProt71)
		if err72 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPartitionsOffset(value0))
		fmt.Print("\n")
		break
	case "getScheduleInfo":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetScheduleInfo requires 1 args")
			flag.Usage()
		}
		arg73 := flag.Arg(1)
		mbTrans74 := thrift.NewTMemoryBufferLen(len(arg73))
		defer mbTrans74.Close()
		_, err75 := mbTrans74.WriteString(arg73)
		if err75 != nil {
			Usage()
			return
		}
		factory76 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt77 := factory76.GetProtocol(mbTrans74)
		argvalue0 := message.NewGetScheduleInfoRequest()
		err78 := argvalue0.Read(jsProt77)
		if err78 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetScheduleInfo(value0))
		fmt.Print("\n")
		break
	case "prepare":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Prepare requires 1 args")
			flag.Usage()
		}
		arg79 := flag.Arg(1)
		mbTrans80 := thrift.NewTMemoryBufferLen(len(arg79))
		defer mbTrans80.Close()
		_, err81 := mbTrans80.WriteString(arg79)
		if err81 != nil {
			Usage()
			return
		}
		factory82 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt83 := factory82.GetProtocol(mbTrans80)
		argvalue0 := message.NewPrepareRequest()
		err84 := argvalue0.Read(jsProt83)
		if err84 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Prepare(value0))
		fmt.Print("\n")
		break
	case "commit":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Commit requires 1 args")
			flag.Usage()
		}
		arg85 := flag.Arg(1)
		mbTrans86 := thrift.NewTMemoryBufferLen(len(arg85))
		defer mbTrans86.Close()
		_, err87 := mbTrans86.WriteString(arg85)
		if err87 != nil {
			Usage()
			return
		}
		factory88 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt89 := factory88.GetProtocol(mbTrans86)
		argvalue0 := message.NewCommitRequest()
		err90 := argvalue0.Read(jsProt89)
		if err90 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Commit(value0))
		fmt.Print("\n")
		break
	case "rollback":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Rollback requires 1 args")
			flag.Usage()
		}
		arg91 := flag.Arg(1)
		mbTrans92 := thrift.NewTMemoryBufferLen(len(arg91))
		defer mbTrans92.Close()
		_, err93 := mbTrans92.WriteString(arg91)
		if err93 != nil {
			Usage()
			return
		}
		factory94 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt95 := factory94.GetProtocol(mbTrans92)
		argvalue0 := message.NewRollbackRequest()
		err96 := argvalue0.Read(jsProt95)
		if err96 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Rollback(value0))
		fmt.Print("\n")
		break
	case "getUnkownStateTransaction":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetUnkownStateTransaction requires 1 args")
			flag.Usage()
		}
		arg97 := flag.Arg(1)
		mbTrans98 := thrift.NewTMemoryBufferLen(len(arg97))
		defer mbTrans98.Close()
		_, err99 := mbTrans98.WriteString(arg97)
		if err99 != nil {
			Usage()
			return
		}
		factory100 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt101 := factory100.GetProtocol(mbTrans98)
		argvalue0 := message.NewGetUnkownStateTransactionRequest()
		err102 := argvalue0.Read(jsProt101)
		if err102 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetUnkownStateTransaction(value0))
		fmt.Print("\n")
		break
	case "getTopicCheckpoint":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTopicCheckpoint requires 1 args")
			flag.Usage()
		}
		arg103 := flag.Arg(1)
		mbTrans104 := thrift.NewTMemoryBufferLen(len(arg103))
		defer mbTrans104.Close()
		_, err105 := mbTrans104.WriteString(arg103)
		if err105 != nil {
			Usage()
			return
		}
		factory106 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt107 := factory106.GetProtocol(mbTrans104)
		argvalue0 := message.NewGetCheckpointRequest()
		err108 := argvalue0.Read(jsProt107)
		if err108 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetTopicCheckpoint(value0))
		fmt.Print("\n")
		break
	case "getPartitionCheckpoint":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPartitionCheckpoint requires 1 args")
			flag.Usage()
		}
		arg109 := flag.Arg(1)
		mbTrans110 := thrift.NewTMemoryBufferLen(len(arg109))
		defer mbTrans110.Close()
		_, err111 := mbTrans110.WriteString(arg109)
		if err111 != nil {
			Usage()
			return
		}
		factory112 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt113 := factory112.GetProtocol(mbTrans110)
		argvalue0 := message.NewGetPartitionCheckpointRequest()
		err114 := argvalue0.Read(jsProt113)
		if err114 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPartitionCheckpoint(value0))
		fmt.Print("\n")
		break
	case "deleteMessageIndex":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DeleteMessageIndex requires 1 args")
			flag.Usage()
		}
		arg115 := flag.Arg(1)
		mbTrans116 := thrift.NewTMemoryBufferLen(len(arg115))
		defer mbTrans116.Close()
		_, err117 := mbTrans116.WriteString(arg115)
		if err117 != nil {
			Usage()
			return
		}
		factory118 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt119 := factory118.GetProtocol(mbTrans116)
		argvalue0 := message.NewDeleteMessageIndexRequest()
		err120 := argvalue0.Read(jsProt119)
		if err120 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DeleteMessageIndex(value0))
		fmt.Print("\n")
		break
	case "getServiceVersion":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetServiceVersion requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetServiceVersion())
		fmt.Print("\n")
		break
	case "validClientVersion":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ValidClientVersion requires 1 args")
			flag.Usage()
		}
		arg121 := flag.Arg(1)
		mbTrans122 := thrift.NewTMemoryBufferLen(len(arg121))
		defer mbTrans122.Close()
		_, err123 := mbTrans122.WriteString(arg121)
		if err123 != nil {
			Usage()
			return
		}
		factory124 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt125 := factory124.GetProtocol(mbTrans122)
		argvalue0 := message.NewVersion()
		err126 := argvalue0.Read(jsProt125)
		if err126 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ValidClientVersion(value0))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
