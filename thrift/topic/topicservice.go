// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package topic

import (
	"bytes"
	"fmt"
	"github.com/XiaoMi/talos-sdk-golang/thrift/authorization"
	"github.com/XiaoMi/talos-sdk-golang/thrift/common"
	"github.com/XiaoMi/talos-sdk-golang/thrift/quota"
	"github.com/XiaoMi/talos-sdk-golang/thrift/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = common.GoUnusedProtection__
var _ = quota.GoUnusedProtection__
var _ = authorization.GoUnusedProtection__

type TopicService interface {
	common.TalosBaseService

	// createTopic, one must be a Developer that call this method;
	//
	//
	// Parameters:
	//  - Request
	CreateTopic(request *CreateTopicRequest) (r *CreateTopicResponse, err error)
	// createReplicationTopic, one must be a Developer that call this method;
	//
	//
	// Parameters:
	//  - Request
	CreateReplicationTopic(request *CreateReplicationTopicRequest) (r *CreateTopicResponse, err error)
	// createTopicGroup, one must be a Developer that call this method;
	//
	//
	// Parameters:
	//  - Request
	CreateTopicGroup(request *CreateTopicGroupRequest) (r *CreateTopicGroupResponse, err error)
	// desribeTopicGroup;
	//
	//
	// Parameters:
	//  - Request
	DescribeTopicGroup(request *DescribeTopicGroupRequest) (r *DescribeTopicGroupResponse, err error)
	// deleteTopicGroup;
	//
	//
	// Parameters:
	//  - Request
	DeleteTopicGroup(request *DeleteTopicGroupRequest) (err error)
	// listTopicGroup;
	//
	ListTopicGroup() (r *ListTopicGroupResponse, err error)
	// updateTopicGroup;
	//
	//
	// Parameters:
	//  - Request
	UpdateTopicGroup(request *UpdateTopicGroupRequest) (err error)
	// deleteTopic, the caller must have CHANGE_TOPIC permission;
	//
	//
	// Parameters:
	//  - Request
	DeleteTopic(request *DeleteTopicRequest) (err error)
	// look up all topics and partition number that match topic pattern
	//
	//
	// Parameters:
	//  - Request
	LookupTopics(request *LookupTopicsRequest) (r *LookupTopicsResponse, err error)
	// look up all topics that match topic pattern
	//
	//
	// Parameters:
	//  - Request
	MatchTopics(request *MatchTopicsRequest) (r *MatchTopicsResponse, err error)
	// changeTopicAttribute, the caller must have CHANGE_TOPIC permission;
	//
	//
	// Parameters:
	//  - Request
	ChangeTopicAttribute(request *ChangeTopicAttributeRequest) (err error)
	// deleteTopicAttribute, the caller must have CHANGE_TOPIC permission;
	//
	//
	// Parameters:
	//  - Request
	DeleteTopicAttribute(request *DeleteTopicAttributeRequest) (err error)
	// changeTopicOwnerInfo, the caller must have CHANGE_TOPIC permission;
	//
	//
	// Parameters:
	//  - Request
	ChangeTopicOwnerInfo(request *ChangeTopicOwnerInfoRequest) (err error)
	// changeReplicationTopicSourceInfo, the caller must have CHANGE_TOPIC permission;
	//
	//
	// Parameters:
	//  - Request
	ChangeReplicationTopicSourceInfo(request *ChangeReplicationTopicSourceInfoRequest) (err error)
	// describeTopic, the caller must have DESCRIBE_TOPIC permission;
	//
	//
	// Parameters:
	//  - Request
	DescribeTopic(request *DescribeTopicRequest) (r *DescribeTopicResponse, err error)
	// getDescribeInfo, the caller must have DESCRIBE_TOPIC permission;
	//
	//
	// Parameters:
	//  - Request
	GetDescribeInfo(request *GetDescribeInfoRequest) (r *GetDescribeInfoResponse, err error)
	// getTopicAttribute, the caller must have DESCRIBE_TOPIC permission;
	//
	//
	// Parameters:
	//  - Request
	GetTopicAttribute(request *GetTopicAttributeRequest) (r *GetTopicAttributeResponse, err error)
	// listTopicsInfo will return the topics which owned by the call developer
	// and its describe information.
	//
	ListTopicsInfo() (r *ListTopicsInfoResponse, err error)
	// listTopics for the developer that call this method, and this method will
	// only return the topics that owned by the call developer, if none,
	// listTopics will return nothing.
	//
	ListTopics() (r *ListTopicsResponse, err error)
	GetBindTopics() (r *ListTopicsResponse, err error)
	// setTopicQuota, the caller must be talos admin or topic owner
	//
	//
	// Parameters:
	//  - Request
	SetTopicQuota(request *SetTopicQuotaRequest) (err error)
	// queryTopicQuota, the caller must be talos admin or topic owner
	//
	//
	// Parameters:
	//  - Request
	QueryTopicQuota(request *QueryTopicQuotaRequest) (r *QueryTopicQuotaResponse, err error)
	// deleteTopicQuota, the caller must be talos admin or topic owner
	//
	//
	// Parameters:
	//  - Request
	DeleteTopicQuota(request *DeleteTopicQuotaRequest) (err error)
	// setPermission, the caller must be owner/Talos admin, and the operation
	// permission devolution is not be allowed, the old permission will be
	// overwrite after setPermission.
	//
	//
	// Parameters:
	//  - Request
	SetPermission(request *SetPermissionRequest) (err error)
	// revokePermission, the caller must be owner/Talos admin, and you can't
	// revokePermission for the topic owner, the accountId will have
	// NONE permission after revokePermission;
	//
	//
	// Parameters:
	//  - Request
	RevokePermission(request *RevokePermissionRequest) (err error)
	// listPermission, the caller must have DESCRIBE_TOPIC permission;
	//
	//
	// Parameters:
	//  - Request
	ListPermission(request *ListPermissionRequest) (r *ListPermissionResponse, err error)
	// getPermission, the caller must hava DESCRIBE_TOPIC permission;
	//
	//
	// Parameters:
	//  - Request
	GetPermission(request *GetPermissionRequest) (r *GetPermissionResponse, err error)
	// addSubResourceName, the caller must be a developer owner of topic
	//
	//
	// Parameters:
	//  - Request
	AddSubResourceName(request *AddSubResourceNameRequest) (err error)
}

type TopicServiceClient struct {
	*common.TalosBaseServiceClient
}

func NewTopicServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TopicServiceClient {
	return &TopicServiceClient{TalosBaseServiceClient: common.NewTalosBaseServiceClientFactory(t, f)}
}

func NewTopicServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TopicServiceClient {
	return &TopicServiceClient{TalosBaseServiceClient: common.NewTalosBaseServiceClientProtocol(t, iprot, oprot)}
}

// createTopic, one must be a Developer that call this method;
//
// Parameters:
//   - Request
func (p *TopicServiceClient) CreateTopic(request *CreateTopicRequest) (r *CreateTopicResponse, err error) {
	if err = p.sendCreateTopic(request); err != nil {
		return
	}
	return p.recvCreateTopic()
}

func (p *TopicServiceClient) sendCreateTopic(request *CreateTopicRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createTopic", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CreateTopicArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TopicServiceClient) recvCreateTopic() (value *CreateTopicResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error21 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error22 error
		error22, err = error21.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error22
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createTopic failed: out of sequence response")
		return
	}
	result := CreateTopicResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// createReplicationTopic, one must be a Developer that call this method;
//
// Parameters:
//   - Request
func (p *TopicServiceClient) CreateReplicationTopic(request *CreateReplicationTopicRequest) (r *CreateTopicResponse, err error) {
	if err = p.sendCreateReplicationTopic(request); err != nil {
		return
	}
	return p.recvCreateReplicationTopic()
}

func (p *TopicServiceClient) sendCreateReplicationTopic(request *CreateReplicationTopicRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createReplicationTopic", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CreateReplicationTopicArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TopicServiceClient) recvCreateReplicationTopic() (value *CreateTopicResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error23 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error24 error
		error24, err = error23.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error24
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createReplicationTopic failed: out of sequence response")
		return
	}
	result := CreateReplicationTopicResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// createTopicGroup, one must be a Developer that call this method;
//
// Parameters:
//   - Request
func (p *TopicServiceClient) CreateTopicGroup(request *CreateTopicGroupRequest) (r *CreateTopicGroupResponse, err error) {
	if err = p.sendCreateTopicGroup(request); err != nil {
		return
	}
	return p.recvCreateTopicGroup()
}

func (p *TopicServiceClient) sendCreateTopicGroup(request *CreateTopicGroupRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createTopicGroup", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CreateTopicGroupArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TopicServiceClient) recvCreateTopicGroup() (value *CreateTopicGroupResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error25 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error26 error
		error26, err = error25.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error26
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createTopicGroup failed: out of sequence response")
		return
	}
	result := CreateTopicGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// desribeTopicGroup;
//
// Parameters:
//   - Request
func (p *TopicServiceClient) DescribeTopicGroup(request *DescribeTopicGroupRequest) (r *DescribeTopicGroupResponse, err error) {
	if err = p.sendDescribeTopicGroup(request); err != nil {
		return
	}
	return p.recvDescribeTopicGroup()
}

func (p *TopicServiceClient) sendDescribeTopicGroup(request *DescribeTopicGroupRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("describeTopicGroup", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DescribeTopicGroupArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TopicServiceClient) recvDescribeTopicGroup() (value *DescribeTopicGroupResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error27 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error28 error
		error28, err = error27.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error28
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "describeTopicGroup failed: out of sequence response")
		return
	}
	result := DescribeTopicGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// deleteTopicGroup;
//
// Parameters:
//   - Request
func (p *TopicServiceClient) DeleteTopicGroup(request *DeleteTopicGroupRequest) (err error) {
	if err = p.sendDeleteTopicGroup(request); err != nil {
		return
	}
	return p.recvDeleteTopicGroup()
}

func (p *TopicServiceClient) sendDeleteTopicGroup(request *DeleteTopicGroupRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deleteTopicGroup", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DeleteTopicGroupArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TopicServiceClient) recvDeleteTopicGroup() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error29 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error30 error
		error30, err = error29.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error30
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteTopicGroup failed: out of sequence response")
		return
	}
	result := DeleteTopicGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// listTopicGroup;
func (p *TopicServiceClient) ListTopicGroup() (r *ListTopicGroupResponse, err error) {
	if err = p.sendListTopicGroup(); err != nil {
		return
	}
	return p.recvListTopicGroup()
}

func (p *TopicServiceClient) sendListTopicGroup() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("listTopicGroup", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ListTopicGroupArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TopicServiceClient) recvListTopicGroup() (value *ListTopicGroupResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error31 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error32 error
		error32, err = error31.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error32
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listTopicGroup failed: out of sequence response")
		return
	}
	result := ListTopicGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// updateTopicGroup;
//
// Parameters:
//   - Request
func (p *TopicServiceClient) UpdateTopicGroup(request *UpdateTopicGroupRequest) (err error) {
	if err = p.sendUpdateTopicGroup(request); err != nil {
		return
	}
	return p.recvUpdateTopicGroup()
}

func (p *TopicServiceClient) sendUpdateTopicGroup(request *UpdateTopicGroupRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateTopicGroup", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UpdateTopicGroupArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TopicServiceClient) recvUpdateTopicGroup() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error33 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error34 error
		error34, err = error33.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error34
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateTopicGroup failed: out of sequence response")
		return
	}
	result := UpdateTopicGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// deleteTopic, the caller must have CHANGE_TOPIC permission;
//
// Parameters:
//   - Request
func (p *TopicServiceClient) DeleteTopic(request *DeleteTopicRequest) (err error) {
	if err = p.sendDeleteTopic(request); err != nil {
		return
	}
	return p.recvDeleteTopic()
}

func (p *TopicServiceClient) sendDeleteTopic(request *DeleteTopicRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deleteTopic", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DeleteTopicArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TopicServiceClient) recvDeleteTopic() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error35 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error36 error
		error36, err = error35.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error36
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteTopic failed: out of sequence response")
		return
	}
	result := DeleteTopicResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// look up all topics and partition number that match topic pattern
//
// Parameters:
//   - Request
func (p *TopicServiceClient) LookupTopics(request *LookupTopicsRequest) (r *LookupTopicsResponse, err error) {
	if err = p.sendLookupTopics(request); err != nil {
		return
	}
	return p.recvLookupTopics()
}

func (p *TopicServiceClient) sendLookupTopics(request *LookupTopicsRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("lookupTopics", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LookupTopicsArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TopicServiceClient) recvLookupTopics() (value *LookupTopicsResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error37 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error38 error
		error38, err = error37.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error38
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "lookupTopics failed: out of sequence response")
		return
	}
	result := LookupTopicsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// look up all topics that match topic pattern
//
// Parameters:
//   - Request
func (p *TopicServiceClient) MatchTopics(request *MatchTopicsRequest) (r *MatchTopicsResponse, err error) {
	if err = p.sendMatchTopics(request); err != nil {
		return
	}
	return p.recvMatchTopics()
}

func (p *TopicServiceClient) sendMatchTopics(request *MatchTopicsRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("matchTopics", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MatchTopicsArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TopicServiceClient) recvMatchTopics() (value *MatchTopicsResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error39 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error40 error
		error40, err = error39.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error40
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "matchTopics failed: out of sequence response")
		return
	}
	result := MatchTopicsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// changeTopicAttribute, the caller must have CHANGE_TOPIC permission;
//
// Parameters:
//   - Request
func (p *TopicServiceClient) ChangeTopicAttribute(request *ChangeTopicAttributeRequest) (err error) {
	if err = p.sendChangeTopicAttribute(request); err != nil {
		return
	}
	return p.recvChangeTopicAttribute()
}

func (p *TopicServiceClient) sendChangeTopicAttribute(request *ChangeTopicAttributeRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("changeTopicAttribute", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ChangeTopicAttributeArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TopicServiceClient) recvChangeTopicAttribute() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error41 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error42 error
		error42, err = error41.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error42
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "changeTopicAttribute failed: out of sequence response")
		return
	}
	result := ChangeTopicAttributeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// deleteTopicAttribute, the caller must have CHANGE_TOPIC permission;
//
// Parameters:
//   - Request
func (p *TopicServiceClient) DeleteTopicAttribute(request *DeleteTopicAttributeRequest) (err error) {
	if err = p.sendDeleteTopicAttribute(request); err != nil {
		return
	}
	return p.recvDeleteTopicAttribute()
}

func (p *TopicServiceClient) sendDeleteTopicAttribute(request *DeleteTopicAttributeRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deleteTopicAttribute", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DeleteTopicAttributeArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TopicServiceClient) recvDeleteTopicAttribute() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error43 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error44 error
		error44, err = error43.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error44
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteTopicAttribute failed: out of sequence response")
		return
	}
	result := DeleteTopicAttributeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// changeTopicOwnerInfo, the caller must have CHANGE_TOPIC permission;
//
// Parameters:
//   - Request
func (p *TopicServiceClient) ChangeTopicOwnerInfo(request *ChangeTopicOwnerInfoRequest) (err error) {
	if err = p.sendChangeTopicOwnerInfo(request); err != nil {
		return
	}
	return p.recvChangeTopicOwnerInfo()
}

func (p *TopicServiceClient) sendChangeTopicOwnerInfo(request *ChangeTopicOwnerInfoRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("changeTopicOwnerInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ChangeTopicOwnerInfoArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TopicServiceClient) recvChangeTopicOwnerInfo() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error45 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error46 error
		error46, err = error45.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error46
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "changeTopicOwnerInfo failed: out of sequence response")
		return
	}
	result := ChangeTopicOwnerInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// changeReplicationTopicSourceInfo, the caller must have CHANGE_TOPIC permission;
//
// Parameters:
//   - Request
func (p *TopicServiceClient) ChangeReplicationTopicSourceInfo(request *ChangeReplicationTopicSourceInfoRequest) (err error) {
	if err = p.sendChangeReplicationTopicSourceInfo(request); err != nil {
		return
	}
	return p.recvChangeReplicationTopicSourceInfo()
}

func (p *TopicServiceClient) sendChangeReplicationTopicSourceInfo(request *ChangeReplicationTopicSourceInfoRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("changeReplicationTopicSourceInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ChangeReplicationTopicSourceInfoArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TopicServiceClient) recvChangeReplicationTopicSourceInfo() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error47 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error48 error
		error48, err = error47.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error48
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "changeReplicationTopicSourceInfo failed: out of sequence response")
		return
	}
	result := ChangeReplicationTopicSourceInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// describeTopic, the caller must have DESCRIBE_TOPIC permission;
//
// Parameters:
//   - Request
func (p *TopicServiceClient) DescribeTopic(request *DescribeTopicRequest) (r *DescribeTopicResponse, err error) {
	if err = p.sendDescribeTopic(request); err != nil {
		return
	}
	return p.recvDescribeTopic()
}

func (p *TopicServiceClient) sendDescribeTopic(request *DescribeTopicRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("describeTopic", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DescribeTopicArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TopicServiceClient) recvDescribeTopic() (value *DescribeTopicResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error49 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error50 error
		error50, err = error49.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error50
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "describeTopic failed: out of sequence response")
		return
	}
	result := DescribeTopicResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// getDescribeInfo, the caller must have DESCRIBE_TOPIC permission;
//
// Parameters:
//   - Request
func (p *TopicServiceClient) GetDescribeInfo(request *GetDescribeInfoRequest) (r *GetDescribeInfoResponse, err error) {
	if err = p.sendGetDescribeInfo(request); err != nil {
		return
	}
	return p.recvGetDescribeInfo()
}

func (p *TopicServiceClient) sendGetDescribeInfo(request *GetDescribeInfoRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getDescribeInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetDescribeInfoArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TopicServiceClient) recvGetDescribeInfo() (value *GetDescribeInfoResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error51 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error52 error
		error52, err = error51.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error52
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getDescribeInfo failed: out of sequence response")
		return
	}
	result := GetDescribeInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// getTopicAttribute, the caller must have DESCRIBE_TOPIC permission;
//
// Parameters:
//   - Request
func (p *TopicServiceClient) GetTopicAttribute(request *GetTopicAttributeRequest) (r *GetTopicAttributeResponse, err error) {
	if err = p.sendGetTopicAttribute(request); err != nil {
		return
	}
	return p.recvGetTopicAttribute()
}

func (p *TopicServiceClient) sendGetTopicAttribute(request *GetTopicAttributeRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getTopicAttribute", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetTopicAttributeArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TopicServiceClient) recvGetTopicAttribute() (value *GetTopicAttributeResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error53 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error54 error
		error54, err = error53.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error54
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getTopicAttribute failed: out of sequence response")
		return
	}
	result := GetTopicAttributeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// listTopicsInfo will return the topics which owned by the call developer
// and its describe information.
func (p *TopicServiceClient) ListTopicsInfo() (r *ListTopicsInfoResponse, err error) {
	if err = p.sendListTopicsInfo(); err != nil {
		return
	}
	return p.recvListTopicsInfo()
}

func (p *TopicServiceClient) sendListTopicsInfo() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("listTopicsInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ListTopicsInfoArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TopicServiceClient) recvListTopicsInfo() (value *ListTopicsInfoResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error55 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error56 error
		error56, err = error55.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error56
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listTopicsInfo failed: out of sequence response")
		return
	}
	result := ListTopicsInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// listTopics for the developer that call this method, and this method will
// only return the topics that owned by the call developer, if none,
// listTopics will return nothing.
func (p *TopicServiceClient) ListTopics() (r *ListTopicsResponse, err error) {
	if err = p.sendListTopics(); err != nil {
		return
	}
	return p.recvListTopics()
}

func (p *TopicServiceClient) sendListTopics() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("listTopics", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ListTopicsArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TopicServiceClient) recvListTopics() (value *ListTopicsResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error57 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error58 error
		error58, err = error57.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error58
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listTopics failed: out of sequence response")
		return
	}
	result := ListTopicsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *TopicServiceClient) GetBindTopics() (r *ListTopicsResponse, err error) {
	if err = p.sendGetBindTopics(); err != nil {
		return
	}
	return p.recvGetBindTopics()
}

func (p *TopicServiceClient) sendGetBindTopics() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getBindTopics", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetBindTopicsArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TopicServiceClient) recvGetBindTopics() (value *ListTopicsResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error59 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error60 error
		error60, err = error59.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error60
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getBindTopics failed: out of sequence response")
		return
	}
	result := GetBindTopicsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// setTopicQuota, the caller must be talos admin or topic owner
//
// Parameters:
//   - Request
func (p *TopicServiceClient) SetTopicQuota(request *SetTopicQuotaRequest) (err error) {
	if err = p.sendSetTopicQuota(request); err != nil {
		return
	}
	return p.recvSetTopicQuota()
}

func (p *TopicServiceClient) sendSetTopicQuota(request *SetTopicQuotaRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("setTopicQuota", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SetTopicQuotaArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TopicServiceClient) recvSetTopicQuota() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error61 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error62 error
		error62, err = error61.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error62
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "setTopicQuota failed: out of sequence response")
		return
	}
	result := SetTopicQuotaResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// queryTopicQuota, the caller must be talos admin or topic owner
//
// Parameters:
//   - Request
func (p *TopicServiceClient) QueryTopicQuota(request *QueryTopicQuotaRequest) (r *QueryTopicQuotaResponse, err error) {
	if err = p.sendQueryTopicQuota(request); err != nil {
		return
	}
	return p.recvQueryTopicQuota()
}

func (p *TopicServiceClient) sendQueryTopicQuota(request *QueryTopicQuotaRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("queryTopicQuota", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := QueryTopicQuotaArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TopicServiceClient) recvQueryTopicQuota() (value *QueryTopicQuotaResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error63 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error64 error
		error64, err = error63.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error64
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "queryTopicQuota failed: out of sequence response")
		return
	}
	result := QueryTopicQuotaResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// deleteTopicQuota, the caller must be talos admin or topic owner
//
// Parameters:
//   - Request
func (p *TopicServiceClient) DeleteTopicQuota(request *DeleteTopicQuotaRequest) (err error) {
	if err = p.sendDeleteTopicQuota(request); err != nil {
		return
	}
	return p.recvDeleteTopicQuota()
}

func (p *TopicServiceClient) sendDeleteTopicQuota(request *DeleteTopicQuotaRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deleteTopicQuota", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DeleteTopicQuotaArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TopicServiceClient) recvDeleteTopicQuota() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error65 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error66 error
		error66, err = error65.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error66
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteTopicQuota failed: out of sequence response")
		return
	}
	result := DeleteTopicQuotaResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// setPermission, the caller must be owner/Talos admin, and the operation
// permission devolution is not be allowed, the old permission will be
// overwrite after setPermission.
//
// Parameters:
//   - Request
func (p *TopicServiceClient) SetPermission(request *SetPermissionRequest) (err error) {
	if err = p.sendSetPermission(request); err != nil {
		return
	}
	return p.recvSetPermission()
}

func (p *TopicServiceClient) sendSetPermission(request *SetPermissionRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("setPermission", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SetPermissionArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TopicServiceClient) recvSetPermission() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error67 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error68 error
		error68, err = error67.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error68
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "setPermission failed: out of sequence response")
		return
	}
	result := SetPermissionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// revokePermission, the caller must be owner/Talos admin, and you can't
// revokePermission for the topic owner, the accountId will have
// NONE permission after revokePermission;
//
// Parameters:
//   - Request
func (p *TopicServiceClient) RevokePermission(request *RevokePermissionRequest) (err error) {
	if err = p.sendRevokePermission(request); err != nil {
		return
	}
	return p.recvRevokePermission()
}

func (p *TopicServiceClient) sendRevokePermission(request *RevokePermissionRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("revokePermission", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RevokePermissionArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TopicServiceClient) recvRevokePermission() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error69 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error70 error
		error70, err = error69.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error70
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "revokePermission failed: out of sequence response")
		return
	}
	result := RevokePermissionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// listPermission, the caller must have DESCRIBE_TOPIC permission;
//
// Parameters:
//   - Request
func (p *TopicServiceClient) ListPermission(request *ListPermissionRequest) (r *ListPermissionResponse, err error) {
	if err = p.sendListPermission(request); err != nil {
		return
	}
	return p.recvListPermission()
}

func (p *TopicServiceClient) sendListPermission(request *ListPermissionRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("listPermission", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ListPermissionArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TopicServiceClient) recvListPermission() (value *ListPermissionResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error71 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error72 error
		error72, err = error71.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error72
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listPermission failed: out of sequence response")
		return
	}
	result := ListPermissionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// getPermission, the caller must hava DESCRIBE_TOPIC permission;
//
// Parameters:
//   - Request
func (p *TopicServiceClient) GetPermission(request *GetPermissionRequest) (r *GetPermissionResponse, err error) {
	if err = p.sendGetPermission(request); err != nil {
		return
	}
	return p.recvGetPermission()
}

func (p *TopicServiceClient) sendGetPermission(request *GetPermissionRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getPermission", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetPermissionArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TopicServiceClient) recvGetPermission() (value *GetPermissionResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error73 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error74 error
		error74, err = error73.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error74
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getPermission failed: out of sequence response")
		return
	}
	result := GetPermissionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// addSubResourceName, the caller must be a developer owner of topic
//
// Parameters:
//   - Request
func (p *TopicServiceClient) AddSubResourceName(request *AddSubResourceNameRequest) (err error) {
	if err = p.sendAddSubResourceName(request); err != nil {
		return
	}
	return p.recvAddSubResourceName()
}

func (p *TopicServiceClient) sendAddSubResourceName(request *AddSubResourceNameRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("addSubResourceName", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AddSubResourceNameArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TopicServiceClient) recvAddSubResourceName() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error75 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error76 error
		error76, err = error75.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error76
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "addSubResourceName failed: out of sequence response")
		return
	}
	result := AddSubResourceNameResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

type TopicServiceProcessor struct {
	*common.TalosBaseServiceProcessor
}

func NewTopicServiceProcessor(handler TopicService) *TopicServiceProcessor {
	self77 := &TopicServiceProcessor{common.NewTalosBaseServiceProcessor(handler)}
	self77.AddToProcessorMap("createTopic", &topicServiceProcessorCreateTopic{handler: handler})
	self77.AddToProcessorMap("createReplicationTopic", &topicServiceProcessorCreateReplicationTopic{handler: handler})
	self77.AddToProcessorMap("createTopicGroup", &topicServiceProcessorCreateTopicGroup{handler: handler})
	self77.AddToProcessorMap("describeTopicGroup", &topicServiceProcessorDescribeTopicGroup{handler: handler})
	self77.AddToProcessorMap("deleteTopicGroup", &topicServiceProcessorDeleteTopicGroup{handler: handler})
	self77.AddToProcessorMap("listTopicGroup", &topicServiceProcessorListTopicGroup{handler: handler})
	self77.AddToProcessorMap("updateTopicGroup", &topicServiceProcessorUpdateTopicGroup{handler: handler})
	self77.AddToProcessorMap("deleteTopic", &topicServiceProcessorDeleteTopic{handler: handler})
	self77.AddToProcessorMap("lookupTopics", &topicServiceProcessorLookupTopics{handler: handler})
	self77.AddToProcessorMap("matchTopics", &topicServiceProcessorMatchTopics{handler: handler})
	self77.AddToProcessorMap("changeTopicAttribute", &topicServiceProcessorChangeTopicAttribute{handler: handler})
	self77.AddToProcessorMap("deleteTopicAttribute", &topicServiceProcessorDeleteTopicAttribute{handler: handler})
	self77.AddToProcessorMap("changeTopicOwnerInfo", &topicServiceProcessorChangeTopicOwnerInfo{handler: handler})
	self77.AddToProcessorMap("changeReplicationTopicSourceInfo", &topicServiceProcessorChangeReplicationTopicSourceInfo{handler: handler})
	self77.AddToProcessorMap("describeTopic", &topicServiceProcessorDescribeTopic{handler: handler})
	self77.AddToProcessorMap("getDescribeInfo", &topicServiceProcessorGetDescribeInfo{handler: handler})
	self77.AddToProcessorMap("getTopicAttribute", &topicServiceProcessorGetTopicAttribute{handler: handler})
	self77.AddToProcessorMap("listTopicsInfo", &topicServiceProcessorListTopicsInfo{handler: handler})
	self77.AddToProcessorMap("listTopics", &topicServiceProcessorListTopics{handler: handler})
	self77.AddToProcessorMap("getBindTopics", &topicServiceProcessorGetBindTopics{handler: handler})
	self77.AddToProcessorMap("setTopicQuota", &topicServiceProcessorSetTopicQuota{handler: handler})
	self77.AddToProcessorMap("queryTopicQuota", &topicServiceProcessorQueryTopicQuota{handler: handler})
	self77.AddToProcessorMap("deleteTopicQuota", &topicServiceProcessorDeleteTopicQuota{handler: handler})
	self77.AddToProcessorMap("setPermission", &topicServiceProcessorSetPermission{handler: handler})
	self77.AddToProcessorMap("revokePermission", &topicServiceProcessorRevokePermission{handler: handler})
	self77.AddToProcessorMap("listPermission", &topicServiceProcessorListPermission{handler: handler})
	self77.AddToProcessorMap("getPermission", &topicServiceProcessorGetPermission{handler: handler})
	self77.AddToProcessorMap("addSubResourceName", &topicServiceProcessorAddSubResourceName{handler: handler})
	return self77
}

type topicServiceProcessorCreateTopic struct {
	handler TopicService
}

func (p *topicServiceProcessorCreateTopic) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CreateTopicArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createTopic", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CreateTopicResult{}
	var retval *CreateTopicResponse
	var err2 error
	if retval, err2 = p.handler.CreateTopic(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createTopic: "+err2.Error())
			oprot.WriteMessageBegin("createTopic", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("createTopic", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type topicServiceProcessorCreateReplicationTopic struct {
	handler TopicService
}

func (p *topicServiceProcessorCreateReplicationTopic) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CreateReplicationTopicArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createReplicationTopic", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CreateReplicationTopicResult{}
	var retval *CreateTopicResponse
	var err2 error
	if retval, err2 = p.handler.CreateReplicationTopic(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createReplicationTopic: "+err2.Error())
			oprot.WriteMessageBegin("createReplicationTopic", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("createReplicationTopic", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type topicServiceProcessorCreateTopicGroup struct {
	handler TopicService
}

func (p *topicServiceProcessorCreateTopicGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CreateTopicGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createTopicGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CreateTopicGroupResult{}
	var retval *CreateTopicGroupResponse
	var err2 error
	if retval, err2 = p.handler.CreateTopicGroup(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createTopicGroup: "+err2.Error())
			oprot.WriteMessageBegin("createTopicGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("createTopicGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type topicServiceProcessorDescribeTopicGroup struct {
	handler TopicService
}

func (p *topicServiceProcessorDescribeTopicGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DescribeTopicGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("describeTopicGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DescribeTopicGroupResult{}
	var retval *DescribeTopicGroupResponse
	var err2 error
	if retval, err2 = p.handler.DescribeTopicGroup(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing describeTopicGroup: "+err2.Error())
			oprot.WriteMessageBegin("describeTopicGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("describeTopicGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type topicServiceProcessorDeleteTopicGroup struct {
	handler TopicService
}

func (p *topicServiceProcessorDeleteTopicGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DeleteTopicGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteTopicGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DeleteTopicGroupResult{}
	var err2 error
	if err2 = p.handler.DeleteTopicGroup(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteTopicGroup: "+err2.Error())
			oprot.WriteMessageBegin("deleteTopicGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("deleteTopicGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type topicServiceProcessorListTopicGroup struct {
	handler TopicService
}

func (p *topicServiceProcessorListTopicGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ListTopicGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listTopicGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ListTopicGroupResult{}
	var retval *ListTopicGroupResponse
	var err2 error
	if retval, err2 = p.handler.ListTopicGroup(); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listTopicGroup: "+err2.Error())
			oprot.WriteMessageBegin("listTopicGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listTopicGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type topicServiceProcessorUpdateTopicGroup struct {
	handler TopicService
}

func (p *topicServiceProcessorUpdateTopicGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UpdateTopicGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateTopicGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UpdateTopicGroupResult{}
	var err2 error
	if err2 = p.handler.UpdateTopicGroup(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateTopicGroup: "+err2.Error())
			oprot.WriteMessageBegin("updateTopicGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("updateTopicGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type topicServiceProcessorDeleteTopic struct {
	handler TopicService
}

func (p *topicServiceProcessorDeleteTopic) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DeleteTopicArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteTopic", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DeleteTopicResult{}
	var err2 error
	if err2 = p.handler.DeleteTopic(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteTopic: "+err2.Error())
			oprot.WriteMessageBegin("deleteTopic", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("deleteTopic", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type topicServiceProcessorLookupTopics struct {
	handler TopicService
}

func (p *topicServiceProcessorLookupTopics) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LookupTopicsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("lookupTopics", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := LookupTopicsResult{}
	var retval *LookupTopicsResponse
	var err2 error
	if retval, err2 = p.handler.LookupTopics(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing lookupTopics: "+err2.Error())
			oprot.WriteMessageBegin("lookupTopics", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("lookupTopics", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type topicServiceProcessorMatchTopics struct {
	handler TopicService
}

func (p *topicServiceProcessorMatchTopics) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MatchTopicsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("matchTopics", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MatchTopicsResult{}
	var retval *MatchTopicsResponse
	var err2 error
	if retval, err2 = p.handler.MatchTopics(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing matchTopics: "+err2.Error())
			oprot.WriteMessageBegin("matchTopics", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("matchTopics", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type topicServiceProcessorChangeTopicAttribute struct {
	handler TopicService
}

func (p *topicServiceProcessorChangeTopicAttribute) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ChangeTopicAttributeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("changeTopicAttribute", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ChangeTopicAttributeResult{}
	var err2 error
	if err2 = p.handler.ChangeTopicAttribute(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing changeTopicAttribute: "+err2.Error())
			oprot.WriteMessageBegin("changeTopicAttribute", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("changeTopicAttribute", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type topicServiceProcessorDeleteTopicAttribute struct {
	handler TopicService
}

func (p *topicServiceProcessorDeleteTopicAttribute) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DeleteTopicAttributeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteTopicAttribute", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DeleteTopicAttributeResult{}
	var err2 error
	if err2 = p.handler.DeleteTopicAttribute(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteTopicAttribute: "+err2.Error())
			oprot.WriteMessageBegin("deleteTopicAttribute", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("deleteTopicAttribute", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type topicServiceProcessorChangeTopicOwnerInfo struct {
	handler TopicService
}

func (p *topicServiceProcessorChangeTopicOwnerInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ChangeTopicOwnerInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("changeTopicOwnerInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ChangeTopicOwnerInfoResult{}
	var err2 error
	if err2 = p.handler.ChangeTopicOwnerInfo(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing changeTopicOwnerInfo: "+err2.Error())
			oprot.WriteMessageBegin("changeTopicOwnerInfo", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("changeTopicOwnerInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type topicServiceProcessorChangeReplicationTopicSourceInfo struct {
	handler TopicService
}

func (p *topicServiceProcessorChangeReplicationTopicSourceInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ChangeReplicationTopicSourceInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("changeReplicationTopicSourceInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ChangeReplicationTopicSourceInfoResult{}
	var err2 error
	if err2 = p.handler.ChangeReplicationTopicSourceInfo(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing changeReplicationTopicSourceInfo: "+err2.Error())
			oprot.WriteMessageBegin("changeReplicationTopicSourceInfo", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("changeReplicationTopicSourceInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type topicServiceProcessorDescribeTopic struct {
	handler TopicService
}

func (p *topicServiceProcessorDescribeTopic) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DescribeTopicArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("describeTopic", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DescribeTopicResult{}
	var retval *DescribeTopicResponse
	var err2 error
	if retval, err2 = p.handler.DescribeTopic(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing describeTopic: "+err2.Error())
			oprot.WriteMessageBegin("describeTopic", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("describeTopic", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type topicServiceProcessorGetDescribeInfo struct {
	handler TopicService
}

func (p *topicServiceProcessorGetDescribeInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetDescribeInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getDescribeInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetDescribeInfoResult{}
	var retval *GetDescribeInfoResponse
	var err2 error
	if retval, err2 = p.handler.GetDescribeInfo(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getDescribeInfo: "+err2.Error())
			oprot.WriteMessageBegin("getDescribeInfo", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getDescribeInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type topicServiceProcessorGetTopicAttribute struct {
	handler TopicService
}

func (p *topicServiceProcessorGetTopicAttribute) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetTopicAttributeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getTopicAttribute", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetTopicAttributeResult{}
	var retval *GetTopicAttributeResponse
	var err2 error
	if retval, err2 = p.handler.GetTopicAttribute(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTopicAttribute: "+err2.Error())
			oprot.WriteMessageBegin("getTopicAttribute", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getTopicAttribute", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type topicServiceProcessorListTopicsInfo struct {
	handler TopicService
}

func (p *topicServiceProcessorListTopicsInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ListTopicsInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listTopicsInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ListTopicsInfoResult{}
	var retval *ListTopicsInfoResponse
	var err2 error
	if retval, err2 = p.handler.ListTopicsInfo(); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listTopicsInfo: "+err2.Error())
			oprot.WriteMessageBegin("listTopicsInfo", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listTopicsInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type topicServiceProcessorListTopics struct {
	handler TopicService
}

func (p *topicServiceProcessorListTopics) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ListTopicsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listTopics", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ListTopicsResult{}
	var retval *ListTopicsResponse
	var err2 error
	if retval, err2 = p.handler.ListTopics(); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listTopics: "+err2.Error())
			oprot.WriteMessageBegin("listTopics", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listTopics", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type topicServiceProcessorGetBindTopics struct {
	handler TopicService
}

func (p *topicServiceProcessorGetBindTopics) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetBindTopicsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getBindTopics", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetBindTopicsResult{}
	var retval *ListTopicsResponse
	var err2 error
	if retval, err2 = p.handler.GetBindTopics(); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBindTopics: "+err2.Error())
			oprot.WriteMessageBegin("getBindTopics", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getBindTopics", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type topicServiceProcessorSetTopicQuota struct {
	handler TopicService
}

func (p *topicServiceProcessorSetTopicQuota) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SetTopicQuotaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("setTopicQuota", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SetTopicQuotaResult{}
	var err2 error
	if err2 = p.handler.SetTopicQuota(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setTopicQuota: "+err2.Error())
			oprot.WriteMessageBegin("setTopicQuota", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("setTopicQuota", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type topicServiceProcessorQueryTopicQuota struct {
	handler TopicService
}

func (p *topicServiceProcessorQueryTopicQuota) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := QueryTopicQuotaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("queryTopicQuota", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := QueryTopicQuotaResult{}
	var retval *QueryTopicQuotaResponse
	var err2 error
	if retval, err2 = p.handler.QueryTopicQuota(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryTopicQuota: "+err2.Error())
			oprot.WriteMessageBegin("queryTopicQuota", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("queryTopicQuota", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type topicServiceProcessorDeleteTopicQuota struct {
	handler TopicService
}

func (p *topicServiceProcessorDeleteTopicQuota) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DeleteTopicQuotaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteTopicQuota", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DeleteTopicQuotaResult{}
	var err2 error
	if err2 = p.handler.DeleteTopicQuota(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteTopicQuota: "+err2.Error())
			oprot.WriteMessageBegin("deleteTopicQuota", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("deleteTopicQuota", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type topicServiceProcessorSetPermission struct {
	handler TopicService
}

func (p *topicServiceProcessorSetPermission) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SetPermissionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("setPermission", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SetPermissionResult{}
	var err2 error
	if err2 = p.handler.SetPermission(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setPermission: "+err2.Error())
			oprot.WriteMessageBegin("setPermission", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("setPermission", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type topicServiceProcessorRevokePermission struct {
	handler TopicService
}

func (p *topicServiceProcessorRevokePermission) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RevokePermissionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("revokePermission", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RevokePermissionResult{}
	var err2 error
	if err2 = p.handler.RevokePermission(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing revokePermission: "+err2.Error())
			oprot.WriteMessageBegin("revokePermission", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("revokePermission", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type topicServiceProcessorListPermission struct {
	handler TopicService
}

func (p *topicServiceProcessorListPermission) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ListPermissionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listPermission", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ListPermissionResult{}
	var retval *ListPermissionResponse
	var err2 error
	if retval, err2 = p.handler.ListPermission(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listPermission: "+err2.Error())
			oprot.WriteMessageBegin("listPermission", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listPermission", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type topicServiceProcessorGetPermission struct {
	handler TopicService
}

func (p *topicServiceProcessorGetPermission) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetPermissionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getPermission", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetPermissionResult{}
	var retval *GetPermissionResponse
	var err2 error
	if retval, err2 = p.handler.GetPermission(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPermission: "+err2.Error())
			oprot.WriteMessageBegin("getPermission", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getPermission", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type topicServiceProcessorAddSubResourceName struct {
	handler TopicService
}

func (p *topicServiceProcessorAddSubResourceName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AddSubResourceNameArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addSubResourceName", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AddSubResourceNameResult{}
	var err2 error
	if err2 = p.handler.AddSubResourceName(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addSubResourceName: "+err2.Error())
			oprot.WriteMessageBegin("addSubResourceName", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("addSubResourceName", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type CreateTopicArgs struct {
	Request *CreateTopicRequest `thrift:"request,1" json:"request"`
}

func NewCreateTopicArgs() *CreateTopicArgs {
	return &CreateTopicArgs{}
}

var CreateTopicArgs_Request_DEFAULT *CreateTopicRequest

func (p *CreateTopicArgs) GetRequest() *CreateTopicRequest {
	if !p.IsSetRequest() {
		return CreateTopicArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *CreateTopicArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CreateTopicArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateTopicArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &CreateTopicRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *CreateTopicArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createTopic_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateTopicArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *CreateTopicArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTopicArgs(%+v)", *p)
}

type CreateTopicResult struct {
	Success *CreateTopicResponse         `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewCreateTopicResult() *CreateTopicResult {
	return &CreateTopicResult{}
}

var CreateTopicResult_Success_DEFAULT *CreateTopicResponse

func (p *CreateTopicResult) GetSuccess() *CreateTopicResponse {
	if !p.IsSetSuccess() {
		return CreateTopicResult_Success_DEFAULT
	}
	return p.Success
}

var CreateTopicResult_E_DEFAULT *common.GalaxyTalosException

func (p *CreateTopicResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return CreateTopicResult_E_DEFAULT
	}
	return p.E
}
func (p *CreateTopicResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateTopicResult) IsSetE() bool {
	return p.E != nil
}

func (p *CreateTopicResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateTopicResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &CreateTopicResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *CreateTopicResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *CreateTopicResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createTopic_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateTopicResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *CreateTopicResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *CreateTopicResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTopicResult(%+v)", *p)
}

type CreateReplicationTopicArgs struct {
	Request *CreateReplicationTopicRequest `thrift:"request,1" json:"request"`
}

func NewCreateReplicationTopicArgs() *CreateReplicationTopicArgs {
	return &CreateReplicationTopicArgs{}
}

var CreateReplicationTopicArgs_Request_DEFAULT *CreateReplicationTopicRequest

func (p *CreateReplicationTopicArgs) GetRequest() *CreateReplicationTopicRequest {
	if !p.IsSetRequest() {
		return CreateReplicationTopicArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *CreateReplicationTopicArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CreateReplicationTopicArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateReplicationTopicArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &CreateReplicationTopicRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *CreateReplicationTopicArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createReplicationTopic_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateReplicationTopicArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *CreateReplicationTopicArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateReplicationTopicArgs(%+v)", *p)
}

type CreateReplicationTopicResult struct {
	Success *CreateTopicResponse         `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewCreateReplicationTopicResult() *CreateReplicationTopicResult {
	return &CreateReplicationTopicResult{}
}

var CreateReplicationTopicResult_Success_DEFAULT *CreateTopicResponse

func (p *CreateReplicationTopicResult) GetSuccess() *CreateTopicResponse {
	if !p.IsSetSuccess() {
		return CreateReplicationTopicResult_Success_DEFAULT
	}
	return p.Success
}

var CreateReplicationTopicResult_E_DEFAULT *common.GalaxyTalosException

func (p *CreateReplicationTopicResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return CreateReplicationTopicResult_E_DEFAULT
	}
	return p.E
}
func (p *CreateReplicationTopicResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateReplicationTopicResult) IsSetE() bool {
	return p.E != nil
}

func (p *CreateReplicationTopicResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateReplicationTopicResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &CreateTopicResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *CreateReplicationTopicResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *CreateReplicationTopicResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createReplicationTopic_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateReplicationTopicResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *CreateReplicationTopicResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *CreateReplicationTopicResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateReplicationTopicResult(%+v)", *p)
}

type CreateTopicGroupArgs struct {
	Request *CreateTopicGroupRequest `thrift:"request,1" json:"request"`
}

func NewCreateTopicGroupArgs() *CreateTopicGroupArgs {
	return &CreateTopicGroupArgs{}
}

var CreateTopicGroupArgs_Request_DEFAULT *CreateTopicGroupRequest

func (p *CreateTopicGroupArgs) GetRequest() *CreateTopicGroupRequest {
	if !p.IsSetRequest() {
		return CreateTopicGroupArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *CreateTopicGroupArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CreateTopicGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateTopicGroupArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &CreateTopicGroupRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *CreateTopicGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createTopicGroup_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateTopicGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *CreateTopicGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTopicGroupArgs(%+v)", *p)
}

type CreateTopicGroupResult struct {
	Success *CreateTopicGroupResponse    `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewCreateTopicGroupResult() *CreateTopicGroupResult {
	return &CreateTopicGroupResult{}
}

var CreateTopicGroupResult_Success_DEFAULT *CreateTopicGroupResponse

func (p *CreateTopicGroupResult) GetSuccess() *CreateTopicGroupResponse {
	if !p.IsSetSuccess() {
		return CreateTopicGroupResult_Success_DEFAULT
	}
	return p.Success
}

var CreateTopicGroupResult_E_DEFAULT *common.GalaxyTalosException

func (p *CreateTopicGroupResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return CreateTopicGroupResult_E_DEFAULT
	}
	return p.E
}
func (p *CreateTopicGroupResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateTopicGroupResult) IsSetE() bool {
	return p.E != nil
}

func (p *CreateTopicGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateTopicGroupResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &CreateTopicGroupResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *CreateTopicGroupResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *CreateTopicGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createTopicGroup_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateTopicGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *CreateTopicGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *CreateTopicGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTopicGroupResult(%+v)", *p)
}

type DescribeTopicGroupArgs struct {
	Request *DescribeTopicGroupRequest `thrift:"request,1" json:"request"`
}

func NewDescribeTopicGroupArgs() *DescribeTopicGroupArgs {
	return &DescribeTopicGroupArgs{}
}

var DescribeTopicGroupArgs_Request_DEFAULT *DescribeTopicGroupRequest

func (p *DescribeTopicGroupArgs) GetRequest() *DescribeTopicGroupRequest {
	if !p.IsSetRequest() {
		return DescribeTopicGroupArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *DescribeTopicGroupArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *DescribeTopicGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DescribeTopicGroupArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &DescribeTopicGroupRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *DescribeTopicGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("describeTopicGroup_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DescribeTopicGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *DescribeTopicGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DescribeTopicGroupArgs(%+v)", *p)
}

type DescribeTopicGroupResult struct {
	Success *DescribeTopicGroupResponse  `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewDescribeTopicGroupResult() *DescribeTopicGroupResult {
	return &DescribeTopicGroupResult{}
}

var DescribeTopicGroupResult_Success_DEFAULT *DescribeTopicGroupResponse

func (p *DescribeTopicGroupResult) GetSuccess() *DescribeTopicGroupResponse {
	if !p.IsSetSuccess() {
		return DescribeTopicGroupResult_Success_DEFAULT
	}
	return p.Success
}

var DescribeTopicGroupResult_E_DEFAULT *common.GalaxyTalosException

func (p *DescribeTopicGroupResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return DescribeTopicGroupResult_E_DEFAULT
	}
	return p.E
}
func (p *DescribeTopicGroupResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DescribeTopicGroupResult) IsSetE() bool {
	return p.E != nil
}

func (p *DescribeTopicGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DescribeTopicGroupResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &DescribeTopicGroupResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *DescribeTopicGroupResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *DescribeTopicGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("describeTopicGroup_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DescribeTopicGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *DescribeTopicGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *DescribeTopicGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DescribeTopicGroupResult(%+v)", *p)
}

type DeleteTopicGroupArgs struct {
	Request *DeleteTopicGroupRequest `thrift:"request,1" json:"request"`
}

func NewDeleteTopicGroupArgs() *DeleteTopicGroupArgs {
	return &DeleteTopicGroupArgs{}
}

var DeleteTopicGroupArgs_Request_DEFAULT *DeleteTopicGroupRequest

func (p *DeleteTopicGroupArgs) GetRequest() *DeleteTopicGroupRequest {
	if !p.IsSetRequest() {
		return DeleteTopicGroupArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *DeleteTopicGroupArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *DeleteTopicGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteTopicGroupArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &DeleteTopicGroupRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *DeleteTopicGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteTopicGroup_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteTopicGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *DeleteTopicGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteTopicGroupArgs(%+v)", *p)
}

type DeleteTopicGroupResult struct {
	E *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewDeleteTopicGroupResult() *DeleteTopicGroupResult {
	return &DeleteTopicGroupResult{}
}

var DeleteTopicGroupResult_E_DEFAULT *common.GalaxyTalosException

func (p *DeleteTopicGroupResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return DeleteTopicGroupResult_E_DEFAULT
	}
	return p.E
}
func (p *DeleteTopicGroupResult) IsSetE() bool {
	return p.E != nil
}

func (p *DeleteTopicGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteTopicGroupResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *DeleteTopicGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteTopicGroup_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteTopicGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *DeleteTopicGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteTopicGroupResult(%+v)", *p)
}

type ListTopicGroupArgs struct {
}

func NewListTopicGroupArgs() *ListTopicGroupArgs {
	return &ListTopicGroupArgs{}
}

func (p *ListTopicGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListTopicGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listTopicGroup_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListTopicGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListTopicGroupArgs(%+v)", *p)
}

type ListTopicGroupResult struct {
	Success *ListTopicGroupResponse      `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewListTopicGroupResult() *ListTopicGroupResult {
	return &ListTopicGroupResult{}
}

var ListTopicGroupResult_Success_DEFAULT *ListTopicGroupResponse

func (p *ListTopicGroupResult) GetSuccess() *ListTopicGroupResponse {
	if !p.IsSetSuccess() {
		return ListTopicGroupResult_Success_DEFAULT
	}
	return p.Success
}

var ListTopicGroupResult_E_DEFAULT *common.GalaxyTalosException

func (p *ListTopicGroupResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return ListTopicGroupResult_E_DEFAULT
	}
	return p.E
}
func (p *ListTopicGroupResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListTopicGroupResult) IsSetE() bool {
	return p.E != nil
}

func (p *ListTopicGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListTopicGroupResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ListTopicGroupResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *ListTopicGroupResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ListTopicGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listTopicGroup_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListTopicGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *ListTopicGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ListTopicGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListTopicGroupResult(%+v)", *p)
}

type UpdateTopicGroupArgs struct {
	Request *UpdateTopicGroupRequest `thrift:"request,1" json:"request"`
}

func NewUpdateTopicGroupArgs() *UpdateTopicGroupArgs {
	return &UpdateTopicGroupArgs{}
}

var UpdateTopicGroupArgs_Request_DEFAULT *UpdateTopicGroupRequest

func (p *UpdateTopicGroupArgs) GetRequest() *UpdateTopicGroupRequest {
	if !p.IsSetRequest() {
		return UpdateTopicGroupArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *UpdateTopicGroupArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *UpdateTopicGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateTopicGroupArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &UpdateTopicGroupRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *UpdateTopicGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateTopicGroup_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateTopicGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *UpdateTopicGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateTopicGroupArgs(%+v)", *p)
}

type UpdateTopicGroupResult struct {
	E *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewUpdateTopicGroupResult() *UpdateTopicGroupResult {
	return &UpdateTopicGroupResult{}
}

var UpdateTopicGroupResult_E_DEFAULT *common.GalaxyTalosException

func (p *UpdateTopicGroupResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return UpdateTopicGroupResult_E_DEFAULT
	}
	return p.E
}
func (p *UpdateTopicGroupResult) IsSetE() bool {
	return p.E != nil
}

func (p *UpdateTopicGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateTopicGroupResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *UpdateTopicGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateTopicGroup_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateTopicGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *UpdateTopicGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateTopicGroupResult(%+v)", *p)
}

type DeleteTopicArgs struct {
	Request *DeleteTopicRequest `thrift:"request,1" json:"request"`
}

func NewDeleteTopicArgs() *DeleteTopicArgs {
	return &DeleteTopicArgs{}
}

var DeleteTopicArgs_Request_DEFAULT *DeleteTopicRequest

func (p *DeleteTopicArgs) GetRequest() *DeleteTopicRequest {
	if !p.IsSetRequest() {
		return DeleteTopicArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *DeleteTopicArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *DeleteTopicArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteTopicArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &DeleteTopicRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *DeleteTopicArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteTopic_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteTopicArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *DeleteTopicArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteTopicArgs(%+v)", *p)
}

type DeleteTopicResult struct {
	E *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewDeleteTopicResult() *DeleteTopicResult {
	return &DeleteTopicResult{}
}

var DeleteTopicResult_E_DEFAULT *common.GalaxyTalosException

func (p *DeleteTopicResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return DeleteTopicResult_E_DEFAULT
	}
	return p.E
}
func (p *DeleteTopicResult) IsSetE() bool {
	return p.E != nil
}

func (p *DeleteTopicResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteTopicResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *DeleteTopicResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteTopic_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteTopicResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *DeleteTopicResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteTopicResult(%+v)", *p)
}

type LookupTopicsArgs struct {
	Request *LookupTopicsRequest `thrift:"request,1" json:"request"`
}

func NewLookupTopicsArgs() *LookupTopicsArgs {
	return &LookupTopicsArgs{}
}

var LookupTopicsArgs_Request_DEFAULT *LookupTopicsRequest

func (p *LookupTopicsArgs) GetRequest() *LookupTopicsRequest {
	if !p.IsSetRequest() {
		return LookupTopicsArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *LookupTopicsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *LookupTopicsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LookupTopicsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &LookupTopicsRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *LookupTopicsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("lookupTopics_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LookupTopicsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *LookupTopicsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LookupTopicsArgs(%+v)", *p)
}

type LookupTopicsResult struct {
	Success *LookupTopicsResponse        `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewLookupTopicsResult() *LookupTopicsResult {
	return &LookupTopicsResult{}
}

var LookupTopicsResult_Success_DEFAULT *LookupTopicsResponse

func (p *LookupTopicsResult) GetSuccess() *LookupTopicsResponse {
	if !p.IsSetSuccess() {
		return LookupTopicsResult_Success_DEFAULT
	}
	return p.Success
}

var LookupTopicsResult_E_DEFAULT *common.GalaxyTalosException

func (p *LookupTopicsResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return LookupTopicsResult_E_DEFAULT
	}
	return p.E
}
func (p *LookupTopicsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LookupTopicsResult) IsSetE() bool {
	return p.E != nil
}

func (p *LookupTopicsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LookupTopicsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &LookupTopicsResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *LookupTopicsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *LookupTopicsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("lookupTopics_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LookupTopicsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *LookupTopicsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *LookupTopicsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LookupTopicsResult(%+v)", *p)
}

type MatchTopicsArgs struct {
	Request *MatchTopicsRequest `thrift:"request,1" json:"request"`
}

func NewMatchTopicsArgs() *MatchTopicsArgs {
	return &MatchTopicsArgs{}
}

var MatchTopicsArgs_Request_DEFAULT *MatchTopicsRequest

func (p *MatchTopicsArgs) GetRequest() *MatchTopicsRequest {
	if !p.IsSetRequest() {
		return MatchTopicsArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *MatchTopicsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *MatchTopicsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MatchTopicsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &MatchTopicsRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *MatchTopicsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("matchTopics_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MatchTopicsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *MatchTopicsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MatchTopicsArgs(%+v)", *p)
}

type MatchTopicsResult struct {
	Success *MatchTopicsResponse         `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewMatchTopicsResult() *MatchTopicsResult {
	return &MatchTopicsResult{}
}

var MatchTopicsResult_Success_DEFAULT *MatchTopicsResponse

func (p *MatchTopicsResult) GetSuccess() *MatchTopicsResponse {
	if !p.IsSetSuccess() {
		return MatchTopicsResult_Success_DEFAULT
	}
	return p.Success
}

var MatchTopicsResult_E_DEFAULT *common.GalaxyTalosException

func (p *MatchTopicsResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return MatchTopicsResult_E_DEFAULT
	}
	return p.E
}
func (p *MatchTopicsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MatchTopicsResult) IsSetE() bool {
	return p.E != nil
}

func (p *MatchTopicsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MatchTopicsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &MatchTopicsResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *MatchTopicsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *MatchTopicsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("matchTopics_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MatchTopicsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *MatchTopicsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *MatchTopicsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MatchTopicsResult(%+v)", *p)
}

type ChangeTopicAttributeArgs struct {
	Request *ChangeTopicAttributeRequest `thrift:"request,1" json:"request"`
}

func NewChangeTopicAttributeArgs() *ChangeTopicAttributeArgs {
	return &ChangeTopicAttributeArgs{}
}

var ChangeTopicAttributeArgs_Request_DEFAULT *ChangeTopicAttributeRequest

func (p *ChangeTopicAttributeArgs) GetRequest() *ChangeTopicAttributeRequest {
	if !p.IsSetRequest() {
		return ChangeTopicAttributeArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *ChangeTopicAttributeArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ChangeTopicAttributeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ChangeTopicAttributeArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &ChangeTopicAttributeRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *ChangeTopicAttributeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("changeTopicAttribute_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ChangeTopicAttributeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *ChangeTopicAttributeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChangeTopicAttributeArgs(%+v)", *p)
}

type ChangeTopicAttributeResult struct {
	E *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewChangeTopicAttributeResult() *ChangeTopicAttributeResult {
	return &ChangeTopicAttributeResult{}
}

var ChangeTopicAttributeResult_E_DEFAULT *common.GalaxyTalosException

func (p *ChangeTopicAttributeResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return ChangeTopicAttributeResult_E_DEFAULT
	}
	return p.E
}
func (p *ChangeTopicAttributeResult) IsSetE() bool {
	return p.E != nil
}

func (p *ChangeTopicAttributeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ChangeTopicAttributeResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ChangeTopicAttributeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("changeTopicAttribute_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ChangeTopicAttributeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ChangeTopicAttributeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChangeTopicAttributeResult(%+v)", *p)
}

type DeleteTopicAttributeArgs struct {
	Request *DeleteTopicAttributeRequest `thrift:"request,1" json:"request"`
}

func NewDeleteTopicAttributeArgs() *DeleteTopicAttributeArgs {
	return &DeleteTopicAttributeArgs{}
}

var DeleteTopicAttributeArgs_Request_DEFAULT *DeleteTopicAttributeRequest

func (p *DeleteTopicAttributeArgs) GetRequest() *DeleteTopicAttributeRequest {
	if !p.IsSetRequest() {
		return DeleteTopicAttributeArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *DeleteTopicAttributeArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *DeleteTopicAttributeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteTopicAttributeArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &DeleteTopicAttributeRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *DeleteTopicAttributeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteTopicAttribute_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteTopicAttributeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *DeleteTopicAttributeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteTopicAttributeArgs(%+v)", *p)
}

type DeleteTopicAttributeResult struct {
	E *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewDeleteTopicAttributeResult() *DeleteTopicAttributeResult {
	return &DeleteTopicAttributeResult{}
}

var DeleteTopicAttributeResult_E_DEFAULT *common.GalaxyTalosException

func (p *DeleteTopicAttributeResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return DeleteTopicAttributeResult_E_DEFAULT
	}
	return p.E
}
func (p *DeleteTopicAttributeResult) IsSetE() bool {
	return p.E != nil
}

func (p *DeleteTopicAttributeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteTopicAttributeResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *DeleteTopicAttributeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteTopicAttribute_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteTopicAttributeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *DeleteTopicAttributeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteTopicAttributeResult(%+v)", *p)
}

type ChangeTopicOwnerInfoArgs struct {
	Request *ChangeTopicOwnerInfoRequest `thrift:"request,1" json:"request"`
}

func NewChangeTopicOwnerInfoArgs() *ChangeTopicOwnerInfoArgs {
	return &ChangeTopicOwnerInfoArgs{}
}

var ChangeTopicOwnerInfoArgs_Request_DEFAULT *ChangeTopicOwnerInfoRequest

func (p *ChangeTopicOwnerInfoArgs) GetRequest() *ChangeTopicOwnerInfoRequest {
	if !p.IsSetRequest() {
		return ChangeTopicOwnerInfoArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *ChangeTopicOwnerInfoArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ChangeTopicOwnerInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ChangeTopicOwnerInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &ChangeTopicOwnerInfoRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *ChangeTopicOwnerInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("changeTopicOwnerInfo_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ChangeTopicOwnerInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *ChangeTopicOwnerInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChangeTopicOwnerInfoArgs(%+v)", *p)
}

type ChangeTopicOwnerInfoResult struct {
	E *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewChangeTopicOwnerInfoResult() *ChangeTopicOwnerInfoResult {
	return &ChangeTopicOwnerInfoResult{}
}

var ChangeTopicOwnerInfoResult_E_DEFAULT *common.GalaxyTalosException

func (p *ChangeTopicOwnerInfoResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return ChangeTopicOwnerInfoResult_E_DEFAULT
	}
	return p.E
}
func (p *ChangeTopicOwnerInfoResult) IsSetE() bool {
	return p.E != nil
}

func (p *ChangeTopicOwnerInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ChangeTopicOwnerInfoResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ChangeTopicOwnerInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("changeTopicOwnerInfo_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ChangeTopicOwnerInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ChangeTopicOwnerInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChangeTopicOwnerInfoResult(%+v)", *p)
}

type ChangeReplicationTopicSourceInfoArgs struct {
	Request *ChangeReplicationTopicSourceInfoRequest `thrift:"request,1" json:"request"`
}

func NewChangeReplicationTopicSourceInfoArgs() *ChangeReplicationTopicSourceInfoArgs {
	return &ChangeReplicationTopicSourceInfoArgs{}
}

var ChangeReplicationTopicSourceInfoArgs_Request_DEFAULT *ChangeReplicationTopicSourceInfoRequest

func (p *ChangeReplicationTopicSourceInfoArgs) GetRequest() *ChangeReplicationTopicSourceInfoRequest {
	if !p.IsSetRequest() {
		return ChangeReplicationTopicSourceInfoArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *ChangeReplicationTopicSourceInfoArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ChangeReplicationTopicSourceInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ChangeReplicationTopicSourceInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &ChangeReplicationTopicSourceInfoRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *ChangeReplicationTopicSourceInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("changeReplicationTopicSourceInfo_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ChangeReplicationTopicSourceInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *ChangeReplicationTopicSourceInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChangeReplicationTopicSourceInfoArgs(%+v)", *p)
}

type ChangeReplicationTopicSourceInfoResult struct {
	E *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewChangeReplicationTopicSourceInfoResult() *ChangeReplicationTopicSourceInfoResult {
	return &ChangeReplicationTopicSourceInfoResult{}
}

var ChangeReplicationTopicSourceInfoResult_E_DEFAULT *common.GalaxyTalosException

func (p *ChangeReplicationTopicSourceInfoResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return ChangeReplicationTopicSourceInfoResult_E_DEFAULT
	}
	return p.E
}
func (p *ChangeReplicationTopicSourceInfoResult) IsSetE() bool {
	return p.E != nil
}

func (p *ChangeReplicationTopicSourceInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ChangeReplicationTopicSourceInfoResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ChangeReplicationTopicSourceInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("changeReplicationTopicSourceInfo_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ChangeReplicationTopicSourceInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ChangeReplicationTopicSourceInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChangeReplicationTopicSourceInfoResult(%+v)", *p)
}

type DescribeTopicArgs struct {
	Request *DescribeTopicRequest `thrift:"request,1" json:"request"`
}

func NewDescribeTopicArgs() *DescribeTopicArgs {
	return &DescribeTopicArgs{}
}

var DescribeTopicArgs_Request_DEFAULT *DescribeTopicRequest

func (p *DescribeTopicArgs) GetRequest() *DescribeTopicRequest {
	if !p.IsSetRequest() {
		return DescribeTopicArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *DescribeTopicArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *DescribeTopicArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DescribeTopicArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &DescribeTopicRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *DescribeTopicArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("describeTopic_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DescribeTopicArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *DescribeTopicArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DescribeTopicArgs(%+v)", *p)
}

type DescribeTopicResult struct {
	Success *DescribeTopicResponse       `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewDescribeTopicResult() *DescribeTopicResult {
	return &DescribeTopicResult{}
}

var DescribeTopicResult_Success_DEFAULT *DescribeTopicResponse

func (p *DescribeTopicResult) GetSuccess() *DescribeTopicResponse {
	if !p.IsSetSuccess() {
		return DescribeTopicResult_Success_DEFAULT
	}
	return p.Success
}

var DescribeTopicResult_E_DEFAULT *common.GalaxyTalosException

func (p *DescribeTopicResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return DescribeTopicResult_E_DEFAULT
	}
	return p.E
}
func (p *DescribeTopicResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DescribeTopicResult) IsSetE() bool {
	return p.E != nil
}

func (p *DescribeTopicResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DescribeTopicResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &DescribeTopicResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *DescribeTopicResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *DescribeTopicResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("describeTopic_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DescribeTopicResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *DescribeTopicResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *DescribeTopicResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DescribeTopicResult(%+v)", *p)
}

type GetDescribeInfoArgs struct {
	Request *GetDescribeInfoRequest `thrift:"request,1" json:"request"`
}

func NewGetDescribeInfoArgs() *GetDescribeInfoArgs {
	return &GetDescribeInfoArgs{}
}

var GetDescribeInfoArgs_Request_DEFAULT *GetDescribeInfoRequest

func (p *GetDescribeInfoArgs) GetRequest() *GetDescribeInfoRequest {
	if !p.IsSetRequest() {
		return GetDescribeInfoArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *GetDescribeInfoArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *GetDescribeInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetDescribeInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &GetDescribeInfoRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *GetDescribeInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getDescribeInfo_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetDescribeInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *GetDescribeInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDescribeInfoArgs(%+v)", *p)
}

type GetDescribeInfoResult struct {
	Success *GetDescribeInfoResponse     `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewGetDescribeInfoResult() *GetDescribeInfoResult {
	return &GetDescribeInfoResult{}
}

var GetDescribeInfoResult_Success_DEFAULT *GetDescribeInfoResponse

func (p *GetDescribeInfoResult) GetSuccess() *GetDescribeInfoResponse {
	if !p.IsSetSuccess() {
		return GetDescribeInfoResult_Success_DEFAULT
	}
	return p.Success
}

var GetDescribeInfoResult_E_DEFAULT *common.GalaxyTalosException

func (p *GetDescribeInfoResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return GetDescribeInfoResult_E_DEFAULT
	}
	return p.E
}
func (p *GetDescribeInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetDescribeInfoResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetDescribeInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetDescribeInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetDescribeInfoResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetDescribeInfoResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetDescribeInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getDescribeInfo_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetDescribeInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetDescribeInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetDescribeInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDescribeInfoResult(%+v)", *p)
}

type GetTopicAttributeArgs struct {
	Request *GetTopicAttributeRequest `thrift:"request,1" json:"request"`
}

func NewGetTopicAttributeArgs() *GetTopicAttributeArgs {
	return &GetTopicAttributeArgs{}
}

var GetTopicAttributeArgs_Request_DEFAULT *GetTopicAttributeRequest

func (p *GetTopicAttributeArgs) GetRequest() *GetTopicAttributeRequest {
	if !p.IsSetRequest() {
		return GetTopicAttributeArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *GetTopicAttributeArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *GetTopicAttributeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTopicAttributeArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &GetTopicAttributeRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *GetTopicAttributeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTopicAttribute_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTopicAttributeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *GetTopicAttributeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTopicAttributeArgs(%+v)", *p)
}

type GetTopicAttributeResult struct {
	Success *GetTopicAttributeResponse   `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewGetTopicAttributeResult() *GetTopicAttributeResult {
	return &GetTopicAttributeResult{}
}

var GetTopicAttributeResult_Success_DEFAULT *GetTopicAttributeResponse

func (p *GetTopicAttributeResult) GetSuccess() *GetTopicAttributeResponse {
	if !p.IsSetSuccess() {
		return GetTopicAttributeResult_Success_DEFAULT
	}
	return p.Success
}

var GetTopicAttributeResult_E_DEFAULT *common.GalaxyTalosException

func (p *GetTopicAttributeResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return GetTopicAttributeResult_E_DEFAULT
	}
	return p.E
}
func (p *GetTopicAttributeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetTopicAttributeResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetTopicAttributeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTopicAttributeResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetTopicAttributeResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetTopicAttributeResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetTopicAttributeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTopicAttribute_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTopicAttributeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetTopicAttributeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetTopicAttributeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTopicAttributeResult(%+v)", *p)
}

type ListTopicsInfoArgs struct {
}

func NewListTopicsInfoArgs() *ListTopicsInfoArgs {
	return &ListTopicsInfoArgs{}
}

func (p *ListTopicsInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListTopicsInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listTopicsInfo_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListTopicsInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListTopicsInfoArgs(%+v)", *p)
}

type ListTopicsInfoResult struct {
	Success *ListTopicsInfoResponse      `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewListTopicsInfoResult() *ListTopicsInfoResult {
	return &ListTopicsInfoResult{}
}

var ListTopicsInfoResult_Success_DEFAULT *ListTopicsInfoResponse

func (p *ListTopicsInfoResult) GetSuccess() *ListTopicsInfoResponse {
	if !p.IsSetSuccess() {
		return ListTopicsInfoResult_Success_DEFAULT
	}
	return p.Success
}

var ListTopicsInfoResult_E_DEFAULT *common.GalaxyTalosException

func (p *ListTopicsInfoResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return ListTopicsInfoResult_E_DEFAULT
	}
	return p.E
}
func (p *ListTopicsInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListTopicsInfoResult) IsSetE() bool {
	return p.E != nil
}

func (p *ListTopicsInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListTopicsInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ListTopicsInfoResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *ListTopicsInfoResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ListTopicsInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listTopicsInfo_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListTopicsInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *ListTopicsInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ListTopicsInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListTopicsInfoResult(%+v)", *p)
}

type ListTopicsArgs struct {
}

func NewListTopicsArgs() *ListTopicsArgs {
	return &ListTopicsArgs{}
}

func (p *ListTopicsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListTopicsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listTopics_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListTopicsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListTopicsArgs(%+v)", *p)
}

type ListTopicsResult struct {
	Success *ListTopicsResponse          `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewListTopicsResult() *ListTopicsResult {
	return &ListTopicsResult{}
}

var ListTopicsResult_Success_DEFAULT *ListTopicsResponse

func (p *ListTopicsResult) GetSuccess() *ListTopicsResponse {
	if !p.IsSetSuccess() {
		return ListTopicsResult_Success_DEFAULT
	}
	return p.Success
}

var ListTopicsResult_E_DEFAULT *common.GalaxyTalosException

func (p *ListTopicsResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return ListTopicsResult_E_DEFAULT
	}
	return p.E
}
func (p *ListTopicsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListTopicsResult) IsSetE() bool {
	return p.E != nil
}

func (p *ListTopicsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListTopicsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ListTopicsResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *ListTopicsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ListTopicsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listTopics_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListTopicsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *ListTopicsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ListTopicsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListTopicsResult(%+v)", *p)
}

type GetBindTopicsArgs struct {
}

func NewGetBindTopicsArgs() *GetBindTopicsArgs {
	return &GetBindTopicsArgs{}
}

func (p *GetBindTopicsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetBindTopicsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getBindTopics_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetBindTopicsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetBindTopicsArgs(%+v)", *p)
}

type GetBindTopicsResult struct {
	Success *ListTopicsResponse          `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewGetBindTopicsResult() *GetBindTopicsResult {
	return &GetBindTopicsResult{}
}

var GetBindTopicsResult_Success_DEFAULT *ListTopicsResponse

func (p *GetBindTopicsResult) GetSuccess() *ListTopicsResponse {
	if !p.IsSetSuccess() {
		return GetBindTopicsResult_Success_DEFAULT
	}
	return p.Success
}

var GetBindTopicsResult_E_DEFAULT *common.GalaxyTalosException

func (p *GetBindTopicsResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return GetBindTopicsResult_E_DEFAULT
	}
	return p.E
}
func (p *GetBindTopicsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetBindTopicsResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetBindTopicsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetBindTopicsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ListTopicsResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetBindTopicsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetBindTopicsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getBindTopics_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetBindTopicsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetBindTopicsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetBindTopicsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetBindTopicsResult(%+v)", *p)
}

type SetTopicQuotaArgs struct {
	Request *SetTopicQuotaRequest `thrift:"request,1" json:"request"`
}

func NewSetTopicQuotaArgs() *SetTopicQuotaArgs {
	return &SetTopicQuotaArgs{}
}

var SetTopicQuotaArgs_Request_DEFAULT *SetTopicQuotaRequest

func (p *SetTopicQuotaArgs) GetRequest() *SetTopicQuotaRequest {
	if !p.IsSetRequest() {
		return SetTopicQuotaArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SetTopicQuotaArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SetTopicQuotaArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetTopicQuotaArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &SetTopicQuotaRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *SetTopicQuotaArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setTopicQuota_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetTopicQuotaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *SetTopicQuotaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetTopicQuotaArgs(%+v)", *p)
}

type SetTopicQuotaResult struct {
	E *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewSetTopicQuotaResult() *SetTopicQuotaResult {
	return &SetTopicQuotaResult{}
}

var SetTopicQuotaResult_E_DEFAULT *common.GalaxyTalosException

func (p *SetTopicQuotaResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return SetTopicQuotaResult_E_DEFAULT
	}
	return p.E
}
func (p *SetTopicQuotaResult) IsSetE() bool {
	return p.E != nil
}

func (p *SetTopicQuotaResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetTopicQuotaResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *SetTopicQuotaResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setTopicQuota_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetTopicQuotaResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *SetTopicQuotaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetTopicQuotaResult(%+v)", *p)
}

type QueryTopicQuotaArgs struct {
	Request *QueryTopicQuotaRequest `thrift:"request,1" json:"request"`
}

func NewQueryTopicQuotaArgs() *QueryTopicQuotaArgs {
	return &QueryTopicQuotaArgs{}
}

var QueryTopicQuotaArgs_Request_DEFAULT *QueryTopicQuotaRequest

func (p *QueryTopicQuotaArgs) GetRequest() *QueryTopicQuotaRequest {
	if !p.IsSetRequest() {
		return QueryTopicQuotaArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *QueryTopicQuotaArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *QueryTopicQuotaArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryTopicQuotaArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &QueryTopicQuotaRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *QueryTopicQuotaArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryTopicQuota_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryTopicQuotaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *QueryTopicQuotaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryTopicQuotaArgs(%+v)", *p)
}

type QueryTopicQuotaResult struct {
	Success *QueryTopicQuotaResponse     `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewQueryTopicQuotaResult() *QueryTopicQuotaResult {
	return &QueryTopicQuotaResult{}
}

var QueryTopicQuotaResult_Success_DEFAULT *QueryTopicQuotaResponse

func (p *QueryTopicQuotaResult) GetSuccess() *QueryTopicQuotaResponse {
	if !p.IsSetSuccess() {
		return QueryTopicQuotaResult_Success_DEFAULT
	}
	return p.Success
}

var QueryTopicQuotaResult_E_DEFAULT *common.GalaxyTalosException

func (p *QueryTopicQuotaResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return QueryTopicQuotaResult_E_DEFAULT
	}
	return p.E
}
func (p *QueryTopicQuotaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *QueryTopicQuotaResult) IsSetE() bool {
	return p.E != nil
}

func (p *QueryTopicQuotaResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryTopicQuotaResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &QueryTopicQuotaResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *QueryTopicQuotaResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *QueryTopicQuotaResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryTopicQuota_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryTopicQuotaResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *QueryTopicQuotaResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *QueryTopicQuotaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryTopicQuotaResult(%+v)", *p)
}

type DeleteTopicQuotaArgs struct {
	Request *DeleteTopicQuotaRequest `thrift:"request,1" json:"request"`
}

func NewDeleteTopicQuotaArgs() *DeleteTopicQuotaArgs {
	return &DeleteTopicQuotaArgs{}
}

var DeleteTopicQuotaArgs_Request_DEFAULT *DeleteTopicQuotaRequest

func (p *DeleteTopicQuotaArgs) GetRequest() *DeleteTopicQuotaRequest {
	if !p.IsSetRequest() {
		return DeleteTopicQuotaArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *DeleteTopicQuotaArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *DeleteTopicQuotaArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteTopicQuotaArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &DeleteTopicQuotaRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *DeleteTopicQuotaArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteTopicQuota_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteTopicQuotaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *DeleteTopicQuotaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteTopicQuotaArgs(%+v)", *p)
}

type DeleteTopicQuotaResult struct {
	E *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewDeleteTopicQuotaResult() *DeleteTopicQuotaResult {
	return &DeleteTopicQuotaResult{}
}

var DeleteTopicQuotaResult_E_DEFAULT *common.GalaxyTalosException

func (p *DeleteTopicQuotaResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return DeleteTopicQuotaResult_E_DEFAULT
	}
	return p.E
}
func (p *DeleteTopicQuotaResult) IsSetE() bool {
	return p.E != nil
}

func (p *DeleteTopicQuotaResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteTopicQuotaResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *DeleteTopicQuotaResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteTopicQuota_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteTopicQuotaResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *DeleteTopicQuotaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteTopicQuotaResult(%+v)", *p)
}

type SetPermissionArgs struct {
	Request *SetPermissionRequest `thrift:"request,1" json:"request"`
}

func NewSetPermissionArgs() *SetPermissionArgs {
	return &SetPermissionArgs{}
}

var SetPermissionArgs_Request_DEFAULT *SetPermissionRequest

func (p *SetPermissionArgs) GetRequest() *SetPermissionRequest {
	if !p.IsSetRequest() {
		return SetPermissionArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SetPermissionArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SetPermissionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetPermissionArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &SetPermissionRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *SetPermissionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setPermission_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetPermissionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *SetPermissionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetPermissionArgs(%+v)", *p)
}

type SetPermissionResult struct {
	E *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewSetPermissionResult() *SetPermissionResult {
	return &SetPermissionResult{}
}

var SetPermissionResult_E_DEFAULT *common.GalaxyTalosException

func (p *SetPermissionResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return SetPermissionResult_E_DEFAULT
	}
	return p.E
}
func (p *SetPermissionResult) IsSetE() bool {
	return p.E != nil
}

func (p *SetPermissionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetPermissionResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *SetPermissionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setPermission_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetPermissionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *SetPermissionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetPermissionResult(%+v)", *p)
}

type RevokePermissionArgs struct {
	Request *RevokePermissionRequest `thrift:"request,1" json:"request"`
}

func NewRevokePermissionArgs() *RevokePermissionArgs {
	return &RevokePermissionArgs{}
}

var RevokePermissionArgs_Request_DEFAULT *RevokePermissionRequest

func (p *RevokePermissionArgs) GetRequest() *RevokePermissionRequest {
	if !p.IsSetRequest() {
		return RevokePermissionArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *RevokePermissionArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *RevokePermissionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RevokePermissionArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &RevokePermissionRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *RevokePermissionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("revokePermission_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RevokePermissionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *RevokePermissionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RevokePermissionArgs(%+v)", *p)
}

type RevokePermissionResult struct {
	E *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewRevokePermissionResult() *RevokePermissionResult {
	return &RevokePermissionResult{}
}

var RevokePermissionResult_E_DEFAULT *common.GalaxyTalosException

func (p *RevokePermissionResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return RevokePermissionResult_E_DEFAULT
	}
	return p.E
}
func (p *RevokePermissionResult) IsSetE() bool {
	return p.E != nil
}

func (p *RevokePermissionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RevokePermissionResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *RevokePermissionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("revokePermission_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RevokePermissionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *RevokePermissionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RevokePermissionResult(%+v)", *p)
}

type ListPermissionArgs struct {
	Request *ListPermissionRequest `thrift:"request,1" json:"request"`
}

func NewListPermissionArgs() *ListPermissionArgs {
	return &ListPermissionArgs{}
}

var ListPermissionArgs_Request_DEFAULT *ListPermissionRequest

func (p *ListPermissionArgs) GetRequest() *ListPermissionRequest {
	if !p.IsSetRequest() {
		return ListPermissionArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *ListPermissionArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ListPermissionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListPermissionArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &ListPermissionRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *ListPermissionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listPermission_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListPermissionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *ListPermissionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListPermissionArgs(%+v)", *p)
}

type ListPermissionResult struct {
	Success *ListPermissionResponse      `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewListPermissionResult() *ListPermissionResult {
	return &ListPermissionResult{}
}

var ListPermissionResult_Success_DEFAULT *ListPermissionResponse

func (p *ListPermissionResult) GetSuccess() *ListPermissionResponse {
	if !p.IsSetSuccess() {
		return ListPermissionResult_Success_DEFAULT
	}
	return p.Success
}

var ListPermissionResult_E_DEFAULT *common.GalaxyTalosException

func (p *ListPermissionResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return ListPermissionResult_E_DEFAULT
	}
	return p.E
}
func (p *ListPermissionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListPermissionResult) IsSetE() bool {
	return p.E != nil
}

func (p *ListPermissionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListPermissionResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ListPermissionResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *ListPermissionResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ListPermissionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listPermission_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListPermissionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *ListPermissionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ListPermissionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListPermissionResult(%+v)", *p)
}

type GetPermissionArgs struct {
	Request *GetPermissionRequest `thrift:"request,1" json:"request"`
}

func NewGetPermissionArgs() *GetPermissionArgs {
	return &GetPermissionArgs{}
}

var GetPermissionArgs_Request_DEFAULT *GetPermissionRequest

func (p *GetPermissionArgs) GetRequest() *GetPermissionRequest {
	if !p.IsSetRequest() {
		return GetPermissionArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *GetPermissionArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *GetPermissionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPermissionArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &GetPermissionRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *GetPermissionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getPermission_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPermissionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *GetPermissionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPermissionArgs(%+v)", *p)
}

type GetPermissionResult struct {
	Success *GetPermissionResponse       `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewGetPermissionResult() *GetPermissionResult {
	return &GetPermissionResult{}
}

var GetPermissionResult_Success_DEFAULT *GetPermissionResponse

func (p *GetPermissionResult) GetSuccess() *GetPermissionResponse {
	if !p.IsSetSuccess() {
		return GetPermissionResult_Success_DEFAULT
	}
	return p.Success
}

var GetPermissionResult_E_DEFAULT *common.GalaxyTalosException

func (p *GetPermissionResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return GetPermissionResult_E_DEFAULT
	}
	return p.E
}
func (p *GetPermissionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPermissionResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetPermissionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPermissionResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetPermissionResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetPermissionResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetPermissionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getPermission_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPermissionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPermissionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetPermissionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPermissionResult(%+v)", *p)
}

type AddSubResourceNameArgs struct {
	Request *AddSubResourceNameRequest `thrift:"request,1" json:"request"`
}

func NewAddSubResourceNameArgs() *AddSubResourceNameArgs {
	return &AddSubResourceNameArgs{}
}

var AddSubResourceNameArgs_Request_DEFAULT *AddSubResourceNameRequest

func (p *AddSubResourceNameArgs) GetRequest() *AddSubResourceNameRequest {
	if !p.IsSetRequest() {
		return AddSubResourceNameArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *AddSubResourceNameArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *AddSubResourceNameArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddSubResourceNameArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &AddSubResourceNameRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *AddSubResourceNameArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addSubResourceName_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AddSubResourceNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *AddSubResourceNameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddSubResourceNameArgs(%+v)", *p)
}

type AddSubResourceNameResult struct {
	E *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewAddSubResourceNameResult() *AddSubResourceNameResult {
	return &AddSubResourceNameResult{}
}

var AddSubResourceNameResult_E_DEFAULT *common.GalaxyTalosException

func (p *AddSubResourceNameResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return AddSubResourceNameResult_E_DEFAULT
	}
	return p.E
}
func (p *AddSubResourceNameResult) IsSetE() bool {
	return p.E != nil
}

func (p *AddSubResourceNameResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddSubResourceNameResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *AddSubResourceNameResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addSubResourceName_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AddSubResourceNameResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *AddSubResourceNameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddSubResourceNameResult(%+v)", *p)
}
