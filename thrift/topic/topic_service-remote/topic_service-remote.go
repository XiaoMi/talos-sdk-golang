// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	"thrift/topic"

	"github.com/XiaoMi/talos-sdk-golang/thrift/thrift"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  CreateTopicResponse createTopic(CreateTopicRequest request)")
	fmt.Fprintln(os.Stderr, "  CreateTopicResponse createReplicationTopic(CreateReplicationTopicRequest request)")
	fmt.Fprintln(os.Stderr, "  CreateTopicGroupResponse createTopicGroup(CreateTopicGroupRequest request)")
	fmt.Fprintln(os.Stderr, "  DescribeTopicGroupResponse describeTopicGroup(DescribeTopicGroupRequest request)")
	fmt.Fprintln(os.Stderr, "  void deleteTopicGroup(DeleteTopicGroupRequest request)")
	fmt.Fprintln(os.Stderr, "  ListTopicGroupResponse listTopicGroup(ListTopicGroupRequest request)")
	fmt.Fprintln(os.Stderr, "  void deleteTopic(DeleteTopicRequest request)")
	fmt.Fprintln(os.Stderr, "  void changeTopicAttribute(ChangeTopicAttributeRequest request)")
	fmt.Fprintln(os.Stderr, "  DescribeTopicResponse describeTopic(DescribeTopicRequest request)")
	fmt.Fprintln(os.Stderr, "  GetDescribeInfoResponse getDescribeInfo(GetDescribeInfoRequest request)")
	fmt.Fprintln(os.Stderr, "  GetTopicAttributeResponse getTopicAttribute(GetTopicAttributeRequest request)")
	fmt.Fprintln(os.Stderr, "  ListTopicsInfoResponse listTopicsInfo()")
	fmt.Fprintln(os.Stderr, "  ListTopicsResponse listTopics()")
	fmt.Fprintln(os.Stderr, "  ListTopicsResponse getBindTopics()")
	fmt.Fprintln(os.Stderr, "  void setTopicQuota(SetTopicQuotaRequest request)")
	fmt.Fprintln(os.Stderr, "  QueryTopicQuotaResponse queryTopicQuota(QueryTopicQuotaRequest request)")
	fmt.Fprintln(os.Stderr, "  void deleteTopicQuota(DeleteTopicQuotaRequest request)")
	fmt.Fprintln(os.Stderr, "  void setPermission(SetPermissionRequest request)")
	fmt.Fprintln(os.Stderr, "  void revokePermission(RevokePermissionRequest request)")
	fmt.Fprintln(os.Stderr, "  ListPermissionResponse listPermission(ListPermissionRequest request)")
	fmt.Fprintln(os.Stderr, "  GetPermissionResponse getPermission(GetPermissionRequest request)")
	fmt.Fprintln(os.Stderr, "  void addSubResourceName(AddSubResourceNameRequest request)")
	fmt.Fprintln(os.Stderr, "  Version getServiceVersion()")
	fmt.Fprintln(os.Stderr, "  void validClientVersion(Version clientVersion)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := topic.NewTopicServiceClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "createTopic":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateTopic requires 1 args")
			flag.Usage()
		}
		arg62 := flag.Arg(1)
		mbTrans63 := thrift.NewTMemoryBufferLen(len(arg62))
		defer mbTrans63.Close()
		_, err64 := mbTrans63.WriteString(arg62)
		if err64 != nil {
			Usage()
			return
		}
		factory65 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt66 := factory65.GetProtocol(mbTrans63)
		argvalue0 := topic.NewCreateTopicRequest()
		err67 := argvalue0.Read(jsProt66)
		if err67 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateTopic(value0))
		fmt.Print("\n")
		break
	case "createReplicationTopic":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateReplicationTopic requires 1 args")
			flag.Usage()
		}
		arg68 := flag.Arg(1)
		mbTrans69 := thrift.NewTMemoryBufferLen(len(arg68))
		defer mbTrans69.Close()
		_, err70 := mbTrans69.WriteString(arg68)
		if err70 != nil {
			Usage()
			return
		}
		factory71 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt72 := factory71.GetProtocol(mbTrans69)
		argvalue0 := topic.NewCreateReplicationTopicRequest()
		err73 := argvalue0.Read(jsProt72)
		if err73 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateReplicationTopic(value0))
		fmt.Print("\n")
		break
	case "createTopicGroup":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateTopicGroup requires 1 args")
			flag.Usage()
		}
		arg74 := flag.Arg(1)
		mbTrans75 := thrift.NewTMemoryBufferLen(len(arg74))
		defer mbTrans75.Close()
		_, err76 := mbTrans75.WriteString(arg74)
		if err76 != nil {
			Usage()
			return
		}
		factory77 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt78 := factory77.GetProtocol(mbTrans75)
		argvalue0 := topic.NewCreateTopicGroupRequest()
		err79 := argvalue0.Read(jsProt78)
		if err79 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateTopicGroup(value0))
		fmt.Print("\n")
		break
	case "describeTopicGroup":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DescribeTopicGroup requires 1 args")
			flag.Usage()
		}
		arg80 := flag.Arg(1)
		mbTrans81 := thrift.NewTMemoryBufferLen(len(arg80))
		defer mbTrans81.Close()
		_, err82 := mbTrans81.WriteString(arg80)
		if err82 != nil {
			Usage()
			return
		}
		factory83 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt84 := factory83.GetProtocol(mbTrans81)
		argvalue0 := topic.NewDescribeTopicGroupRequest()
		err85 := argvalue0.Read(jsProt84)
		if err85 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DescribeTopicGroup(value0))
		fmt.Print("\n")
		break
	case "deleteTopicGroup":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DeleteTopicGroup requires 1 args")
			flag.Usage()
		}
		arg86 := flag.Arg(1)
		mbTrans87 := thrift.NewTMemoryBufferLen(len(arg86))
		defer mbTrans87.Close()
		_, err88 := mbTrans87.WriteString(arg86)
		if err88 != nil {
			Usage()
			return
		}
		factory89 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt90 := factory89.GetProtocol(mbTrans87)
		argvalue0 := topic.NewDeleteTopicGroupRequest()
		err91 := argvalue0.Read(jsProt90)
		if err91 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DeleteTopicGroup(value0))
		fmt.Print("\n")
		break
	case "listTopicGroup":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ListTopicGroup requires 1 args")
			flag.Usage()
		}
		arg92 := flag.Arg(1)
		mbTrans93 := thrift.NewTMemoryBufferLen(len(arg92))
		defer mbTrans93.Close()
		_, err94 := mbTrans93.WriteString(arg92)
		if err94 != nil {
			Usage()
			return
		}
		factory95 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt96 := factory95.GetProtocol(mbTrans93)
		argvalue0 := topic.NewListTopicGroupRequest()
		err97 := argvalue0.Read(jsProt96)
		if err97 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ListTopicGroup(value0))
		fmt.Print("\n")
		break
	case "deleteTopic":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DeleteTopic requires 1 args")
			flag.Usage()
		}
		arg98 := flag.Arg(1)
		mbTrans99 := thrift.NewTMemoryBufferLen(len(arg98))
		defer mbTrans99.Close()
		_, err100 := mbTrans99.WriteString(arg98)
		if err100 != nil {
			Usage()
			return
		}
		factory101 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt102 := factory101.GetProtocol(mbTrans99)
		argvalue0 := topic.NewDeleteTopicRequest()
		err103 := argvalue0.Read(jsProt102)
		if err103 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DeleteTopic(value0))
		fmt.Print("\n")
		break
	case "changeTopicAttribute":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ChangeTopicAttribute requires 1 args")
			flag.Usage()
		}
		arg104 := flag.Arg(1)
		mbTrans105 := thrift.NewTMemoryBufferLen(len(arg104))
		defer mbTrans105.Close()
		_, err106 := mbTrans105.WriteString(arg104)
		if err106 != nil {
			Usage()
			return
		}
		factory107 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt108 := factory107.GetProtocol(mbTrans105)
		argvalue0 := topic.NewChangeTopicAttributeRequest()
		err109 := argvalue0.Read(jsProt108)
		if err109 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ChangeTopicAttribute(value0))
		fmt.Print("\n")
		break
	case "describeTopic":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DescribeTopic requires 1 args")
			flag.Usage()
		}
		arg110 := flag.Arg(1)
		mbTrans111 := thrift.NewTMemoryBufferLen(len(arg110))
		defer mbTrans111.Close()
		_, err112 := mbTrans111.WriteString(arg110)
		if err112 != nil {
			Usage()
			return
		}
		factory113 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt114 := factory113.GetProtocol(mbTrans111)
		argvalue0 := topic.NewDescribeTopicRequest()
		err115 := argvalue0.Read(jsProt114)
		if err115 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DescribeTopic(value0))
		fmt.Print("\n")
		break
	case "getDescribeInfo":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetDescribeInfo requires 1 args")
			flag.Usage()
		}
		arg116 := flag.Arg(1)
		mbTrans117 := thrift.NewTMemoryBufferLen(len(arg116))
		defer mbTrans117.Close()
		_, err118 := mbTrans117.WriteString(arg116)
		if err118 != nil {
			Usage()
			return
		}
		factory119 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt120 := factory119.GetProtocol(mbTrans117)
		argvalue0 := topic.NewGetDescribeInfoRequest()
		err121 := argvalue0.Read(jsProt120)
		if err121 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetDescribeInfo(value0))
		fmt.Print("\n")
		break
	case "getTopicAttribute":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTopicAttribute requires 1 args")
			flag.Usage()
		}
		arg122 := flag.Arg(1)
		mbTrans123 := thrift.NewTMemoryBufferLen(len(arg122))
		defer mbTrans123.Close()
		_, err124 := mbTrans123.WriteString(arg122)
		if err124 != nil {
			Usage()
			return
		}
		factory125 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt126 := factory125.GetProtocol(mbTrans123)
		argvalue0 := topic.NewGetTopicAttributeRequest()
		err127 := argvalue0.Read(jsProt126)
		if err127 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetTopicAttribute(value0))
		fmt.Print("\n")
		break
	case "listTopicsInfo":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "ListTopicsInfo requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.ListTopicsInfo())
		fmt.Print("\n")
		break
	case "listTopics":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "ListTopics requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.ListTopics())
		fmt.Print("\n")
		break
	case "getBindTopics":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetBindTopics requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetBindTopics())
		fmt.Print("\n")
		break
	case "setTopicQuota":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "SetTopicQuota requires 1 args")
			flag.Usage()
		}
		arg128 := flag.Arg(1)
		mbTrans129 := thrift.NewTMemoryBufferLen(len(arg128))
		defer mbTrans129.Close()
		_, err130 := mbTrans129.WriteString(arg128)
		if err130 != nil {
			Usage()
			return
		}
		factory131 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt132 := factory131.GetProtocol(mbTrans129)
		argvalue0 := topic.NewSetTopicQuotaRequest()
		err133 := argvalue0.Read(jsProt132)
		if err133 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.SetTopicQuota(value0))
		fmt.Print("\n")
		break
	case "queryTopicQuota":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "QueryTopicQuota requires 1 args")
			flag.Usage()
		}
		arg134 := flag.Arg(1)
		mbTrans135 := thrift.NewTMemoryBufferLen(len(arg134))
		defer mbTrans135.Close()
		_, err136 := mbTrans135.WriteString(arg134)
		if err136 != nil {
			Usage()
			return
		}
		factory137 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt138 := factory137.GetProtocol(mbTrans135)
		argvalue0 := topic.NewQueryTopicQuotaRequest()
		err139 := argvalue0.Read(jsProt138)
		if err139 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.QueryTopicQuota(value0))
		fmt.Print("\n")
		break
	case "deleteTopicQuota":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DeleteTopicQuota requires 1 args")
			flag.Usage()
		}
		arg140 := flag.Arg(1)
		mbTrans141 := thrift.NewTMemoryBufferLen(len(arg140))
		defer mbTrans141.Close()
		_, err142 := mbTrans141.WriteString(arg140)
		if err142 != nil {
			Usage()
			return
		}
		factory143 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt144 := factory143.GetProtocol(mbTrans141)
		argvalue0 := topic.NewDeleteTopicQuotaRequest()
		err145 := argvalue0.Read(jsProt144)
		if err145 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DeleteTopicQuota(value0))
		fmt.Print("\n")
		break
	case "setPermission":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "SetPermission requires 1 args")
			flag.Usage()
		}
		arg146 := flag.Arg(1)
		mbTrans147 := thrift.NewTMemoryBufferLen(len(arg146))
		defer mbTrans147.Close()
		_, err148 := mbTrans147.WriteString(arg146)
		if err148 != nil {
			Usage()
			return
		}
		factory149 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt150 := factory149.GetProtocol(mbTrans147)
		argvalue0 := topic.NewSetPermissionRequest()
		err151 := argvalue0.Read(jsProt150)
		if err151 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.SetPermission(value0))
		fmt.Print("\n")
		break
	case "revokePermission":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RevokePermission requires 1 args")
			flag.Usage()
		}
		arg152 := flag.Arg(1)
		mbTrans153 := thrift.NewTMemoryBufferLen(len(arg152))
		defer mbTrans153.Close()
		_, err154 := mbTrans153.WriteString(arg152)
		if err154 != nil {
			Usage()
			return
		}
		factory155 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt156 := factory155.GetProtocol(mbTrans153)
		argvalue0 := topic.NewRevokePermissionRequest()
		err157 := argvalue0.Read(jsProt156)
		if err157 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.RevokePermission(value0))
		fmt.Print("\n")
		break
	case "listPermission":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ListPermission requires 1 args")
			flag.Usage()
		}
		arg158 := flag.Arg(1)
		mbTrans159 := thrift.NewTMemoryBufferLen(len(arg158))
		defer mbTrans159.Close()
		_, err160 := mbTrans159.WriteString(arg158)
		if err160 != nil {
			Usage()
			return
		}
		factory161 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt162 := factory161.GetProtocol(mbTrans159)
		argvalue0 := topic.NewListPermissionRequest()
		err163 := argvalue0.Read(jsProt162)
		if err163 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ListPermission(value0))
		fmt.Print("\n")
		break
	case "getPermission":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPermission requires 1 args")
			flag.Usage()
		}
		arg164 := flag.Arg(1)
		mbTrans165 := thrift.NewTMemoryBufferLen(len(arg164))
		defer mbTrans165.Close()
		_, err166 := mbTrans165.WriteString(arg164)
		if err166 != nil {
			Usage()
			return
		}
		factory167 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt168 := factory167.GetProtocol(mbTrans165)
		argvalue0 := topic.NewGetPermissionRequest()
		err169 := argvalue0.Read(jsProt168)
		if err169 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPermission(value0))
		fmt.Print("\n")
		break
	case "addSubResourceName":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddSubResourceName requires 1 args")
			flag.Usage()
		}
		arg170 := flag.Arg(1)
		mbTrans171 := thrift.NewTMemoryBufferLen(len(arg170))
		defer mbTrans171.Close()
		_, err172 := mbTrans171.WriteString(arg170)
		if err172 != nil {
			Usage()
			return
		}
		factory173 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt174 := factory173.GetProtocol(mbTrans171)
		argvalue0 := topic.NewAddSubResourceNameRequest()
		err175 := argvalue0.Read(jsProt174)
		if err175 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddSubResourceName(value0))
		fmt.Print("\n")
		break
	case "getServiceVersion":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetServiceVersion requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetServiceVersion())
		fmt.Print("\n")
		break
	case "validClientVersion":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ValidClientVersion requires 1 args")
			flag.Usage()
		}
		arg176 := flag.Arg(1)
		mbTrans177 := thrift.NewTMemoryBufferLen(len(arg176))
		defer mbTrans177.Close()
		_, err178 := mbTrans177.WriteString(arg176)
		if err178 != nil {
			Usage()
			return
		}
		factory179 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt180 := factory179.GetProtocol(mbTrans177)
		argvalue0 := topic.NewVersion()
		err181 := argvalue0.Read(jsProt180)
		if err181 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ValidClientVersion(value0))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
