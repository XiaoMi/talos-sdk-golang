// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"flag"
	"fmt"
	"github.com/XiaoMi/talos-sdk-golang/thrift/thrift"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	"thrift/topic"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  CreateTopicResponse createTopic(CreateTopicRequest request)")
	fmt.Fprintln(os.Stderr, "  CreateTopicResponse createReplicationTopic(CreateReplicationTopicRequest request)")
	fmt.Fprintln(os.Stderr, "  CreateTopicGroupResponse createTopicGroup(CreateTopicGroupRequest request)")
	fmt.Fprintln(os.Stderr, "  DescribeTopicGroupResponse describeTopicGroup(DescribeTopicGroupRequest request)")
	fmt.Fprintln(os.Stderr, "  void deleteTopicGroup(DeleteTopicGroupRequest request)")
	fmt.Fprintln(os.Stderr, "  ListTopicGroupResponse listTopicGroup()")
	fmt.Fprintln(os.Stderr, "  void updateTopicGroup(UpdateTopicGroupRequest request)")
	fmt.Fprintln(os.Stderr, "  void deleteTopic(DeleteTopicRequest request)")
	fmt.Fprintln(os.Stderr, "  LookupTopicsResponse lookupTopics(LookupTopicsRequest request)")
	fmt.Fprintln(os.Stderr, "  MatchTopicsResponse matchTopics(MatchTopicsRequest request)")
	fmt.Fprintln(os.Stderr, "  void changeTopicAttribute(ChangeTopicAttributeRequest request)")
	fmt.Fprintln(os.Stderr, "  void deleteTopicAttribute(DeleteTopicAttributeRequest request)")
	fmt.Fprintln(os.Stderr, "  void changeTopicOwnerInfo(ChangeTopicOwnerInfoRequest request)")
	fmt.Fprintln(os.Stderr, "  void changeReplicationTopicSourceInfo(ChangeReplicationTopicSourceInfoRequest request)")
	fmt.Fprintln(os.Stderr, "  DescribeTopicResponse describeTopic(DescribeTopicRequest request)")
	fmt.Fprintln(os.Stderr, "  GetDescribeInfoResponse getDescribeInfo(GetDescribeInfoRequest request)")
	fmt.Fprintln(os.Stderr, "  GetTopicAttributeResponse getTopicAttribute(GetTopicAttributeRequest request)")
	fmt.Fprintln(os.Stderr, "  ListTopicsInfoResponse listTopicsInfo()")
	fmt.Fprintln(os.Stderr, "  ListTopicsResponse listTopics()")
	fmt.Fprintln(os.Stderr, "  ListTopicsResponse getBindTopics()")
	fmt.Fprintln(os.Stderr, "  void setTopicQuota(SetTopicQuotaRequest request)")
	fmt.Fprintln(os.Stderr, "  QueryTopicQuotaResponse queryTopicQuota(QueryTopicQuotaRequest request)")
	fmt.Fprintln(os.Stderr, "  void deleteTopicQuota(DeleteTopicQuotaRequest request)")
	fmt.Fprintln(os.Stderr, "  void setPermission(SetPermissionRequest request)")
	fmt.Fprintln(os.Stderr, "  void revokePermission(RevokePermissionRequest request)")
	fmt.Fprintln(os.Stderr, "  ListPermissionResponse listPermission(ListPermissionRequest request)")
	fmt.Fprintln(os.Stderr, "  GetPermissionResponse getPermission(GetPermissionRequest request)")
	fmt.Fprintln(os.Stderr, "  void addSubResourceName(AddSubResourceNameRequest request)")
	fmt.Fprintln(os.Stderr, "  Version getServiceVersion()")
	fmt.Fprintln(os.Stderr, "  void validClientVersion(Version clientVersion)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := topic.NewTopicServiceClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "createTopic":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateTopic requires 1 args")
			flag.Usage()
		}
		arg78 := flag.Arg(1)
		mbTrans79 := thrift.NewTMemoryBufferLen(len(arg78))
		defer mbTrans79.Close()
		_, err80 := mbTrans79.WriteString(arg78)
		if err80 != nil {
			Usage()
			return
		}
		factory81 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt82 := factory81.GetProtocol(mbTrans79)
		argvalue0 := topic.NewCreateTopicRequest()
		err83 := argvalue0.Read(jsProt82)
		if err83 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateTopic(value0))
		fmt.Print("\n")
		break
	case "createReplicationTopic":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateReplicationTopic requires 1 args")
			flag.Usage()
		}
		arg84 := flag.Arg(1)
		mbTrans85 := thrift.NewTMemoryBufferLen(len(arg84))
		defer mbTrans85.Close()
		_, err86 := mbTrans85.WriteString(arg84)
		if err86 != nil {
			Usage()
			return
		}
		factory87 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt88 := factory87.GetProtocol(mbTrans85)
		argvalue0 := topic.NewCreateReplicationTopicRequest()
		err89 := argvalue0.Read(jsProt88)
		if err89 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateReplicationTopic(value0))
		fmt.Print("\n")
		break
	case "createTopicGroup":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateTopicGroup requires 1 args")
			flag.Usage()
		}
		arg90 := flag.Arg(1)
		mbTrans91 := thrift.NewTMemoryBufferLen(len(arg90))
		defer mbTrans91.Close()
		_, err92 := mbTrans91.WriteString(arg90)
		if err92 != nil {
			Usage()
			return
		}
		factory93 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt94 := factory93.GetProtocol(mbTrans91)
		argvalue0 := topic.NewCreateTopicGroupRequest()
		err95 := argvalue0.Read(jsProt94)
		if err95 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateTopicGroup(value0))
		fmt.Print("\n")
		break
	case "describeTopicGroup":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DescribeTopicGroup requires 1 args")
			flag.Usage()
		}
		arg96 := flag.Arg(1)
		mbTrans97 := thrift.NewTMemoryBufferLen(len(arg96))
		defer mbTrans97.Close()
		_, err98 := mbTrans97.WriteString(arg96)
		if err98 != nil {
			Usage()
			return
		}
		factory99 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt100 := factory99.GetProtocol(mbTrans97)
		argvalue0 := topic.NewDescribeTopicGroupRequest()
		err101 := argvalue0.Read(jsProt100)
		if err101 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DescribeTopicGroup(value0))
		fmt.Print("\n")
		break
	case "deleteTopicGroup":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DeleteTopicGroup requires 1 args")
			flag.Usage()
		}
		arg102 := flag.Arg(1)
		mbTrans103 := thrift.NewTMemoryBufferLen(len(arg102))
		defer mbTrans103.Close()
		_, err104 := mbTrans103.WriteString(arg102)
		if err104 != nil {
			Usage()
			return
		}
		factory105 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt106 := factory105.GetProtocol(mbTrans103)
		argvalue0 := topic.NewDeleteTopicGroupRequest()
		err107 := argvalue0.Read(jsProt106)
		if err107 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DeleteTopicGroup(value0))
		fmt.Print("\n")
		break
	case "listTopicGroup":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "ListTopicGroup requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.ListTopicGroup())
		fmt.Print("\n")
		break
	case "updateTopicGroup":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UpdateTopicGroup requires 1 args")
			flag.Usage()
		}
		arg108 := flag.Arg(1)
		mbTrans109 := thrift.NewTMemoryBufferLen(len(arg108))
		defer mbTrans109.Close()
		_, err110 := mbTrans109.WriteString(arg108)
		if err110 != nil {
			Usage()
			return
		}
		factory111 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt112 := factory111.GetProtocol(mbTrans109)
		argvalue0 := topic.NewUpdateTopicGroupRequest()
		err113 := argvalue0.Read(jsProt112)
		if err113 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.UpdateTopicGroup(value0))
		fmt.Print("\n")
		break
	case "deleteTopic":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DeleteTopic requires 1 args")
			flag.Usage()
		}
		arg114 := flag.Arg(1)
		mbTrans115 := thrift.NewTMemoryBufferLen(len(arg114))
		defer mbTrans115.Close()
		_, err116 := mbTrans115.WriteString(arg114)
		if err116 != nil {
			Usage()
			return
		}
		factory117 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt118 := factory117.GetProtocol(mbTrans115)
		argvalue0 := topic.NewDeleteTopicRequest()
		err119 := argvalue0.Read(jsProt118)
		if err119 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DeleteTopic(value0))
		fmt.Print("\n")
		break
	case "lookupTopics":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "LookupTopics requires 1 args")
			flag.Usage()
		}
		arg120 := flag.Arg(1)
		mbTrans121 := thrift.NewTMemoryBufferLen(len(arg120))
		defer mbTrans121.Close()
		_, err122 := mbTrans121.WriteString(arg120)
		if err122 != nil {
			Usage()
			return
		}
		factory123 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt124 := factory123.GetProtocol(mbTrans121)
		argvalue0 := topic.NewLookupTopicsRequest()
		err125 := argvalue0.Read(jsProt124)
		if err125 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.LookupTopics(value0))
		fmt.Print("\n")
		break
	case "matchTopics":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "MatchTopics requires 1 args")
			flag.Usage()
		}
		arg126 := flag.Arg(1)
		mbTrans127 := thrift.NewTMemoryBufferLen(len(arg126))
		defer mbTrans127.Close()
		_, err128 := mbTrans127.WriteString(arg126)
		if err128 != nil {
			Usage()
			return
		}
		factory129 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt130 := factory129.GetProtocol(mbTrans127)
		argvalue0 := topic.NewMatchTopicsRequest()
		err131 := argvalue0.Read(jsProt130)
		if err131 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.MatchTopics(value0))
		fmt.Print("\n")
		break
	case "changeTopicAttribute":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ChangeTopicAttribute requires 1 args")
			flag.Usage()
		}
		arg132 := flag.Arg(1)
		mbTrans133 := thrift.NewTMemoryBufferLen(len(arg132))
		defer mbTrans133.Close()
		_, err134 := mbTrans133.WriteString(arg132)
		if err134 != nil {
			Usage()
			return
		}
		factory135 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt136 := factory135.GetProtocol(mbTrans133)
		argvalue0 := topic.NewChangeTopicAttributeRequest()
		err137 := argvalue0.Read(jsProt136)
		if err137 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ChangeTopicAttribute(value0))
		fmt.Print("\n")
		break
	case "deleteTopicAttribute":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DeleteTopicAttribute requires 1 args")
			flag.Usage()
		}
		arg138 := flag.Arg(1)
		mbTrans139 := thrift.NewTMemoryBufferLen(len(arg138))
		defer mbTrans139.Close()
		_, err140 := mbTrans139.WriteString(arg138)
		if err140 != nil {
			Usage()
			return
		}
		factory141 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt142 := factory141.GetProtocol(mbTrans139)
		argvalue0 := topic.NewDeleteTopicAttributeRequest()
		err143 := argvalue0.Read(jsProt142)
		if err143 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DeleteTopicAttribute(value0))
		fmt.Print("\n")
		break
	case "changeTopicOwnerInfo":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ChangeTopicOwnerInfo requires 1 args")
			flag.Usage()
		}
		arg144 := flag.Arg(1)
		mbTrans145 := thrift.NewTMemoryBufferLen(len(arg144))
		defer mbTrans145.Close()
		_, err146 := mbTrans145.WriteString(arg144)
		if err146 != nil {
			Usage()
			return
		}
		factory147 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt148 := factory147.GetProtocol(mbTrans145)
		argvalue0 := topic.NewChangeTopicOwnerInfoRequest()
		err149 := argvalue0.Read(jsProt148)
		if err149 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ChangeTopicOwnerInfo(value0))
		fmt.Print("\n")
		break
	case "changeReplicationTopicSourceInfo":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ChangeReplicationTopicSourceInfo requires 1 args")
			flag.Usage()
		}
		arg150 := flag.Arg(1)
		mbTrans151 := thrift.NewTMemoryBufferLen(len(arg150))
		defer mbTrans151.Close()
		_, err152 := mbTrans151.WriteString(arg150)
		if err152 != nil {
			Usage()
			return
		}
		factory153 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt154 := factory153.GetProtocol(mbTrans151)
		argvalue0 := topic.NewChangeReplicationTopicSourceInfoRequest()
		err155 := argvalue0.Read(jsProt154)
		if err155 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ChangeReplicationTopicSourceInfo(value0))
		fmt.Print("\n")
		break
	case "describeTopic":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DescribeTopic requires 1 args")
			flag.Usage()
		}
		arg156 := flag.Arg(1)
		mbTrans157 := thrift.NewTMemoryBufferLen(len(arg156))
		defer mbTrans157.Close()
		_, err158 := mbTrans157.WriteString(arg156)
		if err158 != nil {
			Usage()
			return
		}
		factory159 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt160 := factory159.GetProtocol(mbTrans157)
		argvalue0 := topic.NewDescribeTopicRequest()
		err161 := argvalue0.Read(jsProt160)
		if err161 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DescribeTopic(value0))
		fmt.Print("\n")
		break
	case "getDescribeInfo":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetDescribeInfo requires 1 args")
			flag.Usage()
		}
		arg162 := flag.Arg(1)
		mbTrans163 := thrift.NewTMemoryBufferLen(len(arg162))
		defer mbTrans163.Close()
		_, err164 := mbTrans163.WriteString(arg162)
		if err164 != nil {
			Usage()
			return
		}
		factory165 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt166 := factory165.GetProtocol(mbTrans163)
		argvalue0 := topic.NewGetDescribeInfoRequest()
		err167 := argvalue0.Read(jsProt166)
		if err167 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetDescribeInfo(value0))
		fmt.Print("\n")
		break
	case "getTopicAttribute":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTopicAttribute requires 1 args")
			flag.Usage()
		}
		arg168 := flag.Arg(1)
		mbTrans169 := thrift.NewTMemoryBufferLen(len(arg168))
		defer mbTrans169.Close()
		_, err170 := mbTrans169.WriteString(arg168)
		if err170 != nil {
			Usage()
			return
		}
		factory171 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt172 := factory171.GetProtocol(mbTrans169)
		argvalue0 := topic.NewGetTopicAttributeRequest()
		err173 := argvalue0.Read(jsProt172)
		if err173 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetTopicAttribute(value0))
		fmt.Print("\n")
		break
	case "listTopicsInfo":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "ListTopicsInfo requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.ListTopicsInfo())
		fmt.Print("\n")
		break
	case "listTopics":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "ListTopics requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.ListTopics())
		fmt.Print("\n")
		break
	case "getBindTopics":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetBindTopics requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetBindTopics())
		fmt.Print("\n")
		break
	case "setTopicQuota":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "SetTopicQuota requires 1 args")
			flag.Usage()
		}
		arg174 := flag.Arg(1)
		mbTrans175 := thrift.NewTMemoryBufferLen(len(arg174))
		defer mbTrans175.Close()
		_, err176 := mbTrans175.WriteString(arg174)
		if err176 != nil {
			Usage()
			return
		}
		factory177 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt178 := factory177.GetProtocol(mbTrans175)
		argvalue0 := topic.NewSetTopicQuotaRequest()
		err179 := argvalue0.Read(jsProt178)
		if err179 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.SetTopicQuota(value0))
		fmt.Print("\n")
		break
	case "queryTopicQuota":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "QueryTopicQuota requires 1 args")
			flag.Usage()
		}
		arg180 := flag.Arg(1)
		mbTrans181 := thrift.NewTMemoryBufferLen(len(arg180))
		defer mbTrans181.Close()
		_, err182 := mbTrans181.WriteString(arg180)
		if err182 != nil {
			Usage()
			return
		}
		factory183 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt184 := factory183.GetProtocol(mbTrans181)
		argvalue0 := topic.NewQueryTopicQuotaRequest()
		err185 := argvalue0.Read(jsProt184)
		if err185 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.QueryTopicQuota(value0))
		fmt.Print("\n")
		break
	case "deleteTopicQuota":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DeleteTopicQuota requires 1 args")
			flag.Usage()
		}
		arg186 := flag.Arg(1)
		mbTrans187 := thrift.NewTMemoryBufferLen(len(arg186))
		defer mbTrans187.Close()
		_, err188 := mbTrans187.WriteString(arg186)
		if err188 != nil {
			Usage()
			return
		}
		factory189 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt190 := factory189.GetProtocol(mbTrans187)
		argvalue0 := topic.NewDeleteTopicQuotaRequest()
		err191 := argvalue0.Read(jsProt190)
		if err191 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DeleteTopicQuota(value0))
		fmt.Print("\n")
		break
	case "setPermission":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "SetPermission requires 1 args")
			flag.Usage()
		}
		arg192 := flag.Arg(1)
		mbTrans193 := thrift.NewTMemoryBufferLen(len(arg192))
		defer mbTrans193.Close()
		_, err194 := mbTrans193.WriteString(arg192)
		if err194 != nil {
			Usage()
			return
		}
		factory195 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt196 := factory195.GetProtocol(mbTrans193)
		argvalue0 := topic.NewSetPermissionRequest()
		err197 := argvalue0.Read(jsProt196)
		if err197 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.SetPermission(value0))
		fmt.Print("\n")
		break
	case "revokePermission":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RevokePermission requires 1 args")
			flag.Usage()
		}
		arg198 := flag.Arg(1)
		mbTrans199 := thrift.NewTMemoryBufferLen(len(arg198))
		defer mbTrans199.Close()
		_, err200 := mbTrans199.WriteString(arg198)
		if err200 != nil {
			Usage()
			return
		}
		factory201 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt202 := factory201.GetProtocol(mbTrans199)
		argvalue0 := topic.NewRevokePermissionRequest()
		err203 := argvalue0.Read(jsProt202)
		if err203 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.RevokePermission(value0))
		fmt.Print("\n")
		break
	case "listPermission":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ListPermission requires 1 args")
			flag.Usage()
		}
		arg204 := flag.Arg(1)
		mbTrans205 := thrift.NewTMemoryBufferLen(len(arg204))
		defer mbTrans205.Close()
		_, err206 := mbTrans205.WriteString(arg204)
		if err206 != nil {
			Usage()
			return
		}
		factory207 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt208 := factory207.GetProtocol(mbTrans205)
		argvalue0 := topic.NewListPermissionRequest()
		err209 := argvalue0.Read(jsProt208)
		if err209 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ListPermission(value0))
		fmt.Print("\n")
		break
	case "getPermission":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPermission requires 1 args")
			flag.Usage()
		}
		arg210 := flag.Arg(1)
		mbTrans211 := thrift.NewTMemoryBufferLen(len(arg210))
		defer mbTrans211.Close()
		_, err212 := mbTrans211.WriteString(arg210)
		if err212 != nil {
			Usage()
			return
		}
		factory213 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt214 := factory213.GetProtocol(mbTrans211)
		argvalue0 := topic.NewGetPermissionRequest()
		err215 := argvalue0.Read(jsProt214)
		if err215 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPermission(value0))
		fmt.Print("\n")
		break
	case "addSubResourceName":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddSubResourceName requires 1 args")
			flag.Usage()
		}
		arg216 := flag.Arg(1)
		mbTrans217 := thrift.NewTMemoryBufferLen(len(arg216))
		defer mbTrans217.Close()
		_, err218 := mbTrans217.WriteString(arg216)
		if err218 != nil {
			Usage()
			return
		}
		factory219 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt220 := factory219.GetProtocol(mbTrans217)
		argvalue0 := topic.NewAddSubResourceNameRequest()
		err221 := argvalue0.Read(jsProt220)
		if err221 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddSubResourceName(value0))
		fmt.Print("\n")
		break
	case "getServiceVersion":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetServiceVersion requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetServiceVersion())
		fmt.Print("\n")
		break
	case "validClientVersion":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ValidClientVersion requires 1 args")
			flag.Usage()
		}
		arg222 := flag.Arg(1)
		mbTrans223 := thrift.NewTMemoryBufferLen(len(arg222))
		defer mbTrans223.Close()
		_, err224 := mbTrans223.WriteString(arg222)
		if err224 != nil {
			Usage()
			return
		}
		factory225 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt226 := factory225.GetProtocol(mbTrans223)
		argvalue0 := topic.NewVersion()
		err227 := argvalue0.Read(jsProt226)
		if err227 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ValidClientVersion(value0))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
