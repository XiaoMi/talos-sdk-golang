// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package topic

import (
	"bytes"
	"fmt"
	"github.com/XiaoMi/talos-sdk-golang/thrift/authorization"
	"github.com/XiaoMi/talos-sdk-golang/thrift/common"
	"github.com/XiaoMi/talos-sdk-golang/thrift/quota"
	"github.com/XiaoMi/talos-sdk-golang/thrift/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = common.GoUnusedProtection__
var _ = quota.GoUnusedProtection__
var _ = authorization.GoUnusedProtection__
var GoUnusedProtection__ int

type TopicStatus int64

const (
	TopicStatus_CREATING TopicStatus = 0
	TopicStatus_ACTIVE   TopicStatus = 1
	TopicStatus_DELETING TopicStatus = 2
	TopicStatus_DELETED  TopicStatus = 3
)

func (p TopicStatus) String() string {
	switch p {
	case TopicStatus_CREATING:
		return "TopicStatus_CREATING"
	case TopicStatus_ACTIVE:
		return "TopicStatus_ACTIVE"
	case TopicStatus_DELETING:
		return "TopicStatus_DELETING"
	case TopicStatus_DELETED:
		return "TopicStatus_DELETED"
	}
	return "<UNSET>"
}

func TopicStatusFromString(s string) (TopicStatus, error) {
	switch s {
	case "TopicStatus_CREATING":
		return TopicStatus_CREATING, nil
	case "TopicStatus_ACTIVE":
		return TopicStatus_ACTIVE, nil
	case "TopicStatus_DELETING":
		return TopicStatus_DELETING, nil
	case "TopicStatus_DELETED":
		return TopicStatus_DELETED, nil
	}
	return TopicStatus(0), fmt.Errorf("not a valid TopicStatus string")
}

func TopicStatusPtr(v TopicStatus) *TopicStatus { return &v }

type TopicGroupType int64

const (
	TopicGroupType_TOPIC_PATTERN TopicGroupType = 0
	TopicGroupType_TOPIC_SET     TopicGroupType = 1
)

func (p TopicGroupType) String() string {
	switch p {
	case TopicGroupType_TOPIC_PATTERN:
		return "TopicGroupType_TOPIC_PATTERN"
	case TopicGroupType_TOPIC_SET:
		return "TopicGroupType_TOPIC_SET"
	}
	return "<UNSET>"
}

func TopicGroupTypeFromString(s string) (TopicGroupType, error) {
	switch s {
	case "TopicGroupType_TOPIC_PATTERN":
		return TopicGroupType_TOPIC_PATTERN, nil
	case "TopicGroupType_TOPIC_SET":
		return TopicGroupType_TOPIC_SET, nil
	}
	return TopicGroupType(0), fmt.Errorf("not a valid TopicGroupType string")
}

func TopicGroupTypePtr(v TopicGroupType) *TopicGroupType { return &v }

type Permission int64

const (
	Permission_NONE                                Permission = 0
	Permission_PUT_MESSAGE                         Permission = 1
	Permission_GET_MESSAGE                         Permission = 2
	Permission_FULL_MESSAGE_CONTROL                Permission = 3
	Permission_DESCRIBE_TOPIC                      Permission = 4
	Permission_PUT_MESSAGE_AND_DESCRIBE_TOPIC      Permission = 5
	Permission_GET_MESSAGE_AND_DESCRIBE_TOPIC      Permission = 6
	Permission_TOPIC_READ_AND_MESSAGE_FULL_CONTROL Permission = 7
	Permission_CHANGE_TOPIC                        Permission = 8
	Permission_FULL_TOPIC_CONTROL                  Permission = 12
	Permission_FULL_CONTROL                        Permission = 15
	Permission_CHANGE_PERMISSION                   Permission = 16
	Permission_ADMIN                               Permission = 31
)

func (p Permission) String() string {
	switch p {
	case Permission_NONE:
		return "Permission_NONE"
	case Permission_PUT_MESSAGE:
		return "Permission_PUT_MESSAGE"
	case Permission_GET_MESSAGE:
		return "Permission_GET_MESSAGE"
	case Permission_FULL_MESSAGE_CONTROL:
		return "Permission_FULL_MESSAGE_CONTROL"
	case Permission_DESCRIBE_TOPIC:
		return "Permission_DESCRIBE_TOPIC"
	case Permission_PUT_MESSAGE_AND_DESCRIBE_TOPIC:
		return "Permission_PUT_MESSAGE_AND_DESCRIBE_TOPIC"
	case Permission_GET_MESSAGE_AND_DESCRIBE_TOPIC:
		return "Permission_GET_MESSAGE_AND_DESCRIBE_TOPIC"
	case Permission_TOPIC_READ_AND_MESSAGE_FULL_CONTROL:
		return "Permission_TOPIC_READ_AND_MESSAGE_FULL_CONTROL"
	case Permission_CHANGE_TOPIC:
		return "Permission_CHANGE_TOPIC"
	case Permission_FULL_TOPIC_CONTROL:
		return "Permission_FULL_TOPIC_CONTROL"
	case Permission_FULL_CONTROL:
		return "Permission_FULL_CONTROL"
	case Permission_CHANGE_PERMISSION:
		return "Permission_CHANGE_PERMISSION"
	case Permission_ADMIN:
		return "Permission_ADMIN"
	}
	return "<UNSET>"
}

func PermissionFromString(s string) (Permission, error) {
	switch s {
	case "Permission_NONE":
		return Permission_NONE, nil
	case "Permission_PUT_MESSAGE":
		return Permission_PUT_MESSAGE, nil
	case "Permission_GET_MESSAGE":
		return Permission_GET_MESSAGE, nil
	case "Permission_FULL_MESSAGE_CONTROL":
		return Permission_FULL_MESSAGE_CONTROL, nil
	case "Permission_DESCRIBE_TOPIC":
		return Permission_DESCRIBE_TOPIC, nil
	case "Permission_PUT_MESSAGE_AND_DESCRIBE_TOPIC":
		return Permission_PUT_MESSAGE_AND_DESCRIBE_TOPIC, nil
	case "Permission_GET_MESSAGE_AND_DESCRIBE_TOPIC":
		return Permission_GET_MESSAGE_AND_DESCRIBE_TOPIC, nil
	case "Permission_TOPIC_READ_AND_MESSAGE_FULL_CONTROL":
		return Permission_TOPIC_READ_AND_MESSAGE_FULL_CONTROL, nil
	case "Permission_CHANGE_TOPIC":
		return Permission_CHANGE_TOPIC, nil
	case "Permission_FULL_TOPIC_CONTROL":
		return Permission_FULL_TOPIC_CONTROL, nil
	case "Permission_FULL_CONTROL":
		return Permission_FULL_CONTROL, nil
	case "Permission_CHANGE_PERMISSION":
		return Permission_CHANGE_PERMISSION, nil
	case "Permission_ADMIN":
		return Permission_ADMIN, nil
	}
	return Permission(0), fmt.Errorf("not a valid Permission string")
}

func PermissionPtr(v Permission) *Permission { return &v }

type TopicTalosResourceName struct {
	TopicTalosResourceName string `thrift:"topicTalosResourceName,1,required" json:"topicTalosResourceName"`
}

func NewTopicTalosResourceName() *TopicTalosResourceName {
	return &TopicTalosResourceName{}
}

func (p *TopicTalosResourceName) GetTopicTalosResourceName() string {
	return p.TopicTalosResourceName
}
func (p *TopicTalosResourceName) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TopicTalosResourceName) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TopicTalosResourceName = v
	}
	return nil
}

func (p *TopicTalosResourceName) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TopicTalosResourceName"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TopicTalosResourceName) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicTalosResourceName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicTalosResourceName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TopicTalosResourceName)); err != nil {
		return fmt.Errorf("%T.topicTalosResourceName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicTalosResourceName: %s", p, err)
	}
	return err
}

func (p *TopicTalosResourceName) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TopicTalosResourceName(%+v)", *p)
}

type TopicAndPartition struct {
	TopicName              string                  `thrift:"topicName,1,required" json:"topicName"`
	TopicTalosResourceName *TopicTalosResourceName `thrift:"topicTalosResourceName,2,required" json:"topicTalosResourceName"`
	PartitionId            int32                   `thrift:"partitionId,3,required" json:"partitionId"`
}

func NewTopicAndPartition() *TopicAndPartition {
	return &TopicAndPartition{}
}

func (p *TopicAndPartition) GetTopicName() string {
	return p.TopicName
}

var TopicAndPartition_TopicTalosResourceName_DEFAULT *TopicTalosResourceName

func (p *TopicAndPartition) GetTopicTalosResourceName() *TopicTalosResourceName {
	if !p.IsSetTopicTalosResourceName() {
		return TopicAndPartition_TopicTalosResourceName_DEFAULT
	}
	return p.TopicTalosResourceName
}

func (p *TopicAndPartition) GetPartitionId() int32 {
	return p.PartitionId
}
func (p *TopicAndPartition) IsSetTopicTalosResourceName() bool {
	return p.TopicTalosResourceName != nil
}

func (p *TopicAndPartition) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TopicAndPartition) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TopicName = v
	}
	return nil
}

func (p *TopicAndPartition) ReadField2(iprot thrift.TProtocol) error {
	p.TopicTalosResourceName = &TopicTalosResourceName{}
	if err := p.TopicTalosResourceName.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicTalosResourceName, err)
	}
	return nil
}

func (p *TopicAndPartition) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.PartitionId = v
	}
	return nil
}

func (p *TopicAndPartition) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TopicAndPartition"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TopicAndPartition) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TopicName)); err != nil {
		return fmt.Errorf("%T.topicName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicName: %s", p, err)
	}
	return err
}

func (p *TopicAndPartition) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicTalosResourceName", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:topicTalosResourceName: %s", p, err)
	}
	if err := p.TopicTalosResourceName.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicTalosResourceName, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:topicTalosResourceName: %s", p, err)
	}
	return err
}

func (p *TopicAndPartition) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("partitionId", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:partitionId: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.PartitionId)); err != nil {
		return fmt.Errorf("%T.partitionId (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:partitionId: %s", p, err)
	}
	return err
}

func (p *TopicAndPartition) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TopicAndPartition(%+v)", *p)
}

type TopicOwnerInfo struct {
	ChargeId  *string `thrift:"chargeId,1" json:"chargeId"`
	OwnerName *string `thrift:"ownerName,2" json:"ownerName"`
}

func NewTopicOwnerInfo() *TopicOwnerInfo {
	return &TopicOwnerInfo{}
}

var TopicOwnerInfo_ChargeId_DEFAULT string

func (p *TopicOwnerInfo) GetChargeId() string {
	if !p.IsSetChargeId() {
		return TopicOwnerInfo_ChargeId_DEFAULT
	}
	return *p.ChargeId
}

var TopicOwnerInfo_OwnerName_DEFAULT string

func (p *TopicOwnerInfo) GetOwnerName() string {
	if !p.IsSetOwnerName() {
		return TopicOwnerInfo_OwnerName_DEFAULT
	}
	return *p.OwnerName
}
func (p *TopicOwnerInfo) IsSetChargeId() bool {
	return p.ChargeId != nil
}

func (p *TopicOwnerInfo) IsSetOwnerName() bool {
	return p.OwnerName != nil
}

func (p *TopicOwnerInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TopicOwnerInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ChargeId = &v
	}
	return nil
}

func (p *TopicOwnerInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.OwnerName = &v
	}
	return nil
}

func (p *TopicOwnerInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TopicOwnerInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TopicOwnerInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetChargeId() {
		if err := oprot.WriteFieldBegin("chargeId", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:chargeId: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.ChargeId)); err != nil {
			return fmt.Errorf("%T.chargeId (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:chargeId: %s", p, err)
		}
	}
	return err
}

func (p *TopicOwnerInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOwnerName() {
		if err := oprot.WriteFieldBegin("ownerName", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:ownerName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.OwnerName)); err != nil {
			return fmt.Errorf("%T.ownerName (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:ownerName: %s", p, err)
		}
	}
	return err
}

func (p *TopicOwnerInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TopicOwnerInfo(%+v)", *p)
}

type TopicInfo struct {
	TopicName              string                  `thrift:"topicName,1,required" json:"topicName"`
	TopicTalosResourceName *TopicTalosResourceName `thrift:"topicTalosResourceName,2,required" json:"topicTalosResourceName"`
	OwnerId                string                  `thrift:"ownerId,3,required" json:"ownerId"`
	OwnerInfo              *TopicOwnerInfo         `thrift:"ownerInfo,4" json:"ownerInfo"`
}

func NewTopicInfo() *TopicInfo {
	return &TopicInfo{}
}

func (p *TopicInfo) GetTopicName() string {
	return p.TopicName
}

var TopicInfo_TopicTalosResourceName_DEFAULT *TopicTalosResourceName

func (p *TopicInfo) GetTopicTalosResourceName() *TopicTalosResourceName {
	if !p.IsSetTopicTalosResourceName() {
		return TopicInfo_TopicTalosResourceName_DEFAULT
	}
	return p.TopicTalosResourceName
}

func (p *TopicInfo) GetOwnerId() string {
	return p.OwnerId
}

var TopicInfo_OwnerInfo_DEFAULT *TopicOwnerInfo

func (p *TopicInfo) GetOwnerInfo() *TopicOwnerInfo {
	if !p.IsSetOwnerInfo() {
		return TopicInfo_OwnerInfo_DEFAULT
	}
	return p.OwnerInfo
}
func (p *TopicInfo) IsSetTopicTalosResourceName() bool {
	return p.TopicTalosResourceName != nil
}

func (p *TopicInfo) IsSetOwnerInfo() bool {
	return p.OwnerInfo != nil
}

func (p *TopicInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TopicInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TopicName = v
	}
	return nil
}

func (p *TopicInfo) ReadField2(iprot thrift.TProtocol) error {
	p.TopicTalosResourceName = &TopicTalosResourceName{}
	if err := p.TopicTalosResourceName.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicTalosResourceName, err)
	}
	return nil
}

func (p *TopicInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.OwnerId = v
	}
	return nil
}

func (p *TopicInfo) ReadField4(iprot thrift.TProtocol) error {
	p.OwnerInfo = &TopicOwnerInfo{}
	if err := p.OwnerInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.OwnerInfo, err)
	}
	return nil
}

func (p *TopicInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TopicInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TopicInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TopicName)); err != nil {
		return fmt.Errorf("%T.topicName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicName: %s", p, err)
	}
	return err
}

func (p *TopicInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicTalosResourceName", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:topicTalosResourceName: %s", p, err)
	}
	if err := p.TopicTalosResourceName.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicTalosResourceName, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:topicTalosResourceName: %s", p, err)
	}
	return err
}

func (p *TopicInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ownerId", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:ownerId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.OwnerId)); err != nil {
		return fmt.Errorf("%T.ownerId (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:ownerId: %s", p, err)
	}
	return err
}

func (p *TopicInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetOwnerInfo() {
		if err := oprot.WriteFieldBegin("ownerInfo", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:ownerInfo: %s", p, err)
		}
		if err := p.OwnerInfo.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.OwnerInfo, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:ownerInfo: %s", p, err)
		}
	}
	return err
}

func (p *TopicInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TopicInfo(%+v)", *p)
}

type SourceTopicInfo struct {
	SourceCluster string                 `thrift:"sourceCluster,1,required" json:"sourceCluster"`
	TopicName     string                 `thrift:"topicName,2,required" json:"topicName"`
	SourceTopic   *DescribeTopicResponse `thrift:"sourceTopic,3" json:"sourceTopic"`
}

func NewSourceTopicInfo() *SourceTopicInfo {
	return &SourceTopicInfo{}
}

func (p *SourceTopicInfo) GetSourceCluster() string {
	return p.SourceCluster
}

func (p *SourceTopicInfo) GetTopicName() string {
	return p.TopicName
}

var SourceTopicInfo_SourceTopic_DEFAULT DescribeTopicResponse

func (p *SourceTopicInfo) GetSourceTopic() DescribeTopicResponse {
	if !p.IsSetSourceTopic() {
		return SourceTopicInfo_SourceTopic_DEFAULT
	}
	return *p.SourceTopic
}
func (p *SourceTopicInfo) IsSetSourceTopic() bool {
	return p.SourceTopic != nil
}

func (p *SourceTopicInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SourceTopicInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.SourceCluster = v
	}
	return nil
}

func (p *SourceTopicInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TopicName = v
	}
	return nil
}

func (p *SourceTopicInfo) ReadField3(iprot thrift.TProtocol) error {
	p.SourceTopic = &DescribeTopicResponse{}
	if err := p.SourceTopic.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SourceTopic, err)
	}
	return nil
}

func (p *SourceTopicInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SourceTopicInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SourceTopicInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sourceCluster", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:sourceCluster: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SourceCluster)); err != nil {
		return fmt.Errorf("%T.sourceCluster (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:sourceCluster: %s", p, err)
	}
	return err
}

func (p *SourceTopicInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:topicName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TopicName)); err != nil {
		return fmt.Errorf("%T.topicName (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:topicName: %s", p, err)
	}
	return err
}

func (p *SourceTopicInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSourceTopic() {
		if err := oprot.WriteFieldBegin("sourceTopic", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:sourceTopic: %s", p, err)
		}
		if err := p.SourceTopic.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SourceTopic, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:sourceTopic: %s", p, err)
		}
	}
	return err
}

func (p *SourceTopicInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SourceTopicInfo(%+v)", *p)
}

type TopicAttribute struct {
	PartitionNumber      *int32            `thrift:"partitionNumber,1" json:"partitionNumber"`
	MessageRetentionSecs *int32            `thrift:"messageRetentionSecs,2" json:"messageRetentionSecs"`
	Attributes           map[string]string `thrift:"attributes,3" json:"attributes"`
	OldPartitionNumber   *int32            `thrift:"oldPartitionNumber,4" json:"oldPartitionNumber"`
}

func NewTopicAttribute() *TopicAttribute {
	return &TopicAttribute{}
}

var TopicAttribute_PartitionNumber_DEFAULT int32

func (p *TopicAttribute) GetPartitionNumber() int32 {
	if !p.IsSetPartitionNumber() {
		return TopicAttribute_PartitionNumber_DEFAULT
	}
	return *p.PartitionNumber
}

var TopicAttribute_MessageRetentionSecs_DEFAULT int32

func (p *TopicAttribute) GetMessageRetentionSecs() int32 {
	if !p.IsSetMessageRetentionSecs() {
		return TopicAttribute_MessageRetentionSecs_DEFAULT
	}
	return *p.MessageRetentionSecs
}

var TopicAttribute_Attributes_DEFAULT map[string]string

func (p *TopicAttribute) GetAttributes() map[string]string {
	return p.Attributes
}

var TopicAttribute_OldPartitionNumber_DEFAULT int32

func (p *TopicAttribute) GetOldPartitionNumber() int32 {
	if !p.IsSetOldPartitionNumber() {
		return TopicAttribute_OldPartitionNumber_DEFAULT
	}
	return *p.OldPartitionNumber
}
func (p *TopicAttribute) IsSetPartitionNumber() bool {
	return p.PartitionNumber != nil
}

func (p *TopicAttribute) IsSetMessageRetentionSecs() bool {
	return p.MessageRetentionSecs != nil
}

func (p *TopicAttribute) IsSetAttributes() bool {
	return p.Attributes != nil
}

func (p *TopicAttribute) IsSetOldPartitionNumber() bool {
	return p.OldPartitionNumber != nil
}

func (p *TopicAttribute) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TopicAttribute) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.PartitionNumber = &v
	}
	return nil
}

func (p *TopicAttribute) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MessageRetentionSecs = &v
	}
	return nil
}

func (p *TopicAttribute) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key0 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key0 = v
		}
		var _val1 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val1 = v
		}
		p.Attributes[_key0] = _val1
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *TopicAttribute) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.OldPartitionNumber = &v
	}
	return nil
}

func (p *TopicAttribute) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TopicAttribute"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TopicAttribute) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionNumber() {
		if err := oprot.WriteFieldBegin("partitionNumber", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:partitionNumber: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.PartitionNumber)); err != nil {
			return fmt.Errorf("%T.partitionNumber (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:partitionNumber: %s", p, err)
		}
	}
	return err
}

func (p *TopicAttribute) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessageRetentionSecs() {
		if err := oprot.WriteFieldBegin("messageRetentionSecs", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:messageRetentionSecs: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.MessageRetentionSecs)); err != nil {
			return fmt.Errorf("%T.messageRetentionSecs (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:messageRetentionSecs: %s", p, err)
		}
	}
	return err
}

func (p *TopicAttribute) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttributes() {
		if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:attributes: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Attributes {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:attributes: %s", p, err)
		}
	}
	return err
}

func (p *TopicAttribute) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetOldPartitionNumber() {
		if err := oprot.WriteFieldBegin("oldPartitionNumber", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:oldPartitionNumber: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.OldPartitionNumber)); err != nil {
			return fmt.Errorf("%T.oldPartitionNumber (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:oldPartitionNumber: %s", p, err)
		}
	}
	return err
}

func (p *TopicAttribute) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TopicAttribute(%+v)", *p)
}

type PartitionState struct {
	PartitionId        int32  `thrift:"partitionId,1,required" json:"partitionId"`
	StartOffset        int64  `thrift:"startOffset,2,required" json:"startOffset"`
	LastestOffset      int64  `thrift:"lastestOffset,3,required" json:"lastestOffset"`
	MessageNumber      int64  `thrift:"messageNumber,4,required" json:"messageNumber"`
	MessageBytes       int64  `thrift:"messageBytes,5,required" json:"messageBytes"`
	TotalMessageNumber *int64 `thrift:"totalMessageNumber,6" json:"totalMessageNumber"`
	TotalMessageBytes  *int64 `thrift:"totalMessageBytes,7" json:"totalMessageBytes"`
}

func NewPartitionState() *PartitionState {
	return &PartitionState{}
}

func (p *PartitionState) GetPartitionId() int32 {
	return p.PartitionId
}

func (p *PartitionState) GetStartOffset() int64 {
	return p.StartOffset
}

func (p *PartitionState) GetLastestOffset() int64 {
	return p.LastestOffset
}

func (p *PartitionState) GetMessageNumber() int64 {
	return p.MessageNumber
}

func (p *PartitionState) GetMessageBytes() int64 {
	return p.MessageBytes
}

var PartitionState_TotalMessageNumber_DEFAULT int64

func (p *PartitionState) GetTotalMessageNumber() int64 {
	if !p.IsSetTotalMessageNumber() {
		return PartitionState_TotalMessageNumber_DEFAULT
	}
	return *p.TotalMessageNumber
}

var PartitionState_TotalMessageBytes_DEFAULT int64

func (p *PartitionState) GetTotalMessageBytes() int64 {
	if !p.IsSetTotalMessageBytes() {
		return PartitionState_TotalMessageBytes_DEFAULT
	}
	return *p.TotalMessageBytes
}
func (p *PartitionState) IsSetTotalMessageNumber() bool {
	return p.TotalMessageNumber != nil
}

func (p *PartitionState) IsSetTotalMessageBytes() bool {
	return p.TotalMessageBytes != nil
}

func (p *PartitionState) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PartitionState) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.PartitionId = v
	}
	return nil
}

func (p *PartitionState) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.StartOffset = v
	}
	return nil
}

func (p *PartitionState) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.LastestOffset = v
	}
	return nil
}

func (p *PartitionState) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.MessageNumber = v
	}
	return nil
}

func (p *PartitionState) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.MessageBytes = v
	}
	return nil
}

func (p *PartitionState) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.TotalMessageNumber = &v
	}
	return nil
}

func (p *PartitionState) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.TotalMessageBytes = &v
	}
	return nil
}

func (p *PartitionState) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PartitionState"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PartitionState) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("partitionId", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:partitionId: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.PartitionId)); err != nil {
		return fmt.Errorf("%T.partitionId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:partitionId: %s", p, err)
	}
	return err
}

func (p *PartitionState) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startOffset", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:startOffset: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.StartOffset)); err != nil {
		return fmt.Errorf("%T.startOffset (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:startOffset: %s", p, err)
	}
	return err
}

func (p *PartitionState) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastestOffset", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:lastestOffset: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.LastestOffset)); err != nil {
		return fmt.Errorf("%T.lastestOffset (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:lastestOffset: %s", p, err)
	}
	return err
}

func (p *PartitionState) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageNumber", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:messageNumber: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.MessageNumber)); err != nil {
		return fmt.Errorf("%T.messageNumber (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:messageNumber: %s", p, err)
	}
	return err
}

func (p *PartitionState) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageBytes", thrift.I64, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:messageBytes: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.MessageBytes)); err != nil {
		return fmt.Errorf("%T.messageBytes (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:messageBytes: %s", p, err)
	}
	return err
}

func (p *PartitionState) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotalMessageNumber() {
		if err := oprot.WriteFieldBegin("totalMessageNumber", thrift.I64, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:totalMessageNumber: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.TotalMessageNumber)); err != nil {
			return fmt.Errorf("%T.totalMessageNumber (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:totalMessageNumber: %s", p, err)
		}
	}
	return err
}

func (p *PartitionState) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotalMessageBytes() {
		if err := oprot.WriteFieldBegin("totalMessageBytes", thrift.I64, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:totalMessageBytes: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.TotalMessageBytes)); err != nil {
			return fmt.Errorf("%T.totalMessageBytes (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:totalMessageBytes: %s", p, err)
		}
	}
	return err
}

func (p *PartitionState) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PartitionState(%+v)", *p)
}

type TopicState struct {
	CreateTimestamp    int64             `thrift:"createTimestamp,1,required" json:"createTimestamp"`
	TopicStatus        TopicStatus       `thrift:"topicStatus,2,required" json:"topicStatus"`
	MessageNumber      int64             `thrift:"messageNumber,3,required" json:"messageNumber"`
	MessageBytes       int64             `thrift:"messageBytes,4,required" json:"messageBytes"`
	PartitionStates    []*PartitionState `thrift:"partitionStates,5,required" json:"partitionStates"`
	TotalMessageNumber *int64            `thrift:"totalMessageNumber,6" json:"totalMessageNumber"`
	TotalMessageBytes  *int64            `thrift:"totalMessageBytes,7" json:"totalMessageBytes"`
}

func NewTopicState() *TopicState {
	return &TopicState{}
}

func (p *TopicState) GetCreateTimestamp() int64 {
	return p.CreateTimestamp
}

func (p *TopicState) GetTopicStatus() TopicStatus {
	return p.TopicStatus
}

func (p *TopicState) GetMessageNumber() int64 {
	return p.MessageNumber
}

func (p *TopicState) GetMessageBytes() int64 {
	return p.MessageBytes
}

func (p *TopicState) GetPartitionStates() []*PartitionState {
	return p.PartitionStates
}

var TopicState_TotalMessageNumber_DEFAULT int64

func (p *TopicState) GetTotalMessageNumber() int64 {
	if !p.IsSetTotalMessageNumber() {
		return TopicState_TotalMessageNumber_DEFAULT
	}
	return *p.TotalMessageNumber
}

var TopicState_TotalMessageBytes_DEFAULT int64

func (p *TopicState) GetTotalMessageBytes() int64 {
	if !p.IsSetTotalMessageBytes() {
		return TopicState_TotalMessageBytes_DEFAULT
	}
	return *p.TotalMessageBytes
}
func (p *TopicState) IsSetTotalMessageNumber() bool {
	return p.TotalMessageNumber != nil
}

func (p *TopicState) IsSetTotalMessageBytes() bool {
	return p.TotalMessageBytes != nil
}

func (p *TopicState) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TopicState) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.CreateTimestamp = v
	}
	return nil
}

func (p *TopicState) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := TopicStatus(v)
		p.TopicStatus = temp
	}
	return nil
}

func (p *TopicState) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MessageNumber = v
	}
	return nil
}

func (p *TopicState) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.MessageBytes = v
	}
	return nil
}

func (p *TopicState) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*PartitionState, 0, size)
	p.PartitionStates = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &PartitionState{}
		if err := _elem2.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem2, err)
		}
		p.PartitionStates = append(p.PartitionStates, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TopicState) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.TotalMessageNumber = &v
	}
	return nil
}

func (p *TopicState) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.TotalMessageBytes = &v
	}
	return nil
}

func (p *TopicState) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TopicState"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TopicState) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createTimestamp", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:createTimestamp: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.CreateTimestamp)); err != nil {
		return fmt.Errorf("%T.createTimestamp (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:createTimestamp: %s", p, err)
	}
	return err
}

func (p *TopicState) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicStatus", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:topicStatus: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TopicStatus)); err != nil {
		return fmt.Errorf("%T.topicStatus (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:topicStatus: %s", p, err)
	}
	return err
}

func (p *TopicState) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageNumber", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:messageNumber: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.MessageNumber)); err != nil {
		return fmt.Errorf("%T.messageNumber (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:messageNumber: %s", p, err)
	}
	return err
}

func (p *TopicState) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageBytes", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:messageBytes: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.MessageBytes)); err != nil {
		return fmt.Errorf("%T.messageBytes (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:messageBytes: %s", p, err)
	}
	return err
}

func (p *TopicState) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("partitionStates", thrift.LIST, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:partitionStates: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PartitionStates)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.PartitionStates {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:partitionStates: %s", p, err)
	}
	return err
}

func (p *TopicState) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotalMessageNumber() {
		if err := oprot.WriteFieldBegin("totalMessageNumber", thrift.I64, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:totalMessageNumber: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.TotalMessageNumber)); err != nil {
			return fmt.Errorf("%T.totalMessageNumber (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:totalMessageNumber: %s", p, err)
		}
	}
	return err
}

func (p *TopicState) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotalMessageBytes() {
		if err := oprot.WriteFieldBegin("totalMessageBytes", thrift.I64, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:totalMessageBytes: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.TotalMessageBytes)); err != nil {
			return fmt.Errorf("%T.totalMessageBytes (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:totalMessageBytes: %s", p, err)
		}
	}
	return err
}

func (p *TopicState) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TopicState(%+v)", *p)
}

type Topic struct {
	TopicInfo      *TopicInfo       `thrift:"topicInfo,1,required" json:"topicInfo"`
	TopicAttribute *TopicAttribute  `thrift:"topicAttribute,2,required" json:"topicAttribute"`
	TopicState     *TopicState      `thrift:"topicState,3,required" json:"topicState"`
	TopicQuota     *quota.BaseQuota `thrift:"topicQuota,4" json:"topicQuota"`
	TopicAcl       map[string]int32 `thrift:"topicAcl,5" json:"topicAcl"`
}

func NewTopic() *Topic {
	return &Topic{}
}

var Topic_TopicInfo_DEFAULT *TopicInfo

func (p *Topic) GetTopicInfo() *TopicInfo {
	if !p.IsSetTopicInfo() {
		return Topic_TopicInfo_DEFAULT
	}
	return p.TopicInfo
}

var Topic_TopicAttribute_DEFAULT *TopicAttribute

func (p *Topic) GetTopicAttribute() *TopicAttribute {
	if !p.IsSetTopicAttribute() {
		return Topic_TopicAttribute_DEFAULT
	}
	return p.TopicAttribute
}

var Topic_TopicState_DEFAULT *TopicState

func (p *Topic) GetTopicState() *TopicState {
	if !p.IsSetTopicState() {
		return Topic_TopicState_DEFAULT
	}
	return p.TopicState
}

var Topic_TopicQuota_DEFAULT *quota.BaseQuota

func (p *Topic) GetTopicQuota() *quota.BaseQuota {
	if !p.IsSetTopicQuota() {
		return Topic_TopicQuota_DEFAULT
	}
	return p.TopicQuota
}

var Topic_TopicAcl_DEFAULT map[string]int32

func (p *Topic) GetTopicAcl() map[string]int32 {
	return p.TopicAcl
}
func (p *Topic) IsSetTopicInfo() bool {
	return p.TopicInfo != nil
}

func (p *Topic) IsSetTopicAttribute() bool {
	return p.TopicAttribute != nil
}

func (p *Topic) IsSetTopicState() bool {
	return p.TopicState != nil
}

func (p *Topic) IsSetTopicQuota() bool {
	return p.TopicQuota != nil
}

func (p *Topic) IsSetTopicAcl() bool {
	return p.TopicAcl != nil
}

func (p *Topic) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Topic) ReadField1(iprot thrift.TProtocol) error {
	p.TopicInfo = &TopicInfo{}
	if err := p.TopicInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicInfo, err)
	}
	return nil
}

func (p *Topic) ReadField2(iprot thrift.TProtocol) error {
	p.TopicAttribute = &TopicAttribute{}
	if err := p.TopicAttribute.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicAttribute, err)
	}
	return nil
}

func (p *Topic) ReadField3(iprot thrift.TProtocol) error {
	p.TopicState = &TopicState{}
	if err := p.TopicState.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicState, err)
	}
	return nil
}

func (p *Topic) ReadField4(iprot thrift.TProtocol) error {
	p.TopicQuota = &quota.BaseQuota{}
	if err := p.TopicQuota.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicQuota, err)
	}
	return nil
}

func (p *Topic) ReadField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]int32, size)
	p.TopicAcl = tMap
	for i := 0; i < size; i++ {
		var _key3 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key3 = v
		}
		var _val4 int32
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val4 = v
		}
		p.TopicAcl[_key3] = _val4
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *Topic) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Topic"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Topic) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicInfo", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicInfo: %s", p, err)
	}
	if err := p.TopicInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicInfo: %s", p, err)
	}
	return err
}

func (p *Topic) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicAttribute", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:topicAttribute: %s", p, err)
	}
	if err := p.TopicAttribute.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicAttribute, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:topicAttribute: %s", p, err)
	}
	return err
}

func (p *Topic) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicState", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:topicState: %s", p, err)
	}
	if err := p.TopicState.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicState, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:topicState: %s", p, err)
	}
	return err
}

func (p *Topic) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTopicQuota() {
		if err := oprot.WriteFieldBegin("topicQuota", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:topicQuota: %s", p, err)
		}
		if err := p.TopicQuota.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.TopicQuota, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:topicQuota: %s", p, err)
		}
	}
	return err
}

func (p *Topic) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTopicAcl() {
		if err := oprot.WriteFieldBegin("topicAcl", thrift.MAP, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:topicAcl: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(p.TopicAcl)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.TopicAcl {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteI32(int32(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:topicAcl: %s", p, err)
		}
	}
	return err
}

func (p *Topic) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Topic(%+v)", *p)
}

type TopicGroup struct {
	TopicGroupName  string         `thrift:"topicGroupName,1,required" json:"topicGroupName"`
	OwnerId         string         `thrift:"ownerId,2,required" json:"ownerId"`
	TypeA1          TopicGroupType `thrift:"type,3,required" json:"type"`
	TopicPattern    *string        `thrift:"topicPattern,4" json:"topicPattern"`
	TopicSet        []string       `thrift:"topicSet,5" json:"topicSet"`
	ExclusiveTopics []string       `thrift:"exclusiveTopics,6" json:"exclusiveTopics"`
}

func NewTopicGroup() *TopicGroup {
	return &TopicGroup{}
}

func (p *TopicGroup) GetTopicGroupName() string {
	return p.TopicGroupName
}

func (p *TopicGroup) GetOwnerId() string {
	return p.OwnerId
}

func (p *TopicGroup) GetTypeA1() TopicGroupType {
	return p.TypeA1
}

var TopicGroup_TopicPattern_DEFAULT string

func (p *TopicGroup) GetTopicPattern() string {
	if !p.IsSetTopicPattern() {
		return TopicGroup_TopicPattern_DEFAULT
	}
	return *p.TopicPattern
}

var TopicGroup_TopicSet_DEFAULT []string

func (p *TopicGroup) GetTopicSet() []string {
	return p.TopicSet
}

var TopicGroup_ExclusiveTopics_DEFAULT []string

func (p *TopicGroup) GetExclusiveTopics() []string {
	return p.ExclusiveTopics
}
func (p *TopicGroup) IsSetTopicPattern() bool {
	return p.TopicPattern != nil
}

func (p *TopicGroup) IsSetTopicSet() bool {
	return p.TopicSet != nil
}

func (p *TopicGroup) IsSetExclusiveTopics() bool {
	return p.ExclusiveTopics != nil
}

func (p *TopicGroup) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TopicGroup) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TopicGroupName = v
	}
	return nil
}

func (p *TopicGroup) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.OwnerId = v
	}
	return nil
}

func (p *TopicGroup) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := TopicGroupType(v)
		p.TypeA1 = temp
	}
	return nil
}

func (p *TopicGroup) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.TopicPattern = &v
	}
	return nil
}

func (p *TopicGroup) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.TopicSet = tSlice
	for i := 0; i < size; i++ {
		var _elem5 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem5 = v
		}
		p.TopicSet = append(p.TopicSet, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TopicGroup) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.ExclusiveTopics = tSlice
	for i := 0; i < size; i++ {
		var _elem6 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem6 = v
		}
		p.ExclusiveTopics = append(p.ExclusiveTopics, _elem6)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TopicGroup) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TopicGroup"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TopicGroup) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicGroupName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicGroupName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TopicGroupName)); err != nil {
		return fmt.Errorf("%T.topicGroupName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicGroupName: %s", p, err)
	}
	return err
}

func (p *TopicGroup) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ownerId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:ownerId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.OwnerId)); err != nil {
		return fmt.Errorf("%T.ownerId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:ownerId: %s", p, err)
	}
	return err
}

func (p *TopicGroup) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:type: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TypeA1)); err != nil {
		return fmt.Errorf("%T.type (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:type: %s", p, err)
	}
	return err
}

func (p *TopicGroup) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTopicPattern() {
		if err := oprot.WriteFieldBegin("topicPattern", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:topicPattern: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.TopicPattern)); err != nil {
			return fmt.Errorf("%T.topicPattern (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:topicPattern: %s", p, err)
		}
	}
	return err
}

func (p *TopicGroup) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTopicSet() {
		if err := oprot.WriteFieldBegin("topicSet", thrift.LIST, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:topicSet: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.TopicSet)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.TopicSet {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:topicSet: %s", p, err)
		}
	}
	return err
}

func (p *TopicGroup) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetExclusiveTopics() {
		if err := oprot.WriteFieldBegin("exclusiveTopics", thrift.LIST, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:exclusiveTopics: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.ExclusiveTopics)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.ExclusiveTopics {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:exclusiveTopics: %s", p, err)
		}
	}
	return err
}

func (p *TopicGroup) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TopicGroup(%+v)", *p)
}

type CreateTopicRequest struct {
	TopicName      string                                `thrift:"topicName,1,required" json:"topicName"`
	TopicAttribute *TopicAttribute                       `thrift:"topicAttribute,2,required" json:"topicAttribute"`
	TopicQuota     *quota.BaseQuota                      `thrift:"topicQuota,3" json:"topicQuota"`
	AclMap         map[*authorization.Grantee]Permission `thrift:"aclMap,4" json:"aclMap"`
	OwnerName      *string                               `thrift:"ownerName,5" json:"ownerName"`
}

func NewCreateTopicRequest() *CreateTopicRequest {
	return &CreateTopicRequest{}
}

func (p *CreateTopicRequest) GetTopicName() string {
	return p.TopicName
}

var CreateTopicRequest_TopicAttribute_DEFAULT *TopicAttribute

func (p *CreateTopicRequest) GetTopicAttribute() *TopicAttribute {
	if !p.IsSetTopicAttribute() {
		return CreateTopicRequest_TopicAttribute_DEFAULT
	}
	return p.TopicAttribute
}

var CreateTopicRequest_TopicQuota_DEFAULT *quota.BaseQuota

func (p *CreateTopicRequest) GetTopicQuota() *quota.BaseQuota {
	if !p.IsSetTopicQuota() {
		return CreateTopicRequest_TopicQuota_DEFAULT
	}
	return p.TopicQuota
}

var CreateTopicRequest_AclMap_DEFAULT map[*authorization.Grantee]Permission

func (p *CreateTopicRequest) GetAclMap() map[*authorization.Grantee]Permission {
	return p.AclMap
}

var CreateTopicRequest_OwnerName_DEFAULT string

func (p *CreateTopicRequest) GetOwnerName() string {
	if !p.IsSetOwnerName() {
		return CreateTopicRequest_OwnerName_DEFAULT
	}
	return *p.OwnerName
}
func (p *CreateTopicRequest) IsSetTopicAttribute() bool {
	return p.TopicAttribute != nil
}

func (p *CreateTopicRequest) IsSetTopicQuota() bool {
	return p.TopicQuota != nil
}

func (p *CreateTopicRequest) IsSetAclMap() bool {
	return p.AclMap != nil
}

func (p *CreateTopicRequest) IsSetOwnerName() bool {
	return p.OwnerName != nil
}

func (p *CreateTopicRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateTopicRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TopicName = v
	}
	return nil
}

func (p *CreateTopicRequest) ReadField2(iprot thrift.TProtocol) error {
	p.TopicAttribute = &TopicAttribute{}
	if err := p.TopicAttribute.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicAttribute, err)
	}
	return nil
}

func (p *CreateTopicRequest) ReadField3(iprot thrift.TProtocol) error {
	p.TopicQuota = &quota.BaseQuota{}
	if err := p.TopicQuota.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicQuota, err)
	}
	return nil
}

func (p *CreateTopicRequest) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[*authorization.Grantee]Permission, size)
	p.AclMap = tMap
	for i := 0; i < size; i++ {
		_key7 := &authorization.Grantee{}
		if err := _key7.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _key7, err)
		}
		var _val8 Permission
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			temp := Permission(v)
			_val8 = temp
		}
		p.AclMap[_key7] = _val8
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *CreateTopicRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.OwnerName = &v
	}
	return nil
}

func (p *CreateTopicRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreateTopicRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateTopicRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TopicName)); err != nil {
		return fmt.Errorf("%T.topicName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicName: %s", p, err)
	}
	return err
}

func (p *CreateTopicRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicAttribute", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:topicAttribute: %s", p, err)
	}
	if err := p.TopicAttribute.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicAttribute, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:topicAttribute: %s", p, err)
	}
	return err
}

func (p *CreateTopicRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTopicQuota() {
		if err := oprot.WriteFieldBegin("topicQuota", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:topicQuota: %s", p, err)
		}
		if err := p.TopicQuota.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.TopicQuota, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:topicQuota: %s", p, err)
		}
	}
	return err
}

func (p *CreateTopicRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetAclMap() {
		if err := oprot.WriteFieldBegin("aclMap", thrift.MAP, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:aclMap: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRUCT, thrift.I32, len(p.AclMap)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.AclMap {
			if err := k.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", k, err)
			}
			if err := oprot.WriteI32(int32(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:aclMap: %s", p, err)
		}
	}
	return err
}

func (p *CreateTopicRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetOwnerName() {
		if err := oprot.WriteFieldBegin("ownerName", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:ownerName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.OwnerName)); err != nil {
			return fmt.Errorf("%T.ownerName (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:ownerName: %s", p, err)
		}
	}
	return err
}

func (p *CreateTopicRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTopicRequest(%+v)", *p)
}

type CreateReplicationTopicRequest struct {
	TopicName           string             `thrift:"topicName,1,required" json:"topicName"`
	SourceTopicInfoList []*SourceTopicInfo `thrift:"sourceTopicInfoList,2,required" json:"sourceTopicInfoList"`
}

func NewCreateReplicationTopicRequest() *CreateReplicationTopicRequest {
	return &CreateReplicationTopicRequest{}
}

func (p *CreateReplicationTopicRequest) GetTopicName() string {
	return p.TopicName
}

func (p *CreateReplicationTopicRequest) GetSourceTopicInfoList() []*SourceTopicInfo {
	return p.SourceTopicInfoList
}
func (p *CreateReplicationTopicRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateReplicationTopicRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TopicName = v
	}
	return nil
}

func (p *CreateReplicationTopicRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*SourceTopicInfo, 0, size)
	p.SourceTopicInfoList = tSlice
	for i := 0; i < size; i++ {
		_elem9 := &SourceTopicInfo{}
		if err := _elem9.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem9, err)
		}
		p.SourceTopicInfoList = append(p.SourceTopicInfoList, _elem9)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *CreateReplicationTopicRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreateReplicationTopicRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateReplicationTopicRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TopicName)); err != nil {
		return fmt.Errorf("%T.topicName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicName: %s", p, err)
	}
	return err
}

func (p *CreateReplicationTopicRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sourceTopicInfoList", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:sourceTopicInfoList: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SourceTopicInfoList)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.SourceTopicInfoList {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:sourceTopicInfoList: %s", p, err)
	}
	return err
}

func (p *CreateReplicationTopicRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateReplicationTopicRequest(%+v)", *p)
}

type CreateTopicResponse struct {
	TopicInfo *TopicInfo `thrift:"topicInfo,1,required" json:"topicInfo"`
}

func NewCreateTopicResponse() *CreateTopicResponse {
	return &CreateTopicResponse{}
}

var CreateTopicResponse_TopicInfo_DEFAULT *TopicInfo

func (p *CreateTopicResponse) GetTopicInfo() *TopicInfo {
	if !p.IsSetTopicInfo() {
		return CreateTopicResponse_TopicInfo_DEFAULT
	}
	return p.TopicInfo
}
func (p *CreateTopicResponse) IsSetTopicInfo() bool {
	return p.TopicInfo != nil
}

func (p *CreateTopicResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateTopicResponse) ReadField1(iprot thrift.TProtocol) error {
	p.TopicInfo = &TopicInfo{}
	if err := p.TopicInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicInfo, err)
	}
	return nil
}

func (p *CreateTopicResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreateTopicResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateTopicResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicInfo", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicInfo: %s", p, err)
	}
	if err := p.TopicInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicInfo: %s", p, err)
	}
	return err
}

func (p *CreateTopicResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTopicResponse(%+v)", *p)
}

type DeleteTopicRequest struct {
	TopicTalosResourceName *TopicTalosResourceName `thrift:"topicTalosResourceName,1,required" json:"topicTalosResourceName"`
}

func NewDeleteTopicRequest() *DeleteTopicRequest {
	return &DeleteTopicRequest{}
}

var DeleteTopicRequest_TopicTalosResourceName_DEFAULT *TopicTalosResourceName

func (p *DeleteTopicRequest) GetTopicTalosResourceName() *TopicTalosResourceName {
	if !p.IsSetTopicTalosResourceName() {
		return DeleteTopicRequest_TopicTalosResourceName_DEFAULT
	}
	return p.TopicTalosResourceName
}
func (p *DeleteTopicRequest) IsSetTopicTalosResourceName() bool {
	return p.TopicTalosResourceName != nil
}

func (p *DeleteTopicRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteTopicRequest) ReadField1(iprot thrift.TProtocol) error {
	p.TopicTalosResourceName = &TopicTalosResourceName{}
	if err := p.TopicTalosResourceName.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicTalosResourceName, err)
	}
	return nil
}

func (p *DeleteTopicRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeleteTopicRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteTopicRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicTalosResourceName", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicTalosResourceName: %s", p, err)
	}
	if err := p.TopicTalosResourceName.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicTalosResourceName, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicTalosResourceName: %s", p, err)
	}
	return err
}

func (p *DeleteTopicRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteTopicRequest(%+v)", *p)
}

type ChangeTopicAttributeRequest struct {
	TopicTalosResourceName *TopicTalosResourceName `thrift:"topicTalosResourceName,1,required" json:"topicTalosResourceName"`
	TopicAttribute         *TopicAttribute         `thrift:"topicAttribute,2,required" json:"topicAttribute"`
}

func NewChangeTopicAttributeRequest() *ChangeTopicAttributeRequest {
	return &ChangeTopicAttributeRequest{}
}

var ChangeTopicAttributeRequest_TopicTalosResourceName_DEFAULT *TopicTalosResourceName

func (p *ChangeTopicAttributeRequest) GetTopicTalosResourceName() *TopicTalosResourceName {
	if !p.IsSetTopicTalosResourceName() {
		return ChangeTopicAttributeRequest_TopicTalosResourceName_DEFAULT
	}
	return p.TopicTalosResourceName
}

var ChangeTopicAttributeRequest_TopicAttribute_DEFAULT *TopicAttribute

func (p *ChangeTopicAttributeRequest) GetTopicAttribute() *TopicAttribute {
	if !p.IsSetTopicAttribute() {
		return ChangeTopicAttributeRequest_TopicAttribute_DEFAULT
	}
	return p.TopicAttribute
}
func (p *ChangeTopicAttributeRequest) IsSetTopicTalosResourceName() bool {
	return p.TopicTalosResourceName != nil
}

func (p *ChangeTopicAttributeRequest) IsSetTopicAttribute() bool {
	return p.TopicAttribute != nil
}

func (p *ChangeTopicAttributeRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ChangeTopicAttributeRequest) ReadField1(iprot thrift.TProtocol) error {
	p.TopicTalosResourceName = &TopicTalosResourceName{}
	if err := p.TopicTalosResourceName.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicTalosResourceName, err)
	}
	return nil
}

func (p *ChangeTopicAttributeRequest) ReadField2(iprot thrift.TProtocol) error {
	p.TopicAttribute = &TopicAttribute{}
	if err := p.TopicAttribute.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicAttribute, err)
	}
	return nil
}

func (p *ChangeTopicAttributeRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ChangeTopicAttributeRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ChangeTopicAttributeRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicTalosResourceName", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicTalosResourceName: %s", p, err)
	}
	if err := p.TopicTalosResourceName.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicTalosResourceName, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicTalosResourceName: %s", p, err)
	}
	return err
}

func (p *ChangeTopicAttributeRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicAttribute", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:topicAttribute: %s", p, err)
	}
	if err := p.TopicAttribute.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicAttribute, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:topicAttribute: %s", p, err)
	}
	return err
}

func (p *ChangeTopicAttributeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChangeTopicAttributeRequest(%+v)", *p)
}

type DescribeTopicRequest struct {
	TopicName string `thrift:"topicName,1,required" json:"topicName"`
}

func NewDescribeTopicRequest() *DescribeTopicRequest {
	return &DescribeTopicRequest{}
}

func (p *DescribeTopicRequest) GetTopicName() string {
	return p.TopicName
}
func (p *DescribeTopicRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DescribeTopicRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TopicName = v
	}
	return nil
}

func (p *DescribeTopicRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DescribeTopicRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DescribeTopicRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TopicName)); err != nil {
		return fmt.Errorf("%T.topicName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicName: %s", p, err)
	}
	return err
}

func (p *DescribeTopicRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DescribeTopicRequest(%+v)", *p)
}

type GetDescribeInfoRequest struct {
	TopicName string `thrift:"topicName,1,required" json:"topicName"`
}

func NewGetDescribeInfoRequest() *GetDescribeInfoRequest {
	return &GetDescribeInfoRequest{}
}

func (p *GetDescribeInfoRequest) GetTopicName() string {
	return p.TopicName
}
func (p *GetDescribeInfoRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetDescribeInfoRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TopicName = v
	}
	return nil
}

func (p *GetDescribeInfoRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetDescribeInfoRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetDescribeInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TopicName)); err != nil {
		return fmt.Errorf("%T.topicName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicName: %s", p, err)
	}
	return err
}

func (p *GetDescribeInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDescribeInfoRequest(%+v)", *p)
}

type GetTopicAttributeRequest struct {
	TopicName string `thrift:"topicName,1,required" json:"topicName"`
}

func NewGetTopicAttributeRequest() *GetTopicAttributeRequest {
	return &GetTopicAttributeRequest{}
}

func (p *GetTopicAttributeRequest) GetTopicName() string {
	return p.TopicName
}
func (p *GetTopicAttributeRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTopicAttributeRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TopicName = v
	}
	return nil
}

func (p *GetTopicAttributeRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetTopicAttributeRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTopicAttributeRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TopicName)); err != nil {
		return fmt.Errorf("%T.topicName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicName: %s", p, err)
	}
	return err
}

func (p *GetTopicAttributeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTopicAttributeRequest(%+v)", *p)
}

type AddSubResourceNameRequest struct {
	TopicTalosResourceName *TopicTalosResourceName `thrift:"topicTalosResourceName,1,required" json:"topicTalosResourceName"`
	OrgId                  string                  `thrift:"orgId,2,required" json:"orgId"`
	AdminTeamId            string                  `thrift:"adminTeamId,3,required" json:"adminTeamId"`
}

func NewAddSubResourceNameRequest() *AddSubResourceNameRequest {
	return &AddSubResourceNameRequest{}
}

var AddSubResourceNameRequest_TopicTalosResourceName_DEFAULT *TopicTalosResourceName

func (p *AddSubResourceNameRequest) GetTopicTalosResourceName() *TopicTalosResourceName {
	if !p.IsSetTopicTalosResourceName() {
		return AddSubResourceNameRequest_TopicTalosResourceName_DEFAULT
	}
	return p.TopicTalosResourceName
}

func (p *AddSubResourceNameRequest) GetOrgId() string {
	return p.OrgId
}

func (p *AddSubResourceNameRequest) GetAdminTeamId() string {
	return p.AdminTeamId
}
func (p *AddSubResourceNameRequest) IsSetTopicTalosResourceName() bool {
	return p.TopicTalosResourceName != nil
}

func (p *AddSubResourceNameRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddSubResourceNameRequest) ReadField1(iprot thrift.TProtocol) error {
	p.TopicTalosResourceName = &TopicTalosResourceName{}
	if err := p.TopicTalosResourceName.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicTalosResourceName, err)
	}
	return nil
}

func (p *AddSubResourceNameRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.OrgId = v
	}
	return nil
}

func (p *AddSubResourceNameRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.AdminTeamId = v
	}
	return nil
}

func (p *AddSubResourceNameRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AddSubResourceNameRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AddSubResourceNameRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicTalosResourceName", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicTalosResourceName: %s", p, err)
	}
	if err := p.TopicTalosResourceName.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicTalosResourceName, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicTalosResourceName: %s", p, err)
	}
	return err
}

func (p *AddSubResourceNameRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("orgId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:orgId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.OrgId)); err != nil {
		return fmt.Errorf("%T.orgId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:orgId: %s", p, err)
	}
	return err
}

func (p *AddSubResourceNameRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("adminTeamId", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:adminTeamId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AdminTeamId)); err != nil {
		return fmt.Errorf("%T.adminTeamId (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:adminTeamId: %s", p, err)
	}
	return err
}

func (p *AddSubResourceNameRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddSubResourceNameRequest(%+v)", *p)
}

type CreateTopicGroupRequest struct {
	TopicGroup *TopicGroup `thrift:"topicGroup,1,required" json:"topicGroup"`
}

func NewCreateTopicGroupRequest() *CreateTopicGroupRequest {
	return &CreateTopicGroupRequest{}
}

var CreateTopicGroupRequest_TopicGroup_DEFAULT *TopicGroup

func (p *CreateTopicGroupRequest) GetTopicGroup() *TopicGroup {
	if !p.IsSetTopicGroup() {
		return CreateTopicGroupRequest_TopicGroup_DEFAULT
	}
	return p.TopicGroup
}
func (p *CreateTopicGroupRequest) IsSetTopicGroup() bool {
	return p.TopicGroup != nil
}

func (p *CreateTopicGroupRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateTopicGroupRequest) ReadField1(iprot thrift.TProtocol) error {
	p.TopicGroup = &TopicGroup{}
	if err := p.TopicGroup.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicGroup, err)
	}
	return nil
}

func (p *CreateTopicGroupRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreateTopicGroupRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateTopicGroupRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicGroup", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicGroup: %s", p, err)
	}
	if err := p.TopicGroup.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicGroup, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicGroup: %s", p, err)
	}
	return err
}

func (p *CreateTopicGroupRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTopicGroupRequest(%+v)", *p)
}

type CreateTopicGroupResponse struct {
	TopicGroup *TopicGroup `thrift:"topicGroup,1,required" json:"topicGroup"`
}

func NewCreateTopicGroupResponse() *CreateTopicGroupResponse {
	return &CreateTopicGroupResponse{}
}

var CreateTopicGroupResponse_TopicGroup_DEFAULT *TopicGroup

func (p *CreateTopicGroupResponse) GetTopicGroup() *TopicGroup {
	if !p.IsSetTopicGroup() {
		return CreateTopicGroupResponse_TopicGroup_DEFAULT
	}
	return p.TopicGroup
}
func (p *CreateTopicGroupResponse) IsSetTopicGroup() bool {
	return p.TopicGroup != nil
}

func (p *CreateTopicGroupResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateTopicGroupResponse) ReadField1(iprot thrift.TProtocol) error {
	p.TopicGroup = &TopicGroup{}
	if err := p.TopicGroup.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicGroup, err)
	}
	return nil
}

func (p *CreateTopicGroupResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreateTopicGroupResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateTopicGroupResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicGroup", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicGroup: %s", p, err)
	}
	if err := p.TopicGroup.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicGroup, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicGroup: %s", p, err)
	}
	return err
}

func (p *CreateTopicGroupResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTopicGroupResponse(%+v)", *p)
}

type DescribeTopicGroupRequest struct {
	TopicGroupName string `thrift:"topicGroupName,1,required" json:"topicGroupName"`
}

func NewDescribeTopicGroupRequest() *DescribeTopicGroupRequest {
	return &DescribeTopicGroupRequest{}
}

func (p *DescribeTopicGroupRequest) GetTopicGroupName() string {
	return p.TopicGroupName
}
func (p *DescribeTopicGroupRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DescribeTopicGroupRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TopicGroupName = v
	}
	return nil
}

func (p *DescribeTopicGroupRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DescribeTopicGroupRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DescribeTopicGroupRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicGroupName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicGroupName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TopicGroupName)); err != nil {
		return fmt.Errorf("%T.topicGroupName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicGroupName: %s", p, err)
	}
	return err
}

func (p *DescribeTopicGroupRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DescribeTopicGroupRequest(%+v)", *p)
}

type DescribeTopicGroupResponse struct {
	TopicGroup *TopicGroup `thrift:"topicGroup,1,required" json:"topicGroup"`
}

func NewDescribeTopicGroupResponse() *DescribeTopicGroupResponse {
	return &DescribeTopicGroupResponse{}
}

var DescribeTopicGroupResponse_TopicGroup_DEFAULT *TopicGroup

func (p *DescribeTopicGroupResponse) GetTopicGroup() *TopicGroup {
	if !p.IsSetTopicGroup() {
		return DescribeTopicGroupResponse_TopicGroup_DEFAULT
	}
	return p.TopicGroup
}
func (p *DescribeTopicGroupResponse) IsSetTopicGroup() bool {
	return p.TopicGroup != nil
}

func (p *DescribeTopicGroupResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DescribeTopicGroupResponse) ReadField1(iprot thrift.TProtocol) error {
	p.TopicGroup = &TopicGroup{}
	if err := p.TopicGroup.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicGroup, err)
	}
	return nil
}

func (p *DescribeTopicGroupResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DescribeTopicGroupResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DescribeTopicGroupResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicGroup", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicGroup: %s", p, err)
	}
	if err := p.TopicGroup.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicGroup, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicGroup: %s", p, err)
	}
	return err
}

func (p *DescribeTopicGroupResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DescribeTopicGroupResponse(%+v)", *p)
}

type DeleteTopicGroupRequest struct {
	TopicGroupName string `thrift:"topicGroupName,1,required" json:"topicGroupName"`
}

func NewDeleteTopicGroupRequest() *DeleteTopicGroupRequest {
	return &DeleteTopicGroupRequest{}
}

func (p *DeleteTopicGroupRequest) GetTopicGroupName() string {
	return p.TopicGroupName
}
func (p *DeleteTopicGroupRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteTopicGroupRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TopicGroupName = v
	}
	return nil
}

func (p *DeleteTopicGroupRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeleteTopicGroupRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteTopicGroupRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicGroupName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicGroupName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TopicGroupName)); err != nil {
		return fmt.Errorf("%T.topicGroupName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicGroupName: %s", p, err)
	}
	return err
}

func (p *DeleteTopicGroupRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteTopicGroupRequest(%+v)", *p)
}

type ListTopicGroupRequest struct {
	OrgList []string `thrift:"OrgList,1,required" json:"OrgList"`
}

func NewListTopicGroupRequest() *ListTopicGroupRequest {
	return &ListTopicGroupRequest{}
}

func (p *ListTopicGroupRequest) GetOrgList() []string {
	return p.OrgList
}
func (p *ListTopicGroupRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListTopicGroupRequest) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.OrgList = tSlice
	for i := 0; i < size; i++ {
		var _elem10 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem10 = v
		}
		p.OrgList = append(p.OrgList, _elem10)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ListTopicGroupRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListTopicGroupRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListTopicGroupRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("OrgList", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:OrgList: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.OrgList)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.OrgList {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:OrgList: %s", p, err)
	}
	return err
}

func (p *ListTopicGroupRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListTopicGroupRequest(%+v)", *p)
}

type ListTopicGroupResponse struct {
	TopicGroupList []*TopicGroup `thrift:"topicGroupList,1,required" json:"topicGroupList"`
}

func NewListTopicGroupResponse() *ListTopicGroupResponse {
	return &ListTopicGroupResponse{}
}

func (p *ListTopicGroupResponse) GetTopicGroupList() []*TopicGroup {
	return p.TopicGroupList
}
func (p *ListTopicGroupResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListTopicGroupResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*TopicGroup, 0, size)
	p.TopicGroupList = tSlice
	for i := 0; i < size; i++ {
		_elem11 := &TopicGroup{}
		if err := _elem11.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem11, err)
		}
		p.TopicGroupList = append(p.TopicGroupList, _elem11)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ListTopicGroupResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListTopicGroupResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListTopicGroupResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicGroupList", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicGroupList: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TopicGroupList)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.TopicGroupList {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicGroupList: %s", p, err)
	}
	return err
}

func (p *ListTopicGroupResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListTopicGroupResponse(%+v)", *p)
}

type DescribeTopicResponse struct {
	TopicInfo      *TopicInfo       `thrift:"topicInfo,1,required" json:"topicInfo"`
	TopicAttribute *TopicAttribute  `thrift:"topicAttribute,2,required" json:"topicAttribute"`
	TopicState     *TopicState      `thrift:"topicState,3,required" json:"topicState"`
	TopicQuota     *quota.BaseQuota `thrift:"topicQuota,4,required" json:"topicQuota"`
	AclMap         map[string]int32 `thrift:"aclMap,5,required" json:"aclMap"`
}

func NewDescribeTopicResponse() *DescribeTopicResponse {
	return &DescribeTopicResponse{}
}

var DescribeTopicResponse_TopicInfo_DEFAULT *TopicInfo

func (p *DescribeTopicResponse) GetTopicInfo() *TopicInfo {
	if !p.IsSetTopicInfo() {
		return DescribeTopicResponse_TopicInfo_DEFAULT
	}
	return p.TopicInfo
}

var DescribeTopicResponse_TopicAttribute_DEFAULT *TopicAttribute

func (p *DescribeTopicResponse) GetTopicAttribute() *TopicAttribute {
	if !p.IsSetTopicAttribute() {
		return DescribeTopicResponse_TopicAttribute_DEFAULT
	}
	return p.TopicAttribute
}

var DescribeTopicResponse_TopicState_DEFAULT *TopicState

func (p *DescribeTopicResponse) GetTopicState() *TopicState {
	if !p.IsSetTopicState() {
		return DescribeTopicResponse_TopicState_DEFAULT
	}
	return p.TopicState
}

var DescribeTopicResponse_TopicQuota_DEFAULT *quota.BaseQuota

func (p *DescribeTopicResponse) GetTopicQuota() *quota.BaseQuota {
	if !p.IsSetTopicQuota() {
		return DescribeTopicResponse_TopicQuota_DEFAULT
	}
	return p.TopicQuota
}

func (p *DescribeTopicResponse) GetAclMap() map[string]int32 {
	return p.AclMap
}
func (p *DescribeTopicResponse) IsSetTopicInfo() bool {
	return p.TopicInfo != nil
}

func (p *DescribeTopicResponse) IsSetTopicAttribute() bool {
	return p.TopicAttribute != nil
}

func (p *DescribeTopicResponse) IsSetTopicState() bool {
	return p.TopicState != nil
}

func (p *DescribeTopicResponse) IsSetTopicQuota() bool {
	return p.TopicQuota != nil
}

func (p *DescribeTopicResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DescribeTopicResponse) ReadField1(iprot thrift.TProtocol) error {
	p.TopicInfo = &TopicInfo{}
	if err := p.TopicInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicInfo, err)
	}
	return nil
}

func (p *DescribeTopicResponse) ReadField2(iprot thrift.TProtocol) error {
	p.TopicAttribute = &TopicAttribute{}
	if err := p.TopicAttribute.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicAttribute, err)
	}
	return nil
}

func (p *DescribeTopicResponse) ReadField3(iprot thrift.TProtocol) error {
	p.TopicState = &TopicState{}
	if err := p.TopicState.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicState, err)
	}
	return nil
}

func (p *DescribeTopicResponse) ReadField4(iprot thrift.TProtocol) error {
	p.TopicQuota = &quota.BaseQuota{}
	if err := p.TopicQuota.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicQuota, err)
	}
	return nil
}

func (p *DescribeTopicResponse) ReadField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]int32, size)
	p.AclMap = tMap
	for i := 0; i < size; i++ {
		var _key12 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key12 = v
		}
		var _val13 int32
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val13 = v
		}
		p.AclMap[_key12] = _val13
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *DescribeTopicResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DescribeTopicResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DescribeTopicResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicInfo", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicInfo: %s", p, err)
	}
	if err := p.TopicInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicInfo: %s", p, err)
	}
	return err
}

func (p *DescribeTopicResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicAttribute", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:topicAttribute: %s", p, err)
	}
	if err := p.TopicAttribute.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicAttribute, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:topicAttribute: %s", p, err)
	}
	return err
}

func (p *DescribeTopicResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicState", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:topicState: %s", p, err)
	}
	if err := p.TopicState.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicState, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:topicState: %s", p, err)
	}
	return err
}

func (p *DescribeTopicResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicQuota", thrift.STRUCT, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:topicQuota: %s", p, err)
	}
	if err := p.TopicQuota.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicQuota, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:topicQuota: %s", p, err)
	}
	return err
}

func (p *DescribeTopicResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("aclMap", thrift.MAP, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:aclMap: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(p.AclMap)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.AclMap {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteI32(int32(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:aclMap: %s", p, err)
	}
	return err
}

func (p *DescribeTopicResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DescribeTopicResponse(%+v)", *p)
}

type GetDescribeInfoResponse struct {
	TopicTalosResourceName *TopicTalosResourceName `thrift:"topicTalosResourceName,1,required" json:"topicTalosResourceName"`
	PartitionNumber        int32                   `thrift:"partitionNumber,2,required" json:"partitionNumber"`
}

func NewGetDescribeInfoResponse() *GetDescribeInfoResponse {
	return &GetDescribeInfoResponse{}
}

var GetDescribeInfoResponse_TopicTalosResourceName_DEFAULT *TopicTalosResourceName

func (p *GetDescribeInfoResponse) GetTopicTalosResourceName() *TopicTalosResourceName {
	if !p.IsSetTopicTalosResourceName() {
		return GetDescribeInfoResponse_TopicTalosResourceName_DEFAULT
	}
	return p.TopicTalosResourceName
}

func (p *GetDescribeInfoResponse) GetPartitionNumber() int32 {
	return p.PartitionNumber
}
func (p *GetDescribeInfoResponse) IsSetTopicTalosResourceName() bool {
	return p.TopicTalosResourceName != nil
}

func (p *GetDescribeInfoResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetDescribeInfoResponse) ReadField1(iprot thrift.TProtocol) error {
	p.TopicTalosResourceName = &TopicTalosResourceName{}
	if err := p.TopicTalosResourceName.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicTalosResourceName, err)
	}
	return nil
}

func (p *GetDescribeInfoResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.PartitionNumber = v
	}
	return nil
}

func (p *GetDescribeInfoResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetDescribeInfoResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetDescribeInfoResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicTalosResourceName", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicTalosResourceName: %s", p, err)
	}
	if err := p.TopicTalosResourceName.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicTalosResourceName, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicTalosResourceName: %s", p, err)
	}
	return err
}

func (p *GetDescribeInfoResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("partitionNumber", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:partitionNumber: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.PartitionNumber)); err != nil {
		return fmt.Errorf("%T.partitionNumber (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:partitionNumber: %s", p, err)
	}
	return err
}

func (p *GetDescribeInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDescribeInfoResponse(%+v)", *p)
}

type GetTopicAttributeResponse struct {
	TopicTalosResourceName *TopicTalosResourceName `thrift:"topicTalosResourceName,1,required" json:"topicTalosResourceName"`
	TopicAttribute         *TopicAttribute         `thrift:"topicAttribute,2,required" json:"topicAttribute"`
}

func NewGetTopicAttributeResponse() *GetTopicAttributeResponse {
	return &GetTopicAttributeResponse{}
}

var GetTopicAttributeResponse_TopicTalosResourceName_DEFAULT *TopicTalosResourceName

func (p *GetTopicAttributeResponse) GetTopicTalosResourceName() *TopicTalosResourceName {
	if !p.IsSetTopicTalosResourceName() {
		return GetTopicAttributeResponse_TopicTalosResourceName_DEFAULT
	}
	return p.TopicTalosResourceName
}

var GetTopicAttributeResponse_TopicAttribute_DEFAULT *TopicAttribute

func (p *GetTopicAttributeResponse) GetTopicAttribute() *TopicAttribute {
	if !p.IsSetTopicAttribute() {
		return GetTopicAttributeResponse_TopicAttribute_DEFAULT
	}
	return p.TopicAttribute
}
func (p *GetTopicAttributeResponse) IsSetTopicTalosResourceName() bool {
	return p.TopicTalosResourceName != nil
}

func (p *GetTopicAttributeResponse) IsSetTopicAttribute() bool {
	return p.TopicAttribute != nil
}

func (p *GetTopicAttributeResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTopicAttributeResponse) ReadField1(iprot thrift.TProtocol) error {
	p.TopicTalosResourceName = &TopicTalosResourceName{}
	if err := p.TopicTalosResourceName.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicTalosResourceName, err)
	}
	return nil
}

func (p *GetTopicAttributeResponse) ReadField2(iprot thrift.TProtocol) error {
	p.TopicAttribute = &TopicAttribute{}
	if err := p.TopicAttribute.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicAttribute, err)
	}
	return nil
}

func (p *GetTopicAttributeResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetTopicAttributeResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTopicAttributeResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicTalosResourceName", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicTalosResourceName: %s", p, err)
	}
	if err := p.TopicTalosResourceName.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicTalosResourceName, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicTalosResourceName: %s", p, err)
	}
	return err
}

func (p *GetTopicAttributeResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicAttribute", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:topicAttribute: %s", p, err)
	}
	if err := p.TopicAttribute.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicAttribute, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:topicAttribute: %s", p, err)
	}
	return err
}

func (p *GetTopicAttributeResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTopicAttributeResponse(%+v)", *p)
}

type ListTopicsResponse struct {
	TopicInfos []*TopicInfo `thrift:"topicInfos,1,required" json:"topicInfos"`
}

func NewListTopicsResponse() *ListTopicsResponse {
	return &ListTopicsResponse{}
}

func (p *ListTopicsResponse) GetTopicInfos() []*TopicInfo {
	return p.TopicInfos
}
func (p *ListTopicsResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListTopicsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*TopicInfo, 0, size)
	p.TopicInfos = tSlice
	for i := 0; i < size; i++ {
		_elem14 := &TopicInfo{}
		if err := _elem14.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem14, err)
		}
		p.TopicInfos = append(p.TopicInfos, _elem14)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ListTopicsResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListTopicsResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListTopicsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicInfos", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicInfos: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TopicInfos)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.TopicInfos {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicInfos: %s", p, err)
	}
	return err
}

func (p *ListTopicsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListTopicsResponse(%+v)", *p)
}

type ListTopicsInfoResponse struct {
	TopicList []*Topic `thrift:"topicList,1,required" json:"topicList"`
}

func NewListTopicsInfoResponse() *ListTopicsInfoResponse {
	return &ListTopicsInfoResponse{}
}

func (p *ListTopicsInfoResponse) GetTopicList() []*Topic {
	return p.TopicList
}
func (p *ListTopicsInfoResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListTopicsInfoResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Topic, 0, size)
	p.TopicList = tSlice
	for i := 0; i < size; i++ {
		_elem15 := &Topic{}
		if err := _elem15.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem15, err)
		}
		p.TopicList = append(p.TopicList, _elem15)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ListTopicsInfoResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListTopicsInfoResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListTopicsInfoResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicList", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicList: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TopicList)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.TopicList {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicList: %s", p, err)
	}
	return err
}

func (p *ListTopicsInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListTopicsInfoResponse(%+v)", *p)
}

type SetTopicQuotaRequest struct {
	TopicResourceName *TopicTalosResourceName `thrift:"topicResourceName,1,required" json:"topicResourceName"`
	TopicQuota        *quota.BaseQuota        `thrift:"topicQuota,2,required" json:"topicQuota"`
}

func NewSetTopicQuotaRequest() *SetTopicQuotaRequest {
	return &SetTopicQuotaRequest{}
}

var SetTopicQuotaRequest_TopicResourceName_DEFAULT *TopicTalosResourceName

func (p *SetTopicQuotaRequest) GetTopicResourceName() *TopicTalosResourceName {
	if !p.IsSetTopicResourceName() {
		return SetTopicQuotaRequest_TopicResourceName_DEFAULT
	}
	return p.TopicResourceName
}

var SetTopicQuotaRequest_TopicQuota_DEFAULT *quota.BaseQuota

func (p *SetTopicQuotaRequest) GetTopicQuota() *quota.BaseQuota {
	if !p.IsSetTopicQuota() {
		return SetTopicQuotaRequest_TopicQuota_DEFAULT
	}
	return p.TopicQuota
}
func (p *SetTopicQuotaRequest) IsSetTopicResourceName() bool {
	return p.TopicResourceName != nil
}

func (p *SetTopicQuotaRequest) IsSetTopicQuota() bool {
	return p.TopicQuota != nil
}

func (p *SetTopicQuotaRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetTopicQuotaRequest) ReadField1(iprot thrift.TProtocol) error {
	p.TopicResourceName = &TopicTalosResourceName{}
	if err := p.TopicResourceName.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicResourceName, err)
	}
	return nil
}

func (p *SetTopicQuotaRequest) ReadField2(iprot thrift.TProtocol) error {
	p.TopicQuota = &quota.BaseQuota{}
	if err := p.TopicQuota.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicQuota, err)
	}
	return nil
}

func (p *SetTopicQuotaRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SetTopicQuotaRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetTopicQuotaRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicResourceName", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicResourceName: %s", p, err)
	}
	if err := p.TopicResourceName.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicResourceName, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicResourceName: %s", p, err)
	}
	return err
}

func (p *SetTopicQuotaRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicQuota", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:topicQuota: %s", p, err)
	}
	if err := p.TopicQuota.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicQuota, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:topicQuota: %s", p, err)
	}
	return err
}

func (p *SetTopicQuotaRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetTopicQuotaRequest(%+v)", *p)
}

type QueryTopicQuotaRequest struct {
	TopicResourceName *TopicTalosResourceName `thrift:"topicResourceName,1,required" json:"topicResourceName"`
}

func NewQueryTopicQuotaRequest() *QueryTopicQuotaRequest {
	return &QueryTopicQuotaRequest{}
}

var QueryTopicQuotaRequest_TopicResourceName_DEFAULT *TopicTalosResourceName

func (p *QueryTopicQuotaRequest) GetTopicResourceName() *TopicTalosResourceName {
	if !p.IsSetTopicResourceName() {
		return QueryTopicQuotaRequest_TopicResourceName_DEFAULT
	}
	return p.TopicResourceName
}
func (p *QueryTopicQuotaRequest) IsSetTopicResourceName() bool {
	return p.TopicResourceName != nil
}

func (p *QueryTopicQuotaRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryTopicQuotaRequest) ReadField1(iprot thrift.TProtocol) error {
	p.TopicResourceName = &TopicTalosResourceName{}
	if err := p.TopicResourceName.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicResourceName, err)
	}
	return nil
}

func (p *QueryTopicQuotaRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryTopicQuotaRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryTopicQuotaRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicResourceName", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicResourceName: %s", p, err)
	}
	if err := p.TopicResourceName.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicResourceName, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicResourceName: %s", p, err)
	}
	return err
}

func (p *QueryTopicQuotaRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryTopicQuotaRequest(%+v)", *p)
}

type QueryTopicQuotaResponse struct {
	TopicQuota *quota.BaseQuota `thrift:"topicQuota,1,required" json:"topicQuota"`
}

func NewQueryTopicQuotaResponse() *QueryTopicQuotaResponse {
	return &QueryTopicQuotaResponse{}
}

var QueryTopicQuotaResponse_TopicQuota_DEFAULT *quota.BaseQuota

func (p *QueryTopicQuotaResponse) GetTopicQuota() *quota.BaseQuota {
	if !p.IsSetTopicQuota() {
		return QueryTopicQuotaResponse_TopicQuota_DEFAULT
	}
	return p.TopicQuota
}
func (p *QueryTopicQuotaResponse) IsSetTopicQuota() bool {
	return p.TopicQuota != nil
}

func (p *QueryTopicQuotaResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryTopicQuotaResponse) ReadField1(iprot thrift.TProtocol) error {
	p.TopicQuota = &quota.BaseQuota{}
	if err := p.TopicQuota.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicQuota, err)
	}
	return nil
}

func (p *QueryTopicQuotaResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryTopicQuotaResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryTopicQuotaResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicQuota", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicQuota: %s", p, err)
	}
	if err := p.TopicQuota.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicQuota, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicQuota: %s", p, err)
	}
	return err
}

func (p *QueryTopicQuotaResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryTopicQuotaResponse(%+v)", *p)
}

type DeleteTopicQuotaRequest struct {
	TopicResourceName *TopicTalosResourceName `thrift:"topicResourceName,1,required" json:"topicResourceName"`
}

func NewDeleteTopicQuotaRequest() *DeleteTopicQuotaRequest {
	return &DeleteTopicQuotaRequest{}
}

var DeleteTopicQuotaRequest_TopicResourceName_DEFAULT *TopicTalosResourceName

func (p *DeleteTopicQuotaRequest) GetTopicResourceName() *TopicTalosResourceName {
	if !p.IsSetTopicResourceName() {
		return DeleteTopicQuotaRequest_TopicResourceName_DEFAULT
	}
	return p.TopicResourceName
}
func (p *DeleteTopicQuotaRequest) IsSetTopicResourceName() bool {
	return p.TopicResourceName != nil
}

func (p *DeleteTopicQuotaRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteTopicQuotaRequest) ReadField1(iprot thrift.TProtocol) error {
	p.TopicResourceName = &TopicTalosResourceName{}
	if err := p.TopicResourceName.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicResourceName, err)
	}
	return nil
}

func (p *DeleteTopicQuotaRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeleteTopicQuotaRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteTopicQuotaRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicResourceName", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicResourceName: %s", p, err)
	}
	if err := p.TopicResourceName.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicResourceName, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicResourceName: %s", p, err)
	}
	return err
}

func (p *DeleteTopicQuotaRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteTopicQuotaRequest(%+v)", *p)
}

type SetPermissionRequest struct {
	TopicResourceName *TopicTalosResourceName `thrift:"topicResourceName,1,required" json:"topicResourceName"`
	Grant             *authorization.Grantee  `thrift:"grant,2,required" json:"grant"`
	Permission        Permission              `thrift:"permission,3,required" json:"permission"`
}

func NewSetPermissionRequest() *SetPermissionRequest {
	return &SetPermissionRequest{}
}

var SetPermissionRequest_TopicResourceName_DEFAULT *TopicTalosResourceName

func (p *SetPermissionRequest) GetTopicResourceName() *TopicTalosResourceName {
	if !p.IsSetTopicResourceName() {
		return SetPermissionRequest_TopicResourceName_DEFAULT
	}
	return p.TopicResourceName
}

var SetPermissionRequest_Grant_DEFAULT *authorization.Grantee

func (p *SetPermissionRequest) GetGrant() *authorization.Grantee {
	if !p.IsSetGrant() {
		return SetPermissionRequest_Grant_DEFAULT
	}
	return p.Grant
}

func (p *SetPermissionRequest) GetPermission() Permission {
	return p.Permission
}
func (p *SetPermissionRequest) IsSetTopicResourceName() bool {
	return p.TopicResourceName != nil
}

func (p *SetPermissionRequest) IsSetGrant() bool {
	return p.Grant != nil
}

func (p *SetPermissionRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetPermissionRequest) ReadField1(iprot thrift.TProtocol) error {
	p.TopicResourceName = &TopicTalosResourceName{}
	if err := p.TopicResourceName.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicResourceName, err)
	}
	return nil
}

func (p *SetPermissionRequest) ReadField2(iprot thrift.TProtocol) error {
	p.Grant = &authorization.Grantee{}
	if err := p.Grant.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Grant, err)
	}
	return nil
}

func (p *SetPermissionRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := Permission(v)
		p.Permission = temp
	}
	return nil
}

func (p *SetPermissionRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SetPermissionRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetPermissionRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicResourceName", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicResourceName: %s", p, err)
	}
	if err := p.TopicResourceName.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicResourceName, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicResourceName: %s", p, err)
	}
	return err
}

func (p *SetPermissionRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("grant", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:grant: %s", p, err)
	}
	if err := p.Grant.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Grant, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:grant: %s", p, err)
	}
	return err
}

func (p *SetPermissionRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("permission", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:permission: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Permission)); err != nil {
		return fmt.Errorf("%T.permission (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:permission: %s", p, err)
	}
	return err
}

func (p *SetPermissionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetPermissionRequest(%+v)", *p)
}

type RevokePermissionRequest struct {
	TopicResourceName *TopicTalosResourceName `thrift:"topicResourceName,1,required" json:"topicResourceName"`
	Grant             *authorization.Grantee  `thrift:"grant,2,required" json:"grant"`
}

func NewRevokePermissionRequest() *RevokePermissionRequest {
	return &RevokePermissionRequest{}
}

var RevokePermissionRequest_TopicResourceName_DEFAULT *TopicTalosResourceName

func (p *RevokePermissionRequest) GetTopicResourceName() *TopicTalosResourceName {
	if !p.IsSetTopicResourceName() {
		return RevokePermissionRequest_TopicResourceName_DEFAULT
	}
	return p.TopicResourceName
}

var RevokePermissionRequest_Grant_DEFAULT *authorization.Grantee

func (p *RevokePermissionRequest) GetGrant() *authorization.Grantee {
	if !p.IsSetGrant() {
		return RevokePermissionRequest_Grant_DEFAULT
	}
	return p.Grant
}
func (p *RevokePermissionRequest) IsSetTopicResourceName() bool {
	return p.TopicResourceName != nil
}

func (p *RevokePermissionRequest) IsSetGrant() bool {
	return p.Grant != nil
}

func (p *RevokePermissionRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RevokePermissionRequest) ReadField1(iprot thrift.TProtocol) error {
	p.TopicResourceName = &TopicTalosResourceName{}
	if err := p.TopicResourceName.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicResourceName, err)
	}
	return nil
}

func (p *RevokePermissionRequest) ReadField2(iprot thrift.TProtocol) error {
	p.Grant = &authorization.Grantee{}
	if err := p.Grant.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Grant, err)
	}
	return nil
}

func (p *RevokePermissionRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RevokePermissionRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RevokePermissionRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicResourceName", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicResourceName: %s", p, err)
	}
	if err := p.TopicResourceName.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicResourceName, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicResourceName: %s", p, err)
	}
	return err
}

func (p *RevokePermissionRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("grant", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:grant: %s", p, err)
	}
	if err := p.Grant.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Grant, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:grant: %s", p, err)
	}
	return err
}

func (p *RevokePermissionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RevokePermissionRequest(%+v)", *p)
}

type ListPermissionRequest struct {
	TopicResourceName *TopicTalosResourceName `thrift:"topicResourceName,1,required" json:"topicResourceName"`
}

func NewListPermissionRequest() *ListPermissionRequest {
	return &ListPermissionRequest{}
}

var ListPermissionRequest_TopicResourceName_DEFAULT *TopicTalosResourceName

func (p *ListPermissionRequest) GetTopicResourceName() *TopicTalosResourceName {
	if !p.IsSetTopicResourceName() {
		return ListPermissionRequest_TopicResourceName_DEFAULT
	}
	return p.TopicResourceName
}
func (p *ListPermissionRequest) IsSetTopicResourceName() bool {
	return p.TopicResourceName != nil
}

func (p *ListPermissionRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListPermissionRequest) ReadField1(iprot thrift.TProtocol) error {
	p.TopicResourceName = &TopicTalosResourceName{}
	if err := p.TopicResourceName.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicResourceName, err)
	}
	return nil
}

func (p *ListPermissionRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListPermissionRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListPermissionRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicResourceName", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicResourceName: %s", p, err)
	}
	if err := p.TopicResourceName.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicResourceName, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicResourceName: %s", p, err)
	}
	return err
}

func (p *ListPermissionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListPermissionRequest(%+v)", *p)
}

type ListPermissionResponse struct {
	Permissions map[string]int32 `thrift:"permissions,1,required" json:"permissions"`
}

func NewListPermissionResponse() *ListPermissionResponse {
	return &ListPermissionResponse{}
}

func (p *ListPermissionResponse) GetPermissions() map[string]int32 {
	return p.Permissions
}
func (p *ListPermissionResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListPermissionResponse) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]int32, size)
	p.Permissions = tMap
	for i := 0; i < size; i++ {
		var _key16 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key16 = v
		}
		var _val17 int32
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val17 = v
		}
		p.Permissions[_key16] = _val17
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *ListPermissionResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListPermissionResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListPermissionResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("permissions", thrift.MAP, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:permissions: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(p.Permissions)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Permissions {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteI32(int32(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:permissions: %s", p, err)
	}
	return err
}

func (p *ListPermissionResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListPermissionResponse(%+v)", *p)
}

type GetPermissionRequest struct {
	TopicResourceName *TopicTalosResourceName `thrift:"topicResourceName,1,required" json:"topicResourceName"`
	Grant             *authorization.Grantee  `thrift:"grant,2,required" json:"grant"`
}

func NewGetPermissionRequest() *GetPermissionRequest {
	return &GetPermissionRequest{}
}

var GetPermissionRequest_TopicResourceName_DEFAULT *TopicTalosResourceName

func (p *GetPermissionRequest) GetTopicResourceName() *TopicTalosResourceName {
	if !p.IsSetTopicResourceName() {
		return GetPermissionRequest_TopicResourceName_DEFAULT
	}
	return p.TopicResourceName
}

var GetPermissionRequest_Grant_DEFAULT *authorization.Grantee

func (p *GetPermissionRequest) GetGrant() *authorization.Grantee {
	if !p.IsSetGrant() {
		return GetPermissionRequest_Grant_DEFAULT
	}
	return p.Grant
}
func (p *GetPermissionRequest) IsSetTopicResourceName() bool {
	return p.TopicResourceName != nil
}

func (p *GetPermissionRequest) IsSetGrant() bool {
	return p.Grant != nil
}

func (p *GetPermissionRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPermissionRequest) ReadField1(iprot thrift.TProtocol) error {
	p.TopicResourceName = &TopicTalosResourceName{}
	if err := p.TopicResourceName.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicResourceName, err)
	}
	return nil
}

func (p *GetPermissionRequest) ReadField2(iprot thrift.TProtocol) error {
	p.Grant = &authorization.Grantee{}
	if err := p.Grant.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Grant, err)
	}
	return nil
}

func (p *GetPermissionRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetPermissionRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPermissionRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicResourceName", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicResourceName: %s", p, err)
	}
	if err := p.TopicResourceName.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicResourceName, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicResourceName: %s", p, err)
	}
	return err
}

func (p *GetPermissionRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("grant", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:grant: %s", p, err)
	}
	if err := p.Grant.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Grant, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:grant: %s", p, err)
	}
	return err
}

func (p *GetPermissionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPermissionRequest(%+v)", *p)
}

type GetPermissionResponse struct {
	Permission int32 `thrift:"permission,1,required" json:"permission"`
}

func NewGetPermissionResponse() *GetPermissionResponse {
	return &GetPermissionResponse{}
}

func (p *GetPermissionResponse) GetPermission() int32 {
	return p.Permission
}
func (p *GetPermissionResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPermissionResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Permission = v
	}
	return nil
}

func (p *GetPermissionResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetPermissionResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPermissionResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("permission", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:permission: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Permission)); err != nil {
		return fmt.Errorf("%T.permission (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:permission: %s", p, err)
	}
	return err
}

func (p *GetPermissionResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPermissionResponse(%+v)", *p)
}
