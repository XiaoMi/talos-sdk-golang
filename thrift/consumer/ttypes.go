// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package consumer

import (
	"bytes"
	"fmt"

	"github.com/XiaoMi/talos-sdk-golang/thrift/common"
	"github.com/XiaoMi/talos-sdk-golang/thrift/thrift"
	"github.com/XiaoMi/talos-sdk-golang/thrift/topic"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = common.GoUnusedProtection__
var _ = topic.GoUnusedProtection__
var GoUnusedProtection__ int

type ConsumeUnit struct {
	ConsumerGroup          string                        `thrift:"consumerGroup,1,required" json:"consumerGroup"`
	TopicTalosResourceName *topic.TopicTalosResourceName `thrift:"topicTalosResourceName,2,required" json:"topicTalosResourceName"`
	PartitionIdList        []int32                       `thrift:"partitionIdList,3,required" json:"partitionIdList"`
	WorkerId               string                        `thrift:"workerId,4,required" json:"workerId"`
}

func NewConsumeUnit() *ConsumeUnit {
	return &ConsumeUnit{}
}

func (p *ConsumeUnit) GetConsumerGroup() string {
	return p.ConsumerGroup
}

var ConsumeUnit_TopicTalosResourceName_DEFAULT *topic.TopicTalosResourceName

func (p *ConsumeUnit) GetTopicTalosResourceName() *topic.TopicTalosResourceName {
	if !p.IsSetTopicTalosResourceName() {
		return ConsumeUnit_TopicTalosResourceName_DEFAULT
	}
	return p.TopicTalosResourceName
}

func (p *ConsumeUnit) GetPartitionIdList() []int32 {
	return p.PartitionIdList
}

func (p *ConsumeUnit) GetWorkerId() string {
	return p.WorkerId
}
func (p *ConsumeUnit) IsSetTopicTalosResourceName() bool {
	return p.TopicTalosResourceName != nil
}

func (p *ConsumeUnit) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ConsumeUnit) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ConsumerGroup = v
	}
	return nil
}

func (p *ConsumeUnit) ReadField2(iprot thrift.TProtocol) error {
	p.TopicTalosResourceName = &topic.TopicTalosResourceName{}
	if err := p.TopicTalosResourceName.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicTalosResourceName, err)
	}
	return nil
}

func (p *ConsumeUnit) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]int32, 0, size)
	p.PartitionIdList = tSlice
	for i := 0; i < size; i++ {
		var _elem0 int32
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem0 = v
		}
		p.PartitionIdList = append(p.PartitionIdList, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ConsumeUnit) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.WorkerId = v
	}
	return nil
}

func (p *ConsumeUnit) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ConsumeUnit"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ConsumeUnit) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("consumerGroup", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:consumerGroup: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ConsumerGroup)); err != nil {
		return fmt.Errorf("%T.consumerGroup (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:consumerGroup: %s", p, err)
	}
	return err
}

func (p *ConsumeUnit) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicTalosResourceName", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:topicTalosResourceName: %s", p, err)
	}
	if err := p.TopicTalosResourceName.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicTalosResourceName, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:topicTalosResourceName: %s", p, err)
	}
	return err
}

func (p *ConsumeUnit) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("partitionIdList", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:partitionIdList: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.PartitionIdList)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.PartitionIdList {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:partitionIdList: %s", p, err)
	}
	return err
}

func (p *ConsumeUnit) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("workerId", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:workerId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.WorkerId)); err != nil {
		return fmt.Errorf("%T.workerId (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:workerId: %s", p, err)
	}
	return err
}

func (p *ConsumeUnit) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConsumeUnit(%+v)", *p)
}

type TopicsConsumeUnit struct {
	ConsumerGroup   string             `thrift:"consumerGroup,1,required" json:"consumerGroup"`
	TopicPartitions map[string][]int32 `thrift:"topicPartitions,2,required" json:"topicPartitions"`
	WorkerId        string             `thrift:"workerId,3,required" json:"workerId"`
	TopicGroup      string             `thrift:"topicGroup,4,required" json:"topicGroup"`
}

func NewTopicsConsumeUnit() *TopicsConsumeUnit {
	return &TopicsConsumeUnit{}
}

func (p *TopicsConsumeUnit) GetConsumerGroup() string {
	return p.ConsumerGroup
}

func (p *TopicsConsumeUnit) GetTopicPartitions() map[string][]int32 {
	return p.TopicPartitions
}

func (p *TopicsConsumeUnit) GetWorkerId() string {
	return p.WorkerId
}

func (p *TopicsConsumeUnit) GetTopicGroup() string {
	return p.TopicGroup
}
func (p *TopicsConsumeUnit) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TopicsConsumeUnit) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ConsumerGroup = v
	}
	return nil
}

func (p *TopicsConsumeUnit) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string][]int32, size)
	p.TopicPartitions = tMap
	for i := 0; i < size; i++ {
		var _key1 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key1 = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return fmt.Errorf("error reading list begin: %s", err)
		}
		tSlice := make([]int32, 0, size)
		_val2 := tSlice
		for i := 0; i < size; i++ {
			var _elem3 int32
			if v, err := iprot.ReadI32(); err != nil {
				return fmt.Errorf("error reading field 0: %s", err)
			} else {
				_elem3 = v
			}
			_val2 = append(_val2, _elem3)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return fmt.Errorf("error reading list end: %s", err)
		}
		p.TopicPartitions[_key1] = _val2
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *TopicsConsumeUnit) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.WorkerId = v
	}
	return nil
}

func (p *TopicsConsumeUnit) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.TopicGroup = v
	}
	return nil
}

func (p *TopicsConsumeUnit) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TopicsConsumeUnit"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TopicsConsumeUnit) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("consumerGroup", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:consumerGroup: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ConsumerGroup)); err != nil {
		return fmt.Errorf("%T.consumerGroup (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:consumerGroup: %s", p, err)
	}
	return err
}

func (p *TopicsConsumeUnit) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicPartitions", thrift.MAP, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:topicPartitions: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.TopicPartitions)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.TopicPartitions {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.I32, len(v)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range v {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:topicPartitions: %s", p, err)
	}
	return err
}

func (p *TopicsConsumeUnit) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("workerId", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:workerId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.WorkerId)); err != nil {
		return fmt.Errorf("%T.workerId (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:workerId: %s", p, err)
	}
	return err
}

func (p *TopicsConsumeUnit) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicGroup", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:topicGroup: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TopicGroup)); err != nil {
		return fmt.Errorf("%T.topicGroup (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:topicGroup: %s", p, err)
	}
	return err
}

func (p *TopicsConsumeUnit) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TopicsConsumeUnit(%+v)", *p)
}

type CheckPoint struct {
	ConsumerGroup     string                   `thrift:"consumerGroup,1,required" json:"consumerGroup"`
	TopicAndPartition *topic.TopicAndPartition `thrift:"topicAndPartition,2,required" json:"topicAndPartition"`
	MsgOffset         int64                    `thrift:"msgOffset,3,required" json:"msgOffset"`
	WorkerId          string                   `thrift:"workerId,4,required" json:"workerId"`
	LastCommitOffset  *int64                   `thrift:"lastCommitOffset,5" json:"lastCommitOffset"`
}

func NewCheckPoint() *CheckPoint {
	return &CheckPoint{}
}

func (p *CheckPoint) GetConsumerGroup() string {
	return p.ConsumerGroup
}

var CheckPoint_TopicAndPartition_DEFAULT *topic.TopicAndPartition

func (p *CheckPoint) GetTopicAndPartition() *topic.TopicAndPartition {
	if !p.IsSetTopicAndPartition() {
		return CheckPoint_TopicAndPartition_DEFAULT
	}
	return p.TopicAndPartition
}

func (p *CheckPoint) GetMsgOffset() int64 {
	return p.MsgOffset
}

func (p *CheckPoint) GetWorkerId() string {
	return p.WorkerId
}

var CheckPoint_LastCommitOffset_DEFAULT int64

func (p *CheckPoint) GetLastCommitOffset() int64 {
	if !p.IsSetLastCommitOffset() {
		return CheckPoint_LastCommitOffset_DEFAULT
	}
	return *p.LastCommitOffset
}
func (p *CheckPoint) IsSetTopicAndPartition() bool {
	return p.TopicAndPartition != nil
}

func (p *CheckPoint) IsSetLastCommitOffset() bool {
	return p.LastCommitOffset != nil
}

func (p *CheckPoint) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CheckPoint) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ConsumerGroup = v
	}
	return nil
}

func (p *CheckPoint) ReadField2(iprot thrift.TProtocol) error {
	p.TopicAndPartition = &topic.TopicAndPartition{}
	if err := p.TopicAndPartition.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicAndPartition, err)
	}
	return nil
}

func (p *CheckPoint) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MsgOffset = v
	}
	return nil
}

func (p *CheckPoint) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.WorkerId = v
	}
	return nil
}

func (p *CheckPoint) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.LastCommitOffset = &v
	}
	return nil
}

func (p *CheckPoint) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CheckPoint"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CheckPoint) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("consumerGroup", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:consumerGroup: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ConsumerGroup)); err != nil {
		return fmt.Errorf("%T.consumerGroup (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:consumerGroup: %s", p, err)
	}
	return err
}

func (p *CheckPoint) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicAndPartition", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:topicAndPartition: %s", p, err)
	}
	if err := p.TopicAndPartition.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicAndPartition, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:topicAndPartition: %s", p, err)
	}
	return err
}

func (p *CheckPoint) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msgOffset", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:msgOffset: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.MsgOffset)); err != nil {
		return fmt.Errorf("%T.msgOffset (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:msgOffset: %s", p, err)
	}
	return err
}

func (p *CheckPoint) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("workerId", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:workerId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.WorkerId)); err != nil {
		return fmt.Errorf("%T.workerId (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:workerId: %s", p, err)
	}
	return err
}

func (p *CheckPoint) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastCommitOffset() {
		if err := oprot.WriteFieldBegin("lastCommitOffset", thrift.I64, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:lastCommitOffset: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.LastCommitOffset)); err != nil {
			return fmt.Errorf("%T.lastCommitOffset (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:lastCommitOffset: %s", p, err)
		}
	}
	return err
}

func (p *CheckPoint) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckPoint(%+v)", *p)
}

type LockPartitionRequest struct {
	ConsumeUnit *ConsumeUnit `thrift:"consumeUnit,1,required" json:"consumeUnit"`
}

func NewLockPartitionRequest() *LockPartitionRequest {
	return &LockPartitionRequest{}
}

var LockPartitionRequest_ConsumeUnit_DEFAULT *ConsumeUnit

func (p *LockPartitionRequest) GetConsumeUnit() *ConsumeUnit {
	if !p.IsSetConsumeUnit() {
		return LockPartitionRequest_ConsumeUnit_DEFAULT
	}
	return p.ConsumeUnit
}
func (p *LockPartitionRequest) IsSetConsumeUnit() bool {
	return p.ConsumeUnit != nil
}

func (p *LockPartitionRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LockPartitionRequest) ReadField1(iprot thrift.TProtocol) error {
	p.ConsumeUnit = &ConsumeUnit{}
	if err := p.ConsumeUnit.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ConsumeUnit, err)
	}
	return nil
}

func (p *LockPartitionRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LockPartitionRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LockPartitionRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("consumeUnit", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:consumeUnit: %s", p, err)
	}
	if err := p.ConsumeUnit.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.ConsumeUnit, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:consumeUnit: %s", p, err)
	}
	return err
}

func (p *LockPartitionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LockPartitionRequest(%+v)", *p)
}

type LockPartitionResponse struct {
	SuccessPartitions []int32 `thrift:"successPartitions,1,required" json:"successPartitions"`
	FailedPartitions  []int32 `thrift:"failedPartitions,2,required" json:"failedPartitions"`
}

func NewLockPartitionResponse() *LockPartitionResponse {
	return &LockPartitionResponse{}
}

func (p *LockPartitionResponse) GetSuccessPartitions() []int32 {
	return p.SuccessPartitions
}

func (p *LockPartitionResponse) GetFailedPartitions() []int32 {
	return p.FailedPartitions
}
func (p *LockPartitionResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LockPartitionResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]int32, 0, size)
	p.SuccessPartitions = tSlice
	for i := 0; i < size; i++ {
		var _elem4 int32
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem4 = v
		}
		p.SuccessPartitions = append(p.SuccessPartitions, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *LockPartitionResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]int32, 0, size)
	p.FailedPartitions = tSlice
	for i := 0; i < size; i++ {
		var _elem5 int32
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem5 = v
		}
		p.FailedPartitions = append(p.FailedPartitions, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *LockPartitionResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LockPartitionResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LockPartitionResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("successPartitions", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:successPartitions: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.SuccessPartitions)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.SuccessPartitions {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:successPartitions: %s", p, err)
	}
	return err
}

func (p *LockPartitionResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("failedPartitions", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:failedPartitions: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.FailedPartitions)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.FailedPartitions {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:failedPartitions: %s", p, err)
	}
	return err
}

func (p *LockPartitionResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LockPartitionResponse(%+v)", *p)
}

type CheckRegisterRequest struct {
	ConsumeUnit *ConsumeUnit `thrift:"consumeUnit,1,required" json:"consumeUnit"`
}

func NewCheckRegisterRequest() *CheckRegisterRequest {
	return &CheckRegisterRequest{}
}

var CheckRegisterRequest_ConsumeUnit_DEFAULT *ConsumeUnit

func (p *CheckRegisterRequest) GetConsumeUnit() *ConsumeUnit {
	if !p.IsSetConsumeUnit() {
		return CheckRegisterRequest_ConsumeUnit_DEFAULT
	}
	return p.ConsumeUnit
}
func (p *CheckRegisterRequest) IsSetConsumeUnit() bool {
	return p.ConsumeUnit != nil
}

func (p *CheckRegisterRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CheckRegisterRequest) ReadField1(iprot thrift.TProtocol) error {
	p.ConsumeUnit = &ConsumeUnit{}
	if err := p.ConsumeUnit.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ConsumeUnit, err)
	}
	return nil
}

func (p *CheckRegisterRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CheckRegisterRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CheckRegisterRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("consumeUnit", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:consumeUnit: %s", p, err)
	}
	if err := p.ConsumeUnit.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.ConsumeUnit, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:consumeUnit: %s", p, err)
	}
	return err
}

func (p *CheckRegisterRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckRegisterRequest(%+v)", *p)
}

type CheckRegisterResponse struct {
	CanRegister bool `thrift:"canRegister,1,required" json:"canRegister"`
}

func NewCheckRegisterResponse() *CheckRegisterResponse {
	return &CheckRegisterResponse{}
}

func (p *CheckRegisterResponse) GetCanRegister() bool {
	return p.CanRegister
}
func (p *CheckRegisterResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CheckRegisterResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.CanRegister = v
	}
	return nil
}

func (p *CheckRegisterResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CheckRegisterResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CheckRegisterResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("canRegister", thrift.BOOL, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:canRegister: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.CanRegister)); err != nil {
		return fmt.Errorf("%T.canRegister (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:canRegister: %s", p, err)
	}
	return err
}

func (p *CheckRegisterResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckRegisterResponse(%+v)", *p)
}

type LockWorkerRequest struct {
	ConsumeUnit *ConsumeUnit `thrift:"consumeUnit,1,required" json:"consumeUnit"`
}

func NewLockWorkerRequest() *LockWorkerRequest {
	return &LockWorkerRequest{}
}

var LockWorkerRequest_ConsumeUnit_DEFAULT *ConsumeUnit

func (p *LockWorkerRequest) GetConsumeUnit() *ConsumeUnit {
	if !p.IsSetConsumeUnit() {
		return LockWorkerRequest_ConsumeUnit_DEFAULT
	}
	return p.ConsumeUnit
}
func (p *LockWorkerRequest) IsSetConsumeUnit() bool {
	return p.ConsumeUnit != nil
}

func (p *LockWorkerRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LockWorkerRequest) ReadField1(iprot thrift.TProtocol) error {
	p.ConsumeUnit = &ConsumeUnit{}
	if err := p.ConsumeUnit.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ConsumeUnit, err)
	}
	return nil
}

func (p *LockWorkerRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LockWorkerRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LockWorkerRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("consumeUnit", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:consumeUnit: %s", p, err)
	}
	if err := p.ConsumeUnit.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.ConsumeUnit, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:consumeUnit: %s", p, err)
	}
	return err
}

func (p *LockWorkerRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LockWorkerRequest(%+v)", *p)
}

type LockWorkerResponse struct {
	RegisterSuccess bool `thrift:"registerSuccess,1,required" json:"registerSuccess"`
}

func NewLockWorkerResponse() *LockWorkerResponse {
	return &LockWorkerResponse{}
}

func (p *LockWorkerResponse) GetRegisterSuccess() bool {
	return p.RegisterSuccess
}
func (p *LockWorkerResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LockWorkerResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.RegisterSuccess = v
	}
	return nil
}

func (p *LockWorkerResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LockWorkerResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LockWorkerResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("registerSuccess", thrift.BOOL, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:registerSuccess: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.RegisterSuccess)); err != nil {
		return fmt.Errorf("%T.registerSuccess (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:registerSuccess: %s", p, err)
	}
	return err
}

func (p *LockWorkerResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LockWorkerResponse(%+v)", *p)
}

type TopicsLockWorkerRequest struct {
	ConsumerGroup string                          `thrift:"consumerGroup,1,required" json:"consumerGroup"`
	Topics        []*topic.TopicTalosResourceName `thrift:"topics,2,required" json:"topics"`
	WorkerId      string                          `thrift:"workerId,3,required" json:"workerId"`
	TopicGroup    string                          `thrift:"topicGroup,4,required" json:"topicGroup"`
}

func NewTopicsLockWorkerRequest() *TopicsLockWorkerRequest {
	return &TopicsLockWorkerRequest{}
}

func (p *TopicsLockWorkerRequest) GetConsumerGroup() string {
	return p.ConsumerGroup
}

func (p *TopicsLockWorkerRequest) GetTopics() []*topic.TopicTalosResourceName {
	return p.Topics
}

func (p *TopicsLockWorkerRequest) GetWorkerId() string {
	return p.WorkerId
}

func (p *TopicsLockWorkerRequest) GetTopicGroup() string {
	return p.TopicGroup
}
func (p *TopicsLockWorkerRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TopicsLockWorkerRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ConsumerGroup = v
	}
	return nil
}

func (p *TopicsLockWorkerRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*topic.TopicTalosResourceName, 0, size)
	p.Topics = tSlice
	for i := 0; i < size; i++ {
		_elem6 := &topic.TopicTalosResourceName{}
		if err := _elem6.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem6, err)
		}
		p.Topics = append(p.Topics, _elem6)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TopicsLockWorkerRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.WorkerId = v
	}
	return nil
}

func (p *TopicsLockWorkerRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.TopicGroup = v
	}
	return nil
}

func (p *TopicsLockWorkerRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TopicsLockWorkerRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TopicsLockWorkerRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("consumerGroup", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:consumerGroup: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ConsumerGroup)); err != nil {
		return fmt.Errorf("%T.consumerGroup (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:consumerGroup: %s", p, err)
	}
	return err
}

func (p *TopicsLockWorkerRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topics", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:topics: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Topics)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Topics {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:topics: %s", p, err)
	}
	return err
}

func (p *TopicsLockWorkerRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("workerId", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:workerId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.WorkerId)); err != nil {
		return fmt.Errorf("%T.workerId (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:workerId: %s", p, err)
	}
	return err
}

func (p *TopicsLockWorkerRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicGroup", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:topicGroup: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TopicGroup)); err != nil {
		return fmt.Errorf("%T.topicGroup (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:topicGroup: %s", p, err)
	}
	return err
}

func (p *TopicsLockWorkerRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TopicsLockWorkerRequest(%+v)", *p)
}

type TopicsLockWorkerResponse struct {
	RegisterSuccess bool `thrift:"registerSuccess,1,required" json:"registerSuccess"`
}

func NewTopicsLockWorkerResponse() *TopicsLockWorkerResponse {
	return &TopicsLockWorkerResponse{}
}

func (p *TopicsLockWorkerResponse) GetRegisterSuccess() bool {
	return p.RegisterSuccess
}
func (p *TopicsLockWorkerResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TopicsLockWorkerResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.RegisterSuccess = v
	}
	return nil
}

func (p *TopicsLockWorkerResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TopicsLockWorkerResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TopicsLockWorkerResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("registerSuccess", thrift.BOOL, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:registerSuccess: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.RegisterSuccess)); err != nil {
		return fmt.Errorf("%T.registerSuccess (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:registerSuccess: %s", p, err)
	}
	return err
}

func (p *TopicsLockWorkerResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TopicsLockWorkerResponse(%+v)", *p)
}

type UnlockPartitionRequest struct {
	ConsumeUnit *ConsumeUnit `thrift:"consumeUnit,1,required" json:"consumeUnit"`
}

func NewUnlockPartitionRequest() *UnlockPartitionRequest {
	return &UnlockPartitionRequest{}
}

var UnlockPartitionRequest_ConsumeUnit_DEFAULT *ConsumeUnit

func (p *UnlockPartitionRequest) GetConsumeUnit() *ConsumeUnit {
	if !p.IsSetConsumeUnit() {
		return UnlockPartitionRequest_ConsumeUnit_DEFAULT
	}
	return p.ConsumeUnit
}
func (p *UnlockPartitionRequest) IsSetConsumeUnit() bool {
	return p.ConsumeUnit != nil
}

func (p *UnlockPartitionRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UnlockPartitionRequest) ReadField1(iprot thrift.TProtocol) error {
	p.ConsumeUnit = &ConsumeUnit{}
	if err := p.ConsumeUnit.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ConsumeUnit, err)
	}
	return nil
}

func (p *UnlockPartitionRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UnlockPartitionRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UnlockPartitionRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("consumeUnit", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:consumeUnit: %s", p, err)
	}
	if err := p.ConsumeUnit.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.ConsumeUnit, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:consumeUnit: %s", p, err)
	}
	return err
}

func (p *UnlockPartitionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UnlockPartitionRequest(%+v)", *p)
}

type RenewRequest struct {
	ConsumeUnit *ConsumeUnit `thrift:"consumeUnit,1,required" json:"consumeUnit"`
}

func NewRenewRequest() *RenewRequest {
	return &RenewRequest{}
}

var RenewRequest_ConsumeUnit_DEFAULT *ConsumeUnit

func (p *RenewRequest) GetConsumeUnit() *ConsumeUnit {
	if !p.IsSetConsumeUnit() {
		return RenewRequest_ConsumeUnit_DEFAULT
	}
	return p.ConsumeUnit
}
func (p *RenewRequest) IsSetConsumeUnit() bool {
	return p.ConsumeUnit != nil
}

func (p *RenewRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RenewRequest) ReadField1(iprot thrift.TProtocol) error {
	p.ConsumeUnit = &ConsumeUnit{}
	if err := p.ConsumeUnit.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ConsumeUnit, err)
	}
	return nil
}

func (p *RenewRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RenewRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RenewRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("consumeUnit", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:consumeUnit: %s", p, err)
	}
	if err := p.ConsumeUnit.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.ConsumeUnit, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:consumeUnit: %s", p, err)
	}
	return err
}

func (p *RenewRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RenewRequest(%+v)", *p)
}

type RenewResponse struct {
	HeartbeatSuccess    bool    `thrift:"heartbeatSuccess,1,required" json:"heartbeatSuccess"`
	FailedPartitionList []int32 `thrift:"failedPartitionList,2,required" json:"failedPartitionList"`
}

func NewRenewResponse() *RenewResponse {
	return &RenewResponse{}
}

func (p *RenewResponse) GetHeartbeatSuccess() bool {
	return p.HeartbeatSuccess
}

func (p *RenewResponse) GetFailedPartitionList() []int32 {
	return p.FailedPartitionList
}
func (p *RenewResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RenewResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.HeartbeatSuccess = v
	}
	return nil
}

func (p *RenewResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]int32, 0, size)
	p.FailedPartitionList = tSlice
	for i := 0; i < size; i++ {
		var _elem7 int32
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem7 = v
		}
		p.FailedPartitionList = append(p.FailedPartitionList, _elem7)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *RenewResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RenewResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RenewResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("heartbeatSuccess", thrift.BOOL, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:heartbeatSuccess: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.HeartbeatSuccess)); err != nil {
		return fmt.Errorf("%T.heartbeatSuccess (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:heartbeatSuccess: %s", p, err)
	}
	return err
}

func (p *RenewResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("failedPartitionList", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:failedPartitionList: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.FailedPartitionList)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.FailedPartitionList {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:failedPartitionList: %s", p, err)
	}
	return err
}

func (p *RenewResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RenewResponse(%+v)", *p)
}

type TopicsRenewRequest struct {
	ConsumeUnit *TopicsConsumeUnit `thrift:"consumeUnit,1,required" json:"consumeUnit"`
}

func NewTopicsRenewRequest() *TopicsRenewRequest {
	return &TopicsRenewRequest{}
}

var TopicsRenewRequest_ConsumeUnit_DEFAULT *TopicsConsumeUnit

func (p *TopicsRenewRequest) GetConsumeUnit() *TopicsConsumeUnit {
	if !p.IsSetConsumeUnit() {
		return TopicsRenewRequest_ConsumeUnit_DEFAULT
	}
	return p.ConsumeUnit
}
func (p *TopicsRenewRequest) IsSetConsumeUnit() bool {
	return p.ConsumeUnit != nil
}

func (p *TopicsRenewRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TopicsRenewRequest) ReadField1(iprot thrift.TProtocol) error {
	p.ConsumeUnit = &TopicsConsumeUnit{}
	if err := p.ConsumeUnit.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ConsumeUnit, err)
	}
	return nil
}

func (p *TopicsRenewRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TopicsRenewRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TopicsRenewRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("consumeUnit", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:consumeUnit: %s", p, err)
	}
	if err := p.ConsumeUnit.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.ConsumeUnit, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:consumeUnit: %s", p, err)
	}
	return err
}

func (p *TopicsRenewRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TopicsRenewRequest(%+v)", *p)
}

type TopicsRenewResponse struct {
	HeartbeatSuccess    bool                       `thrift:"heartbeatSuccess,1,required" json:"heartbeatSuccess"`
	FailedPartitionList []*topic.TopicAndPartition `thrift:"failedPartitionList,2,required" json:"failedPartitionList"`
}

func NewTopicsRenewResponse() *TopicsRenewResponse {
	return &TopicsRenewResponse{}
}

func (p *TopicsRenewResponse) GetHeartbeatSuccess() bool {
	return p.HeartbeatSuccess
}

func (p *TopicsRenewResponse) GetFailedPartitionList() []*topic.TopicAndPartition {
	return p.FailedPartitionList
}
func (p *TopicsRenewResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TopicsRenewResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.HeartbeatSuccess = v
	}
	return nil
}

func (p *TopicsRenewResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*topic.TopicAndPartition, 0, size)
	p.FailedPartitionList = tSlice
	for i := 0; i < size; i++ {
		_elem8 := &topic.TopicAndPartition{}
		if err := _elem8.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem8, err)
		}
		p.FailedPartitionList = append(p.FailedPartitionList, _elem8)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TopicsRenewResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TopicsRenewResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TopicsRenewResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("heartbeatSuccess", thrift.BOOL, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:heartbeatSuccess: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.HeartbeatSuccess)); err != nil {
		return fmt.Errorf("%T.heartbeatSuccess (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:heartbeatSuccess: %s", p, err)
	}
	return err
}

func (p *TopicsRenewResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("failedPartitionList", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:failedPartitionList: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FailedPartitionList)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.FailedPartitionList {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:failedPartitionList: %s", p, err)
	}
	return err
}

func (p *TopicsRenewResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TopicsRenewResponse(%+v)", *p)
}

type UpdateOffsetRequest struct {
	Checkpoint *CheckPoint `thrift:"checkpoint,1,required" json:"checkpoint"`
}

func NewUpdateOffsetRequest() *UpdateOffsetRequest {
	return &UpdateOffsetRequest{}
}

var UpdateOffsetRequest_Checkpoint_DEFAULT *CheckPoint

func (p *UpdateOffsetRequest) GetCheckpoint() *CheckPoint {
	if !p.IsSetCheckpoint() {
		return UpdateOffsetRequest_Checkpoint_DEFAULT
	}
	return p.Checkpoint
}
func (p *UpdateOffsetRequest) IsSetCheckpoint() bool {
	return p.Checkpoint != nil
}

func (p *UpdateOffsetRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateOffsetRequest) ReadField1(iprot thrift.TProtocol) error {
	p.Checkpoint = &CheckPoint{}
	if err := p.Checkpoint.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Checkpoint, err)
	}
	return nil
}

func (p *UpdateOffsetRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateOffsetRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateOffsetRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("checkpoint", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:checkpoint: %s", p, err)
	}
	if err := p.Checkpoint.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Checkpoint, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:checkpoint: %s", p, err)
	}
	return err
}

func (p *UpdateOffsetRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateOffsetRequest(%+v)", *p)
}

type UpdateOffsetResponse struct {
	Success bool `thrift:"success,1,required" json:"success"`
}

func NewUpdateOffsetResponse() *UpdateOffsetResponse {
	return &UpdateOffsetResponse{}
}

func (p *UpdateOffsetResponse) GetSuccess() bool {
	return p.Success
}
func (p *UpdateOffsetResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateOffsetResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *UpdateOffsetResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateOffsetResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateOffsetResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.BOOL, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:success: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Success)); err != nil {
		return fmt.Errorf("%T.success (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:success: %s", p, err)
	}
	return err
}

func (p *UpdateOffsetResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateOffsetResponse(%+v)", *p)
}

type QueryOffsetRequest struct {
	ConsumerGroup     string                   `thrift:"consumerGroup,1,required" json:"consumerGroup"`
	TopicAndPartition *topic.TopicAndPartition `thrift:"topicAndPartition,2,required" json:"topicAndPartition"`
}

func NewQueryOffsetRequest() *QueryOffsetRequest {
	return &QueryOffsetRequest{}
}

func (p *QueryOffsetRequest) GetConsumerGroup() string {
	return p.ConsumerGroup
}

var QueryOffsetRequest_TopicAndPartition_DEFAULT *topic.TopicAndPartition

func (p *QueryOffsetRequest) GetTopicAndPartition() *topic.TopicAndPartition {
	if !p.IsSetTopicAndPartition() {
		return QueryOffsetRequest_TopicAndPartition_DEFAULT
	}
	return p.TopicAndPartition
}
func (p *QueryOffsetRequest) IsSetTopicAndPartition() bool {
	return p.TopicAndPartition != nil
}

func (p *QueryOffsetRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryOffsetRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ConsumerGroup = v
	}
	return nil
}

func (p *QueryOffsetRequest) ReadField2(iprot thrift.TProtocol) error {
	p.TopicAndPartition = &topic.TopicAndPartition{}
	if err := p.TopicAndPartition.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicAndPartition, err)
	}
	return nil
}

func (p *QueryOffsetRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryOffsetRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryOffsetRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("consumerGroup", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:consumerGroup: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ConsumerGroup)); err != nil {
		return fmt.Errorf("%T.consumerGroup (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:consumerGroup: %s", p, err)
	}
	return err
}

func (p *QueryOffsetRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicAndPartition", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:topicAndPartition: %s", p, err)
	}
	if err := p.TopicAndPartition.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicAndPartition, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:topicAndPartition: %s", p, err)
	}
	return err
}

func (p *QueryOffsetRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryOffsetRequest(%+v)", *p)
}

type QueryOffsetResponse struct {
	MsgOffset int64 `thrift:"msgOffset,1,required" json:"msgOffset"`
}

func NewQueryOffsetResponse() *QueryOffsetResponse {
	return &QueryOffsetResponse{}
}

func (p *QueryOffsetResponse) GetMsgOffset() int64 {
	return p.MsgOffset
}
func (p *QueryOffsetResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryOffsetResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.MsgOffset = v
	}
	return nil
}

func (p *QueryOffsetResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryOffsetResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryOffsetResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msgOffset", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:msgOffset: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.MsgOffset)); err != nil {
		return fmt.Errorf("%T.msgOffset (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:msgOffset: %s", p, err)
	}
	return err
}

func (p *QueryOffsetResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryOffsetResponse(%+v)", *p)
}

type QueryWorkerRequest struct {
	ConsumerGroup          string                        `thrift:"consumerGroup,1,required" json:"consumerGroup"`
	TopicTalosResourceName *topic.TopicTalosResourceName `thrift:"topicTalosResourceName,2,required" json:"topicTalosResourceName"`
}

func NewQueryWorkerRequest() *QueryWorkerRequest {
	return &QueryWorkerRequest{}
}

func (p *QueryWorkerRequest) GetConsumerGroup() string {
	return p.ConsumerGroup
}

var QueryWorkerRequest_TopicTalosResourceName_DEFAULT *topic.TopicTalosResourceName

func (p *QueryWorkerRequest) GetTopicTalosResourceName() *topic.TopicTalosResourceName {
	if !p.IsSetTopicTalosResourceName() {
		return QueryWorkerRequest_TopicTalosResourceName_DEFAULT
	}
	return p.TopicTalosResourceName
}
func (p *QueryWorkerRequest) IsSetTopicTalosResourceName() bool {
	return p.TopicTalosResourceName != nil
}

func (p *QueryWorkerRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryWorkerRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ConsumerGroup = v
	}
	return nil
}

func (p *QueryWorkerRequest) ReadField2(iprot thrift.TProtocol) error {
	p.TopicTalosResourceName = &topic.TopicTalosResourceName{}
	if err := p.TopicTalosResourceName.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicTalosResourceName, err)
	}
	return nil
}

func (p *QueryWorkerRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryWorkerRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryWorkerRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("consumerGroup", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:consumerGroup: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ConsumerGroup)); err != nil {
		return fmt.Errorf("%T.consumerGroup (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:consumerGroup: %s", p, err)
	}
	return err
}

func (p *QueryWorkerRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicTalosResourceName", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:topicTalosResourceName: %s", p, err)
	}
	if err := p.TopicTalosResourceName.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicTalosResourceName, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:topicTalosResourceName: %s", p, err)
	}
	return err
}

func (p *QueryWorkerRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryWorkerRequest(%+v)", *p)
}

type QueryWorkerResponse struct {
	WorkerMap map[string][]int32 `thrift:"workerMap,1,required" json:"workerMap"`
}

func NewQueryWorkerResponse() *QueryWorkerResponse {
	return &QueryWorkerResponse{}
}

func (p *QueryWorkerResponse) GetWorkerMap() map[string][]int32 {
	return p.WorkerMap
}
func (p *QueryWorkerResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryWorkerResponse) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string][]int32, size)
	p.WorkerMap = tMap
	for i := 0; i < size; i++ {
		var _key9 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key9 = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return fmt.Errorf("error reading list begin: %s", err)
		}
		tSlice := make([]int32, 0, size)
		_val10 := tSlice
		for i := 0; i < size; i++ {
			var _elem11 int32
			if v, err := iprot.ReadI32(); err != nil {
				return fmt.Errorf("error reading field 0: %s", err)
			} else {
				_elem11 = v
			}
			_val10 = append(_val10, _elem11)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return fmt.Errorf("error reading list end: %s", err)
		}
		p.WorkerMap[_key9] = _val10
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *QueryWorkerResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryWorkerResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryWorkerResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("workerMap", thrift.MAP, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:workerMap: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.WorkerMap)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.WorkerMap {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.I32, len(v)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range v {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:workerMap: %s", p, err)
	}
	return err
}

func (p *QueryWorkerResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryWorkerResponse(%+v)", *p)
}

type TopicsQueryWorkerRequest struct {
	ConsumerGroup           string                          `thrift:"consumerGroup,1,required" json:"consumerGroup"`
	TopicTalosResourceNames []*topic.TopicTalosResourceName `thrift:"topicTalosResourceNames,2,required" json:"topicTalosResourceNames"`
	TopicGroup              string                          `thrift:"topicGroup,3,required" json:"topicGroup"`
}

func NewTopicsQueryWorkerRequest() *TopicsQueryWorkerRequest {
	return &TopicsQueryWorkerRequest{}
}

func (p *TopicsQueryWorkerRequest) GetConsumerGroup() string {
	return p.ConsumerGroup
}

func (p *TopicsQueryWorkerRequest) GetTopicTalosResourceNames() []*topic.TopicTalosResourceName {
	return p.TopicTalosResourceNames
}

func (p *TopicsQueryWorkerRequest) GetTopicGroup() string {
	return p.TopicGroup
}
func (p *TopicsQueryWorkerRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TopicsQueryWorkerRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ConsumerGroup = v
	}
	return nil
}

func (p *TopicsQueryWorkerRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*topic.TopicTalosResourceName, 0, size)
	p.TopicTalosResourceNames = tSlice
	for i := 0; i < size; i++ {
		_elem12 := &topic.TopicTalosResourceName{}
		if err := _elem12.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem12, err)
		}
		p.TopicTalosResourceNames = append(p.TopicTalosResourceNames, _elem12)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *TopicsQueryWorkerRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.TopicGroup = v
	}
	return nil
}

func (p *TopicsQueryWorkerRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TopicsQueryWorkerRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TopicsQueryWorkerRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("consumerGroup", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:consumerGroup: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ConsumerGroup)); err != nil {
		return fmt.Errorf("%T.consumerGroup (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:consumerGroup: %s", p, err)
	}
	return err
}

func (p *TopicsQueryWorkerRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicTalosResourceNames", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:topicTalosResourceNames: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TopicTalosResourceNames)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.TopicTalosResourceNames {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:topicTalosResourceNames: %s", p, err)
	}
	return err
}

func (p *TopicsQueryWorkerRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicGroup", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:topicGroup: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TopicGroup)); err != nil {
		return fmt.Errorf("%T.topicGroup (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:topicGroup: %s", p, err)
	}
	return err
}

func (p *TopicsQueryWorkerRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TopicsQueryWorkerRequest(%+v)", *p)
}

type TopicsQueryWorkerResponse struct {
	WorkerMap map[string][]*topic.TopicAndPartition `thrift:"workerMap,1,required" json:"workerMap"`
}

func NewTopicsQueryWorkerResponse() *TopicsQueryWorkerResponse {
	return &TopicsQueryWorkerResponse{}
}

func (p *TopicsQueryWorkerResponse) GetWorkerMap() map[string][]*topic.TopicAndPartition {
	return p.WorkerMap
}
func (p *TopicsQueryWorkerResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TopicsQueryWorkerResponse) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string][]*topic.TopicAndPartition, size)
	p.WorkerMap = tMap
	for i := 0; i < size; i++ {
		var _key13 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key13 = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return fmt.Errorf("error reading list begin: %s", err)
		}
		tSlice := make([]*topic.TopicAndPartition, 0, size)
		_val14 := tSlice
		for i := 0; i < size; i++ {
			_elem15 := &topic.TopicAndPartition{}
			if err := _elem15.Read(iprot); err != nil {
				return fmt.Errorf("%T error reading struct: %s", _elem15, err)
			}
			_val14 = append(_val14, _elem15)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return fmt.Errorf("error reading list end: %s", err)
		}
		p.WorkerMap[_key13] = _val14
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *TopicsQueryWorkerResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TopicsQueryWorkerResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TopicsQueryWorkerResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("workerMap", thrift.MAP, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:workerMap: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.WorkerMap)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.WorkerMap {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range v {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:workerMap: %s", p, err)
	}
	return err
}

func (p *TopicsQueryWorkerResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TopicsQueryWorkerResponse(%+v)", *p)
}

type ConsumerGroupAndPartition struct {
	ConsumerGroupName      string                        `thrift:"consumerGroupName,1,required" json:"consumerGroupName"`
	TopicTalosResourceName *topic.TopicTalosResourceName `thrift:"topicTalosResourceName,2,required" json:"topicTalosResourceName"`
	PartitionId            int32                         `thrift:"partitionId,3,required" json:"partitionId"`
}

func NewConsumerGroupAndPartition() *ConsumerGroupAndPartition {
	return &ConsumerGroupAndPartition{}
}

func (p *ConsumerGroupAndPartition) GetConsumerGroupName() string {
	return p.ConsumerGroupName
}

var ConsumerGroupAndPartition_TopicTalosResourceName_DEFAULT *topic.TopicTalosResourceName

func (p *ConsumerGroupAndPartition) GetTopicTalosResourceName() *topic.TopicTalosResourceName {
	if !p.IsSetTopicTalosResourceName() {
		return ConsumerGroupAndPartition_TopicTalosResourceName_DEFAULT
	}
	return p.TopicTalosResourceName
}

func (p *ConsumerGroupAndPartition) GetPartitionId() int32 {
	return p.PartitionId
}
func (p *ConsumerGroupAndPartition) IsSetTopicTalosResourceName() bool {
	return p.TopicTalosResourceName != nil
}

func (p *ConsumerGroupAndPartition) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ConsumerGroupAndPartition) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ConsumerGroupName = v
	}
	return nil
}

func (p *ConsumerGroupAndPartition) ReadField2(iprot thrift.TProtocol) error {
	p.TopicTalosResourceName = &topic.TopicTalosResourceName{}
	if err := p.TopicTalosResourceName.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicTalosResourceName, err)
	}
	return nil
}

func (p *ConsumerGroupAndPartition) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.PartitionId = v
	}
	return nil
}

func (p *ConsumerGroupAndPartition) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ConsumerGroupAndPartition"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ConsumerGroupAndPartition) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("consumerGroupName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:consumerGroupName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ConsumerGroupName)); err != nil {
		return fmt.Errorf("%T.consumerGroupName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:consumerGroupName: %s", p, err)
	}
	return err
}

func (p *ConsumerGroupAndPartition) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicTalosResourceName", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:topicTalosResourceName: %s", p, err)
	}
	if err := p.TopicTalosResourceName.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicTalosResourceName, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:topicTalosResourceName: %s", p, err)
	}
	return err
}

func (p *ConsumerGroupAndPartition) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("partitionId", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:partitionId: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.PartitionId)); err != nil {
		return fmt.Errorf("%T.partitionId (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:partitionId: %s", p, err)
	}
	return err
}

func (p *ConsumerGroupAndPartition) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConsumerGroupAndPartition(%+v)", *p)
}

type QueryOrgOffsetRequest struct {
	ConsumerGroupPrefix string `thrift:"consumerGroupPrefix,1,required" json:"consumerGroupPrefix"`
	OrgId               string `thrift:"orgId,2,required" json:"orgId"`
}

func NewQueryOrgOffsetRequest() *QueryOrgOffsetRequest {
	return &QueryOrgOffsetRequest{}
}

func (p *QueryOrgOffsetRequest) GetConsumerGroupPrefix() string {
	return p.ConsumerGroupPrefix
}

func (p *QueryOrgOffsetRequest) GetOrgId() string {
	return p.OrgId
}
func (p *QueryOrgOffsetRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryOrgOffsetRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ConsumerGroupPrefix = v
	}
	return nil
}

func (p *QueryOrgOffsetRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.OrgId = v
	}
	return nil
}

func (p *QueryOrgOffsetRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryOrgOffsetRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryOrgOffsetRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("consumerGroupPrefix", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:consumerGroupPrefix: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ConsumerGroupPrefix)); err != nil {
		return fmt.Errorf("%T.consumerGroupPrefix (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:consumerGroupPrefix: %s", p, err)
	}
	return err
}

func (p *QueryOrgOffsetRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("orgId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:orgId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.OrgId)); err != nil {
		return fmt.Errorf("%T.orgId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:orgId: %s", p, err)
	}
	return err
}

func (p *QueryOrgOffsetRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryOrgOffsetRequest(%+v)", *p)
}

type QueryOrgOffsetResponse struct {
	ConsumerGroupOffsetMap map[*ConsumerGroupAndPartition]int64 `thrift:"consumerGroupOffsetMap,1,required" json:"consumerGroupOffsetMap"`
}

func NewQueryOrgOffsetResponse() *QueryOrgOffsetResponse {
	return &QueryOrgOffsetResponse{}
}

func (p *QueryOrgOffsetResponse) GetConsumerGroupOffsetMap() map[*ConsumerGroupAndPartition]int64 {
	return p.ConsumerGroupOffsetMap
}
func (p *QueryOrgOffsetResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryOrgOffsetResponse) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[*ConsumerGroupAndPartition]int64, size)
	p.ConsumerGroupOffsetMap = tMap
	for i := 0; i < size; i++ {
		_key16 := &ConsumerGroupAndPartition{}
		if err := _key16.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _key16, err)
		}
		var _val17 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val17 = v
		}
		p.ConsumerGroupOffsetMap[_key16] = _val17
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *QueryOrgOffsetResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryOrgOffsetResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryOrgOffsetResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("consumerGroupOffsetMap", thrift.MAP, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:consumerGroupOffsetMap: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRUCT, thrift.I64, len(p.ConsumerGroupOffsetMap)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.ConsumerGroupOffsetMap {
		if err := k.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", k, err)
		}
		if err := oprot.WriteI64(int64(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:consumerGroupOffsetMap: %s", p, err)
	}
	return err
}

func (p *QueryOrgOffsetResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryOrgOffsetResponse(%+v)", *p)
}

type GetWorkerIdRequest struct {
	TopicAndPartition *topic.TopicAndPartition `thrift:"topicAndPartition,1,required" json:"topicAndPartition"`
	ConsumerGroup     string                   `thrift:"consumerGroup,2,required" json:"consumerGroup"`
}

func NewGetWorkerIdRequest() *GetWorkerIdRequest {
	return &GetWorkerIdRequest{}
}

var GetWorkerIdRequest_TopicAndPartition_DEFAULT *topic.TopicAndPartition

func (p *GetWorkerIdRequest) GetTopicAndPartition() *topic.TopicAndPartition {
	if !p.IsSetTopicAndPartition() {
		return GetWorkerIdRequest_TopicAndPartition_DEFAULT
	}
	return p.TopicAndPartition
}

func (p *GetWorkerIdRequest) GetConsumerGroup() string {
	return p.ConsumerGroup
}
func (p *GetWorkerIdRequest) IsSetTopicAndPartition() bool {
	return p.TopicAndPartition != nil
}

func (p *GetWorkerIdRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetWorkerIdRequest) ReadField1(iprot thrift.TProtocol) error {
	p.TopicAndPartition = &topic.TopicAndPartition{}
	if err := p.TopicAndPartition.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicAndPartition, err)
	}
	return nil
}

func (p *GetWorkerIdRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ConsumerGroup = v
	}
	return nil
}

func (p *GetWorkerIdRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetWorkerIdRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetWorkerIdRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicAndPartition", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicAndPartition: %s", p, err)
	}
	if err := p.TopicAndPartition.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicAndPartition, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicAndPartition: %s", p, err)
	}
	return err
}

func (p *GetWorkerIdRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("consumerGroup", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:consumerGroup: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ConsumerGroup)); err != nil {
		return fmt.Errorf("%T.consumerGroup (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:consumerGroup: %s", p, err)
	}
	return err
}

func (p *GetWorkerIdRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetWorkerIdRequest(%+v)", *p)
}

type GetWorkerIdResponse struct {
	WorkerId string `thrift:"workerId,1,required" json:"workerId"`
}

func NewGetWorkerIdResponse() *GetWorkerIdResponse {
	return &GetWorkerIdResponse{}
}

func (p *GetWorkerIdResponse) GetWorkerId() string {
	return p.WorkerId
}
func (p *GetWorkerIdResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetWorkerIdResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.WorkerId = v
	}
	return nil
}

func (p *GetWorkerIdResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetWorkerIdResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetWorkerIdResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("workerId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:workerId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.WorkerId)); err != nil {
		return fmt.Errorf("%T.workerId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:workerId: %s", p, err)
	}
	return err
}

func (p *GetWorkerIdResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetWorkerIdResponse(%+v)", *p)
}

type DeleteConsumerGroupRequest struct {
	ConsumerGroup          string                        `thrift:"consumerGroup,1,required" json:"consumerGroup"`
	TopicTalosResourceName *topic.TopicTalosResourceName `thrift:"topicTalosResourceName,2,required" json:"topicTalosResourceName"`
}

func NewDeleteConsumerGroupRequest() *DeleteConsumerGroupRequest {
	return &DeleteConsumerGroupRequest{}
}

func (p *DeleteConsumerGroupRequest) GetConsumerGroup() string {
	return p.ConsumerGroup
}

var DeleteConsumerGroupRequest_TopicTalosResourceName_DEFAULT *topic.TopicTalosResourceName

func (p *DeleteConsumerGroupRequest) GetTopicTalosResourceName() *topic.TopicTalosResourceName {
	if !p.IsSetTopicTalosResourceName() {
		return DeleteConsumerGroupRequest_TopicTalosResourceName_DEFAULT
	}
	return p.TopicTalosResourceName
}
func (p *DeleteConsumerGroupRequest) IsSetTopicTalosResourceName() bool {
	return p.TopicTalosResourceName != nil
}

func (p *DeleteConsumerGroupRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteConsumerGroupRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ConsumerGroup = v
	}
	return nil
}

func (p *DeleteConsumerGroupRequest) ReadField2(iprot thrift.TProtocol) error {
	p.TopicTalosResourceName = &topic.TopicTalosResourceName{}
	if err := p.TopicTalosResourceName.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicTalosResourceName, err)
	}
	return nil
}

func (p *DeleteConsumerGroupRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeleteConsumerGroupRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteConsumerGroupRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("consumerGroup", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:consumerGroup: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ConsumerGroup)); err != nil {
		return fmt.Errorf("%T.consumerGroup (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:consumerGroup: %s", p, err)
	}
	return err
}

func (p *DeleteConsumerGroupRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicTalosResourceName", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:topicTalosResourceName: %s", p, err)
	}
	if err := p.TopicTalosResourceName.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicTalosResourceName, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:topicTalosResourceName: %s", p, err)
	}
	return err
}

func (p *DeleteConsumerGroupRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteConsumerGroupRequest(%+v)", *p)
}
