// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package consumer

import (
	"bytes"
	"fmt"

	"github.com/XiaoMi/talos-sdk-golang/thrift/common"
	"github.com/XiaoMi/talos-sdk-golang/thrift/thrift"
	"github.com/XiaoMi/talos-sdk-golang/thrift/topic"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = common.GoUnusedProtection__
var _ = topic.GoUnusedProtection__

type ConsumerService interface {
	common.TalosBaseService

	// lock a consume unit for specified worker
	//
	//
	// Parameters:
	//  - Request
	LockPartition(request *LockPartitionRequest) (r *LockPartitionResponse, err error)
	// lock a worker heartbeat
	//
	//
	// Parameters:
	//  - Request
	LockWorker(request *LockWorkerRequest) (r *LockWorkerResponse, err error)
	// lock a worker heartbeat for multi topics
	//
	//
	// Parameters:
	//  - Request
	LockWorkerForTopics(request *TopicsLockWorkerRequest) (r *TopicsLockWorkerResponse, err error)
	// check if worker can register
	//
	//
	// Parameters:
	//  - Request
	CheckRegister(request *CheckRegisterRequest) (r *CheckRegisterResponse, err error)
	// unlock a consume unit for specified worker
	//
	//
	// Parameters:
	//  - Request
	UnlockPartition(request *UnlockPartitionRequest) (err error)
	// renew worker heartbeat and serving partitions
	//
	//
	// Parameters:
	//  - Request
	Renew(request *RenewRequest) (r *RenewResponse, err error)
	// renew worker heartbeat and serving partitions for multi topics
	//
	//
	// Parameters:
	//  - Request
	RenewForTopics(request *TopicsRenewRequest) (r *TopicsRenewResponse, err error)
	// update offset for a consuming consumeUnit task
	//
	//
	// Parameters:
	//  - Request
	UpdateOffset(request *UpdateOffsetRequest) (r *UpdateOffsetResponse, err error)
	// query offset for a consumed consumeUnit task
	//
	//
	// Parameters:
	//  - Request
	QueryOffset(request *QueryOffsetRequest) (r *QueryOffsetResponse, err error)
	// query worker for a consuming topic by specified consumer group
	//
	//
	// Parameters:
	//  - Request
	QueryWorker(request *QueryWorkerRequest) (r *QueryWorkerResponse, err error)
	// query worker for a consuming topic by specified consumer group for multi topics
	//
	//
	// Parameters:
	//  - Request
	QueryWorkerForTopics(request *TopicsQueryWorkerRequest) (r *TopicsQueryWorkerResponse, err error)
	// query consumer group and partition offset
	//
	//
	// Parameters:
	//  - Request
	QueryOrgOffset(request *QueryOrgOffsetRequest) (r *QueryOrgOffsetResponse, err error)
	// Get workerId
	//
	//
	// Parameters:
	//  - Request
	GetWorkerId(request *GetWorkerIdRequest) (r *GetWorkerIdResponse, err error)
	// Delete consumerGroup for specific topic
	//
	//
	// Parameters:
	//  - Request
	DeleteConsumerGroup(request *DeleteConsumerGroupRequest) (err error)
}

type ConsumerServiceClient struct {
	*common.TalosBaseServiceClient
}

func NewConsumerServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ConsumerServiceClient {
	return &ConsumerServiceClient{TalosBaseServiceClient: common.NewTalosBaseServiceClientFactory(t, f)}
}

func NewConsumerServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ConsumerServiceClient {
	return &ConsumerServiceClient{TalosBaseServiceClient: common.NewTalosBaseServiceClientProtocol(t, iprot, oprot)}
}

// lock a consume unit for specified worker
//
// Parameters:
//   - Request
func (p *ConsumerServiceClient) LockPartition(request *LockPartitionRequest) (r *LockPartitionResponse, err error) {
	if err = p.sendLockPartition(request); err != nil {
		return
	}
	return p.recvLockPartition()
}

func (p *ConsumerServiceClient) sendLockPartition(request *LockPartitionRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("lockPartition", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LockPartitionArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ConsumerServiceClient) recvLockPartition() (value *LockPartitionResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error18 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error19 error
		error19, err = error18.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error19
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "lockPartition failed: out of sequence response")
		return
	}
	result := LockPartitionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// lock a worker heartbeat
//
// Parameters:
//   - Request
func (p *ConsumerServiceClient) LockWorker(request *LockWorkerRequest) (r *LockWorkerResponse, err error) {
	if err = p.sendLockWorker(request); err != nil {
		return
	}
	return p.recvLockWorker()
}

func (p *ConsumerServiceClient) sendLockWorker(request *LockWorkerRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("lockWorker", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LockWorkerArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ConsumerServiceClient) recvLockWorker() (value *LockWorkerResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error20 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error21 error
		error21, err = error20.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error21
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "lockWorker failed: out of sequence response")
		return
	}
	result := LockWorkerResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// lock a worker heartbeat for multi topics
//
// Parameters:
//   - Request
func (p *ConsumerServiceClient) LockWorkerForTopics(request *TopicsLockWorkerRequest) (r *TopicsLockWorkerResponse, err error) {
	if err = p.sendLockWorkerForTopics(request); err != nil {
		return
	}
	return p.recvLockWorkerForTopics()
}

func (p *ConsumerServiceClient) sendLockWorkerForTopics(request *TopicsLockWorkerRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("lockWorkerForTopics", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LockWorkerForTopicsArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ConsumerServiceClient) recvLockWorkerForTopics() (value *TopicsLockWorkerResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error22 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error23 error
		error23, err = error22.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error23
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "lockWorkerForTopics failed: out of sequence response")
		return
	}
	result := LockWorkerForTopicsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// check if worker can register
//
// Parameters:
//   - Request
func (p *ConsumerServiceClient) CheckRegister(request *CheckRegisterRequest) (r *CheckRegisterResponse, err error) {
	if err = p.sendCheckRegister(request); err != nil {
		return
	}
	return p.recvCheckRegister()
}

func (p *ConsumerServiceClient) sendCheckRegister(request *CheckRegisterRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("checkRegister", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CheckRegisterArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ConsumerServiceClient) recvCheckRegister() (value *CheckRegisterResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error24 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error25 error
		error25, err = error24.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error25
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "checkRegister failed: out of sequence response")
		return
	}
	result := CheckRegisterResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// unlock a consume unit for specified worker
//
// Parameters:
//   - Request
func (p *ConsumerServiceClient) UnlockPartition(request *UnlockPartitionRequest) (err error) {
	if err = p.sendUnlockPartition(request); err != nil {
		return
	}
	return p.recvUnlockPartition()
}

func (p *ConsumerServiceClient) sendUnlockPartition(request *UnlockPartitionRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("unlockPartition", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UnlockPartitionArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ConsumerServiceClient) recvUnlockPartition() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error26 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error27 error
		error27, err = error26.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error27
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "unlockPartition failed: out of sequence response")
		return
	}
	result := UnlockPartitionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// renew worker heartbeat and serving partitions
//
// Parameters:
//   - Request
func (p *ConsumerServiceClient) Renew(request *RenewRequest) (r *RenewResponse, err error) {
	if err = p.sendRenew(request); err != nil {
		return
	}
	return p.recvRenew()
}

func (p *ConsumerServiceClient) sendRenew(request *RenewRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("renew", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RenewArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ConsumerServiceClient) recvRenew() (value *RenewResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error28 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error29 error
		error29, err = error28.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error29
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "renew failed: out of sequence response")
		return
	}
	result := RenewResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// renew worker heartbeat and serving partitions for multi topics
//
// Parameters:
//   - Request
func (p *ConsumerServiceClient) RenewForTopics(request *TopicsRenewRequest) (r *TopicsRenewResponse, err error) {
	if err = p.sendRenewForTopics(request); err != nil {
		return
	}
	return p.recvRenewForTopics()
}

func (p *ConsumerServiceClient) sendRenewForTopics(request *TopicsRenewRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("renewForTopics", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RenewForTopicsArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ConsumerServiceClient) recvRenewForTopics() (value *TopicsRenewResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error30 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error31 error
		error31, err = error30.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error31
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "renewForTopics failed: out of sequence response")
		return
	}
	result := RenewForTopicsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// update offset for a consuming consumeUnit task
//
// Parameters:
//   - Request
func (p *ConsumerServiceClient) UpdateOffset(request *UpdateOffsetRequest) (r *UpdateOffsetResponse, err error) {
	if err = p.sendUpdateOffset(request); err != nil {
		return
	}
	return p.recvUpdateOffset()
}

func (p *ConsumerServiceClient) sendUpdateOffset(request *UpdateOffsetRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateOffset", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UpdateOffsetArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ConsumerServiceClient) recvUpdateOffset() (value *UpdateOffsetResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error32 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error33 error
		error33, err = error32.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error33
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateOffset failed: out of sequence response")
		return
	}
	result := UpdateOffsetResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// query offset for a consumed consumeUnit task
//
// Parameters:
//   - Request
func (p *ConsumerServiceClient) QueryOffset(request *QueryOffsetRequest) (r *QueryOffsetResponse, err error) {
	if err = p.sendQueryOffset(request); err != nil {
		return
	}
	return p.recvQueryOffset()
}

func (p *ConsumerServiceClient) sendQueryOffset(request *QueryOffsetRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("queryOffset", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := QueryOffsetArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ConsumerServiceClient) recvQueryOffset() (value *QueryOffsetResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error34 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error35 error
		error35, err = error34.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error35
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "queryOffset failed: out of sequence response")
		return
	}
	result := QueryOffsetResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// query worker for a consuming topic by specified consumer group
//
// Parameters:
//   - Request
func (p *ConsumerServiceClient) QueryWorker(request *QueryWorkerRequest) (r *QueryWorkerResponse, err error) {
	if err = p.sendQueryWorker(request); err != nil {
		return
	}
	return p.recvQueryWorker()
}

func (p *ConsumerServiceClient) sendQueryWorker(request *QueryWorkerRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("queryWorker", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := QueryWorkerArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ConsumerServiceClient) recvQueryWorker() (value *QueryWorkerResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error36 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error37 error
		error37, err = error36.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error37
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "queryWorker failed: out of sequence response")
		return
	}
	result := QueryWorkerResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// query worker for a consuming topic by specified consumer group for multi topics
//
// Parameters:
//   - Request
func (p *ConsumerServiceClient) QueryWorkerForTopics(request *TopicsQueryWorkerRequest) (r *TopicsQueryWorkerResponse, err error) {
	if err = p.sendQueryWorkerForTopics(request); err != nil {
		return
	}
	return p.recvQueryWorkerForTopics()
}

func (p *ConsumerServiceClient) sendQueryWorkerForTopics(request *TopicsQueryWorkerRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("queryWorkerForTopics", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := QueryWorkerForTopicsArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ConsumerServiceClient) recvQueryWorkerForTopics() (value *TopicsQueryWorkerResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error38 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error39 error
		error39, err = error38.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error39
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "queryWorkerForTopics failed: out of sequence response")
		return
	}
	result := QueryWorkerForTopicsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// query consumer group and partition offset
//
// Parameters:
//   - Request
func (p *ConsumerServiceClient) QueryOrgOffset(request *QueryOrgOffsetRequest) (r *QueryOrgOffsetResponse, err error) {
	if err = p.sendQueryOrgOffset(request); err != nil {
		return
	}
	return p.recvQueryOrgOffset()
}

func (p *ConsumerServiceClient) sendQueryOrgOffset(request *QueryOrgOffsetRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("queryOrgOffset", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := QueryOrgOffsetArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ConsumerServiceClient) recvQueryOrgOffset() (value *QueryOrgOffsetResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error40 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error41 error
		error41, err = error40.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error41
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "queryOrgOffset failed: out of sequence response")
		return
	}
	result := QueryOrgOffsetResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Get workerId
//
// Parameters:
//   - Request
func (p *ConsumerServiceClient) GetWorkerId(request *GetWorkerIdRequest) (r *GetWorkerIdResponse, err error) {
	if err = p.sendGetWorkerId(request); err != nil {
		return
	}
	return p.recvGetWorkerId()
}

func (p *ConsumerServiceClient) sendGetWorkerId(request *GetWorkerIdRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getWorkerId", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetWorkerIdArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ConsumerServiceClient) recvGetWorkerId() (value *GetWorkerIdResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error42 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error43 error
		error43, err = error42.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error43
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getWorkerId failed: out of sequence response")
		return
	}
	result := GetWorkerIdResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Delete consumerGroup for specific topic
//
// Parameters:
//   - Request
func (p *ConsumerServiceClient) DeleteConsumerGroup(request *DeleteConsumerGroupRequest) (err error) {
	if err = p.sendDeleteConsumerGroup(request); err != nil {
		return
	}
	return p.recvDeleteConsumerGroup()
}

func (p *ConsumerServiceClient) sendDeleteConsumerGroup(request *DeleteConsumerGroupRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deleteConsumerGroup", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DeleteConsumerGroupArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ConsumerServiceClient) recvDeleteConsumerGroup() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error44 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error45 error
		error45, err = error44.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error45
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteConsumerGroup failed: out of sequence response")
		return
	}
	result := DeleteConsumerGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

type ConsumerServiceProcessor struct {
	*common.TalosBaseServiceProcessor
}

func NewConsumerServiceProcessor(handler ConsumerService) *ConsumerServiceProcessor {
	self46 := &ConsumerServiceProcessor{common.NewTalosBaseServiceProcessor(handler)}
	self46.AddToProcessorMap("lockPartition", &consumerServiceProcessorLockPartition{handler: handler})
	self46.AddToProcessorMap("lockWorker", &consumerServiceProcessorLockWorker{handler: handler})
	self46.AddToProcessorMap("lockWorkerForTopics", &consumerServiceProcessorLockWorkerForTopics{handler: handler})
	self46.AddToProcessorMap("checkRegister", &consumerServiceProcessorCheckRegister{handler: handler})
	self46.AddToProcessorMap("unlockPartition", &consumerServiceProcessorUnlockPartition{handler: handler})
	self46.AddToProcessorMap("renew", &consumerServiceProcessorRenew{handler: handler})
	self46.AddToProcessorMap("renewForTopics", &consumerServiceProcessorRenewForTopics{handler: handler})
	self46.AddToProcessorMap("updateOffset", &consumerServiceProcessorUpdateOffset{handler: handler})
	self46.AddToProcessorMap("queryOffset", &consumerServiceProcessorQueryOffset{handler: handler})
	self46.AddToProcessorMap("queryWorker", &consumerServiceProcessorQueryWorker{handler: handler})
	self46.AddToProcessorMap("queryWorkerForTopics", &consumerServiceProcessorQueryWorkerForTopics{handler: handler})
	self46.AddToProcessorMap("queryOrgOffset", &consumerServiceProcessorQueryOrgOffset{handler: handler})
	self46.AddToProcessorMap("getWorkerId", &consumerServiceProcessorGetWorkerId{handler: handler})
	self46.AddToProcessorMap("deleteConsumerGroup", &consumerServiceProcessorDeleteConsumerGroup{handler: handler})
	return self46
}

type consumerServiceProcessorLockPartition struct {
	handler ConsumerService
}

func (p *consumerServiceProcessorLockPartition) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LockPartitionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("lockPartition", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := LockPartitionResult{}
	var retval *LockPartitionResponse
	var err2 error
	if retval, err2 = p.handler.LockPartition(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing lockPartition: "+err2.Error())
			oprot.WriteMessageBegin("lockPartition", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("lockPartition", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type consumerServiceProcessorLockWorker struct {
	handler ConsumerService
}

func (p *consumerServiceProcessorLockWorker) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LockWorkerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("lockWorker", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := LockWorkerResult{}
	var retval *LockWorkerResponse
	var err2 error
	if retval, err2 = p.handler.LockWorker(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing lockWorker: "+err2.Error())
			oprot.WriteMessageBegin("lockWorker", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("lockWorker", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type consumerServiceProcessorLockWorkerForTopics struct {
	handler ConsumerService
}

func (p *consumerServiceProcessorLockWorkerForTopics) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LockWorkerForTopicsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("lockWorkerForTopics", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := LockWorkerForTopicsResult{}
	var retval *TopicsLockWorkerResponse
	var err2 error
	if retval, err2 = p.handler.LockWorkerForTopics(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing lockWorkerForTopics: "+err2.Error())
			oprot.WriteMessageBegin("lockWorkerForTopics", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("lockWorkerForTopics", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type consumerServiceProcessorCheckRegister struct {
	handler ConsumerService
}

func (p *consumerServiceProcessorCheckRegister) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CheckRegisterArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("checkRegister", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CheckRegisterResult{}
	var retval *CheckRegisterResponse
	var err2 error
	if retval, err2 = p.handler.CheckRegister(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkRegister: "+err2.Error())
			oprot.WriteMessageBegin("checkRegister", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("checkRegister", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type consumerServiceProcessorUnlockPartition struct {
	handler ConsumerService
}

func (p *consumerServiceProcessorUnlockPartition) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UnlockPartitionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("unlockPartition", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UnlockPartitionResult{}
	var err2 error
	if err2 = p.handler.UnlockPartition(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unlockPartition: "+err2.Error())
			oprot.WriteMessageBegin("unlockPartition", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("unlockPartition", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type consumerServiceProcessorRenew struct {
	handler ConsumerService
}

func (p *consumerServiceProcessorRenew) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RenewArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("renew", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RenewResult{}
	var retval *RenewResponse
	var err2 error
	if retval, err2 = p.handler.Renew(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing renew: "+err2.Error())
			oprot.WriteMessageBegin("renew", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("renew", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type consumerServiceProcessorRenewForTopics struct {
	handler ConsumerService
}

func (p *consumerServiceProcessorRenewForTopics) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RenewForTopicsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("renewForTopics", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RenewForTopicsResult{}
	var retval *TopicsRenewResponse
	var err2 error
	if retval, err2 = p.handler.RenewForTopics(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing renewForTopics: "+err2.Error())
			oprot.WriteMessageBegin("renewForTopics", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("renewForTopics", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type consumerServiceProcessorUpdateOffset struct {
	handler ConsumerService
}

func (p *consumerServiceProcessorUpdateOffset) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UpdateOffsetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateOffset", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UpdateOffsetResult{}
	var retval *UpdateOffsetResponse
	var err2 error
	if retval, err2 = p.handler.UpdateOffset(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateOffset: "+err2.Error())
			oprot.WriteMessageBegin("updateOffset", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("updateOffset", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type consumerServiceProcessorQueryOffset struct {
	handler ConsumerService
}

func (p *consumerServiceProcessorQueryOffset) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := QueryOffsetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("queryOffset", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := QueryOffsetResult{}
	var retval *QueryOffsetResponse
	var err2 error
	if retval, err2 = p.handler.QueryOffset(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryOffset: "+err2.Error())
			oprot.WriteMessageBegin("queryOffset", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("queryOffset", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type consumerServiceProcessorQueryWorker struct {
	handler ConsumerService
}

func (p *consumerServiceProcessorQueryWorker) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := QueryWorkerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("queryWorker", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := QueryWorkerResult{}
	var retval *QueryWorkerResponse
	var err2 error
	if retval, err2 = p.handler.QueryWorker(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryWorker: "+err2.Error())
			oprot.WriteMessageBegin("queryWorker", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("queryWorker", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type consumerServiceProcessorQueryWorkerForTopics struct {
	handler ConsumerService
}

func (p *consumerServiceProcessorQueryWorkerForTopics) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := QueryWorkerForTopicsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("queryWorkerForTopics", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := QueryWorkerForTopicsResult{}
	var retval *TopicsQueryWorkerResponse
	var err2 error
	if retval, err2 = p.handler.QueryWorkerForTopics(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryWorkerForTopics: "+err2.Error())
			oprot.WriteMessageBegin("queryWorkerForTopics", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("queryWorkerForTopics", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type consumerServiceProcessorQueryOrgOffset struct {
	handler ConsumerService
}

func (p *consumerServiceProcessorQueryOrgOffset) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := QueryOrgOffsetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("queryOrgOffset", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := QueryOrgOffsetResult{}
	var retval *QueryOrgOffsetResponse
	var err2 error
	if retval, err2 = p.handler.QueryOrgOffset(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryOrgOffset: "+err2.Error())
			oprot.WriteMessageBegin("queryOrgOffset", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("queryOrgOffset", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type consumerServiceProcessorGetWorkerId struct {
	handler ConsumerService
}

func (p *consumerServiceProcessorGetWorkerId) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetWorkerIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getWorkerId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetWorkerIdResult{}
	var retval *GetWorkerIdResponse
	var err2 error
	if retval, err2 = p.handler.GetWorkerId(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getWorkerId: "+err2.Error())
			oprot.WriteMessageBegin("getWorkerId", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getWorkerId", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type consumerServiceProcessorDeleteConsumerGroup struct {
	handler ConsumerService
}

func (p *consumerServiceProcessorDeleteConsumerGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DeleteConsumerGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteConsumerGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DeleteConsumerGroupResult{}
	var err2 error
	if err2 = p.handler.DeleteConsumerGroup(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteConsumerGroup: "+err2.Error())
			oprot.WriteMessageBegin("deleteConsumerGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("deleteConsumerGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type LockPartitionArgs struct {
	Request *LockPartitionRequest `thrift:"request,1" json:"request"`
}

func NewLockPartitionArgs() *LockPartitionArgs {
	return &LockPartitionArgs{}
}

var LockPartitionArgs_Request_DEFAULT *LockPartitionRequest

func (p *LockPartitionArgs) GetRequest() *LockPartitionRequest {
	if !p.IsSetRequest() {
		return LockPartitionArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *LockPartitionArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *LockPartitionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LockPartitionArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &LockPartitionRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *LockPartitionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("lockPartition_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LockPartitionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *LockPartitionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LockPartitionArgs(%+v)", *p)
}

type LockPartitionResult struct {
	Success *LockPartitionResponse       `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewLockPartitionResult() *LockPartitionResult {
	return &LockPartitionResult{}
}

var LockPartitionResult_Success_DEFAULT *LockPartitionResponse

func (p *LockPartitionResult) GetSuccess() *LockPartitionResponse {
	if !p.IsSetSuccess() {
		return LockPartitionResult_Success_DEFAULT
	}
	return p.Success
}

var LockPartitionResult_E_DEFAULT *common.GalaxyTalosException

func (p *LockPartitionResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return LockPartitionResult_E_DEFAULT
	}
	return p.E
}
func (p *LockPartitionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LockPartitionResult) IsSetE() bool {
	return p.E != nil
}

func (p *LockPartitionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LockPartitionResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &LockPartitionResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *LockPartitionResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *LockPartitionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("lockPartition_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LockPartitionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *LockPartitionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *LockPartitionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LockPartitionResult(%+v)", *p)
}

type LockWorkerArgs struct {
	Request *LockWorkerRequest `thrift:"request,1" json:"request"`
}

func NewLockWorkerArgs() *LockWorkerArgs {
	return &LockWorkerArgs{}
}

var LockWorkerArgs_Request_DEFAULT *LockWorkerRequest

func (p *LockWorkerArgs) GetRequest() *LockWorkerRequest {
	if !p.IsSetRequest() {
		return LockWorkerArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *LockWorkerArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *LockWorkerArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LockWorkerArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &LockWorkerRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *LockWorkerArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("lockWorker_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LockWorkerArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *LockWorkerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LockWorkerArgs(%+v)", *p)
}

type LockWorkerResult struct {
	Success *LockWorkerResponse          `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewLockWorkerResult() *LockWorkerResult {
	return &LockWorkerResult{}
}

var LockWorkerResult_Success_DEFAULT *LockWorkerResponse

func (p *LockWorkerResult) GetSuccess() *LockWorkerResponse {
	if !p.IsSetSuccess() {
		return LockWorkerResult_Success_DEFAULT
	}
	return p.Success
}

var LockWorkerResult_E_DEFAULT *common.GalaxyTalosException

func (p *LockWorkerResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return LockWorkerResult_E_DEFAULT
	}
	return p.E
}
func (p *LockWorkerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LockWorkerResult) IsSetE() bool {
	return p.E != nil
}

func (p *LockWorkerResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LockWorkerResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &LockWorkerResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *LockWorkerResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *LockWorkerResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("lockWorker_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LockWorkerResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *LockWorkerResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *LockWorkerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LockWorkerResult(%+v)", *p)
}

type LockWorkerForTopicsArgs struct {
	Request *TopicsLockWorkerRequest `thrift:"request,1" json:"request"`
}

func NewLockWorkerForTopicsArgs() *LockWorkerForTopicsArgs {
	return &LockWorkerForTopicsArgs{}
}

var LockWorkerForTopicsArgs_Request_DEFAULT *TopicsLockWorkerRequest

func (p *LockWorkerForTopicsArgs) GetRequest() *TopicsLockWorkerRequest {
	if !p.IsSetRequest() {
		return LockWorkerForTopicsArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *LockWorkerForTopicsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *LockWorkerForTopicsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LockWorkerForTopicsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &TopicsLockWorkerRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *LockWorkerForTopicsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("lockWorkerForTopics_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LockWorkerForTopicsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *LockWorkerForTopicsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LockWorkerForTopicsArgs(%+v)", *p)
}

type LockWorkerForTopicsResult struct {
	Success *TopicsLockWorkerResponse    `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewLockWorkerForTopicsResult() *LockWorkerForTopicsResult {
	return &LockWorkerForTopicsResult{}
}

var LockWorkerForTopicsResult_Success_DEFAULT *TopicsLockWorkerResponse

func (p *LockWorkerForTopicsResult) GetSuccess() *TopicsLockWorkerResponse {
	if !p.IsSetSuccess() {
		return LockWorkerForTopicsResult_Success_DEFAULT
	}
	return p.Success
}

var LockWorkerForTopicsResult_E_DEFAULT *common.GalaxyTalosException

func (p *LockWorkerForTopicsResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return LockWorkerForTopicsResult_E_DEFAULT
	}
	return p.E
}
func (p *LockWorkerForTopicsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LockWorkerForTopicsResult) IsSetE() bool {
	return p.E != nil
}

func (p *LockWorkerForTopicsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LockWorkerForTopicsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &TopicsLockWorkerResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *LockWorkerForTopicsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *LockWorkerForTopicsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("lockWorkerForTopics_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LockWorkerForTopicsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *LockWorkerForTopicsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *LockWorkerForTopicsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LockWorkerForTopicsResult(%+v)", *p)
}

type CheckRegisterArgs struct {
	Request *CheckRegisterRequest `thrift:"request,1" json:"request"`
}

func NewCheckRegisterArgs() *CheckRegisterArgs {
	return &CheckRegisterArgs{}
}

var CheckRegisterArgs_Request_DEFAULT *CheckRegisterRequest

func (p *CheckRegisterArgs) GetRequest() *CheckRegisterRequest {
	if !p.IsSetRequest() {
		return CheckRegisterArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *CheckRegisterArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CheckRegisterArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CheckRegisterArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &CheckRegisterRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *CheckRegisterArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("checkRegister_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CheckRegisterArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *CheckRegisterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckRegisterArgs(%+v)", *p)
}

type CheckRegisterResult struct {
	Success *CheckRegisterResponse       `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewCheckRegisterResult() *CheckRegisterResult {
	return &CheckRegisterResult{}
}

var CheckRegisterResult_Success_DEFAULT *CheckRegisterResponse

func (p *CheckRegisterResult) GetSuccess() *CheckRegisterResponse {
	if !p.IsSetSuccess() {
		return CheckRegisterResult_Success_DEFAULT
	}
	return p.Success
}

var CheckRegisterResult_E_DEFAULT *common.GalaxyTalosException

func (p *CheckRegisterResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return CheckRegisterResult_E_DEFAULT
	}
	return p.E
}
func (p *CheckRegisterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CheckRegisterResult) IsSetE() bool {
	return p.E != nil
}

func (p *CheckRegisterResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CheckRegisterResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &CheckRegisterResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *CheckRegisterResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *CheckRegisterResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("checkRegister_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CheckRegisterResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *CheckRegisterResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *CheckRegisterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckRegisterResult(%+v)", *p)
}

type UnlockPartitionArgs struct {
	Request *UnlockPartitionRequest `thrift:"request,1" json:"request"`
}

func NewUnlockPartitionArgs() *UnlockPartitionArgs {
	return &UnlockPartitionArgs{}
}

var UnlockPartitionArgs_Request_DEFAULT *UnlockPartitionRequest

func (p *UnlockPartitionArgs) GetRequest() *UnlockPartitionRequest {
	if !p.IsSetRequest() {
		return UnlockPartitionArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *UnlockPartitionArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *UnlockPartitionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UnlockPartitionArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &UnlockPartitionRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *UnlockPartitionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unlockPartition_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UnlockPartitionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *UnlockPartitionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UnlockPartitionArgs(%+v)", *p)
}

type UnlockPartitionResult struct {
	E *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewUnlockPartitionResult() *UnlockPartitionResult {
	return &UnlockPartitionResult{}
}

var UnlockPartitionResult_E_DEFAULT *common.GalaxyTalosException

func (p *UnlockPartitionResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return UnlockPartitionResult_E_DEFAULT
	}
	return p.E
}
func (p *UnlockPartitionResult) IsSetE() bool {
	return p.E != nil
}

func (p *UnlockPartitionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UnlockPartitionResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *UnlockPartitionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unlockPartition_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UnlockPartitionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *UnlockPartitionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UnlockPartitionResult(%+v)", *p)
}

type RenewArgs struct {
	Request *RenewRequest `thrift:"request,1" json:"request"`
}

func NewRenewArgs() *RenewArgs {
	return &RenewArgs{}
}

var RenewArgs_Request_DEFAULT *RenewRequest

func (p *RenewArgs) GetRequest() *RenewRequest {
	if !p.IsSetRequest() {
		return RenewArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *RenewArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *RenewArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RenewArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &RenewRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *RenewArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("renew_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RenewArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *RenewArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RenewArgs(%+v)", *p)
}

type RenewResult struct {
	Success *RenewResponse               `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewRenewResult() *RenewResult {
	return &RenewResult{}
}

var RenewResult_Success_DEFAULT *RenewResponse

func (p *RenewResult) GetSuccess() *RenewResponse {
	if !p.IsSetSuccess() {
		return RenewResult_Success_DEFAULT
	}
	return p.Success
}

var RenewResult_E_DEFAULT *common.GalaxyTalosException

func (p *RenewResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return RenewResult_E_DEFAULT
	}
	return p.E
}
func (p *RenewResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RenewResult) IsSetE() bool {
	return p.E != nil
}

func (p *RenewResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RenewResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &RenewResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *RenewResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *RenewResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("renew_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RenewResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *RenewResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *RenewResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RenewResult(%+v)", *p)
}

type RenewForTopicsArgs struct {
	Request *TopicsRenewRequest `thrift:"request,1" json:"request"`
}

func NewRenewForTopicsArgs() *RenewForTopicsArgs {
	return &RenewForTopicsArgs{}
}

var RenewForTopicsArgs_Request_DEFAULT *TopicsRenewRequest

func (p *RenewForTopicsArgs) GetRequest() *TopicsRenewRequest {
	if !p.IsSetRequest() {
		return RenewForTopicsArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *RenewForTopicsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *RenewForTopicsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RenewForTopicsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &TopicsRenewRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *RenewForTopicsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("renewForTopics_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RenewForTopicsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *RenewForTopicsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RenewForTopicsArgs(%+v)", *p)
}

type RenewForTopicsResult struct {
	Success *TopicsRenewResponse         `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewRenewForTopicsResult() *RenewForTopicsResult {
	return &RenewForTopicsResult{}
}

var RenewForTopicsResult_Success_DEFAULT *TopicsRenewResponse

func (p *RenewForTopicsResult) GetSuccess() *TopicsRenewResponse {
	if !p.IsSetSuccess() {
		return RenewForTopicsResult_Success_DEFAULT
	}
	return p.Success
}

var RenewForTopicsResult_E_DEFAULT *common.GalaxyTalosException

func (p *RenewForTopicsResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return RenewForTopicsResult_E_DEFAULT
	}
	return p.E
}
func (p *RenewForTopicsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RenewForTopicsResult) IsSetE() bool {
	return p.E != nil
}

func (p *RenewForTopicsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RenewForTopicsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &TopicsRenewResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *RenewForTopicsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *RenewForTopicsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("renewForTopics_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RenewForTopicsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *RenewForTopicsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *RenewForTopicsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RenewForTopicsResult(%+v)", *p)
}

type UpdateOffsetArgs struct {
	Request *UpdateOffsetRequest `thrift:"request,1" json:"request"`
}

func NewUpdateOffsetArgs() *UpdateOffsetArgs {
	return &UpdateOffsetArgs{}
}

var UpdateOffsetArgs_Request_DEFAULT *UpdateOffsetRequest

func (p *UpdateOffsetArgs) GetRequest() *UpdateOffsetRequest {
	if !p.IsSetRequest() {
		return UpdateOffsetArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *UpdateOffsetArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *UpdateOffsetArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateOffsetArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &UpdateOffsetRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *UpdateOffsetArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateOffset_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateOffsetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *UpdateOffsetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateOffsetArgs(%+v)", *p)
}

type UpdateOffsetResult struct {
	Success *UpdateOffsetResponse        `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewUpdateOffsetResult() *UpdateOffsetResult {
	return &UpdateOffsetResult{}
}

var UpdateOffsetResult_Success_DEFAULT *UpdateOffsetResponse

func (p *UpdateOffsetResult) GetSuccess() *UpdateOffsetResponse {
	if !p.IsSetSuccess() {
		return UpdateOffsetResult_Success_DEFAULT
	}
	return p.Success
}

var UpdateOffsetResult_E_DEFAULT *common.GalaxyTalosException

func (p *UpdateOffsetResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return UpdateOffsetResult_E_DEFAULT
	}
	return p.E
}
func (p *UpdateOffsetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateOffsetResult) IsSetE() bool {
	return p.E != nil
}

func (p *UpdateOffsetResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateOffsetResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &UpdateOffsetResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *UpdateOffsetResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *UpdateOffsetResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateOffset_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateOffsetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *UpdateOffsetResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *UpdateOffsetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateOffsetResult(%+v)", *p)
}

type QueryOffsetArgs struct {
	Request *QueryOffsetRequest `thrift:"request,1" json:"request"`
}

func NewQueryOffsetArgs() *QueryOffsetArgs {
	return &QueryOffsetArgs{}
}

var QueryOffsetArgs_Request_DEFAULT *QueryOffsetRequest

func (p *QueryOffsetArgs) GetRequest() *QueryOffsetRequest {
	if !p.IsSetRequest() {
		return QueryOffsetArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *QueryOffsetArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *QueryOffsetArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryOffsetArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &QueryOffsetRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *QueryOffsetArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryOffset_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryOffsetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *QueryOffsetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryOffsetArgs(%+v)", *p)
}

type QueryOffsetResult struct {
	Success *QueryOffsetResponse         `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewQueryOffsetResult() *QueryOffsetResult {
	return &QueryOffsetResult{}
}

var QueryOffsetResult_Success_DEFAULT *QueryOffsetResponse

func (p *QueryOffsetResult) GetSuccess() *QueryOffsetResponse {
	if !p.IsSetSuccess() {
		return QueryOffsetResult_Success_DEFAULT
	}
	return p.Success
}

var QueryOffsetResult_E_DEFAULT *common.GalaxyTalosException

func (p *QueryOffsetResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return QueryOffsetResult_E_DEFAULT
	}
	return p.E
}
func (p *QueryOffsetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *QueryOffsetResult) IsSetE() bool {
	return p.E != nil
}

func (p *QueryOffsetResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryOffsetResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &QueryOffsetResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *QueryOffsetResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *QueryOffsetResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryOffset_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryOffsetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *QueryOffsetResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *QueryOffsetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryOffsetResult(%+v)", *p)
}

type QueryWorkerArgs struct {
	Request *QueryWorkerRequest `thrift:"request,1" json:"request"`
}

func NewQueryWorkerArgs() *QueryWorkerArgs {
	return &QueryWorkerArgs{}
}

var QueryWorkerArgs_Request_DEFAULT *QueryWorkerRequest

func (p *QueryWorkerArgs) GetRequest() *QueryWorkerRequest {
	if !p.IsSetRequest() {
		return QueryWorkerArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *QueryWorkerArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *QueryWorkerArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryWorkerArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &QueryWorkerRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *QueryWorkerArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryWorker_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryWorkerArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *QueryWorkerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryWorkerArgs(%+v)", *p)
}

type QueryWorkerResult struct {
	Success *QueryWorkerResponse         `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewQueryWorkerResult() *QueryWorkerResult {
	return &QueryWorkerResult{}
}

var QueryWorkerResult_Success_DEFAULT *QueryWorkerResponse

func (p *QueryWorkerResult) GetSuccess() *QueryWorkerResponse {
	if !p.IsSetSuccess() {
		return QueryWorkerResult_Success_DEFAULT
	}
	return p.Success
}

var QueryWorkerResult_E_DEFAULT *common.GalaxyTalosException

func (p *QueryWorkerResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return QueryWorkerResult_E_DEFAULT
	}
	return p.E
}
func (p *QueryWorkerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *QueryWorkerResult) IsSetE() bool {
	return p.E != nil
}

func (p *QueryWorkerResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryWorkerResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &QueryWorkerResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *QueryWorkerResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *QueryWorkerResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryWorker_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryWorkerResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *QueryWorkerResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *QueryWorkerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryWorkerResult(%+v)", *p)
}

type QueryWorkerForTopicsArgs struct {
	Request *TopicsQueryWorkerRequest `thrift:"request,1" json:"request"`
}

func NewQueryWorkerForTopicsArgs() *QueryWorkerForTopicsArgs {
	return &QueryWorkerForTopicsArgs{}
}

var QueryWorkerForTopicsArgs_Request_DEFAULT *TopicsQueryWorkerRequest

func (p *QueryWorkerForTopicsArgs) GetRequest() *TopicsQueryWorkerRequest {
	if !p.IsSetRequest() {
		return QueryWorkerForTopicsArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *QueryWorkerForTopicsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *QueryWorkerForTopicsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryWorkerForTopicsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &TopicsQueryWorkerRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *QueryWorkerForTopicsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryWorkerForTopics_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryWorkerForTopicsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *QueryWorkerForTopicsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryWorkerForTopicsArgs(%+v)", *p)
}

type QueryWorkerForTopicsResult struct {
	Success *TopicsQueryWorkerResponse   `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewQueryWorkerForTopicsResult() *QueryWorkerForTopicsResult {
	return &QueryWorkerForTopicsResult{}
}

var QueryWorkerForTopicsResult_Success_DEFAULT *TopicsQueryWorkerResponse

func (p *QueryWorkerForTopicsResult) GetSuccess() *TopicsQueryWorkerResponse {
	if !p.IsSetSuccess() {
		return QueryWorkerForTopicsResult_Success_DEFAULT
	}
	return p.Success
}

var QueryWorkerForTopicsResult_E_DEFAULT *common.GalaxyTalosException

func (p *QueryWorkerForTopicsResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return QueryWorkerForTopicsResult_E_DEFAULT
	}
	return p.E
}
func (p *QueryWorkerForTopicsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *QueryWorkerForTopicsResult) IsSetE() bool {
	return p.E != nil
}

func (p *QueryWorkerForTopicsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryWorkerForTopicsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &TopicsQueryWorkerResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *QueryWorkerForTopicsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *QueryWorkerForTopicsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryWorkerForTopics_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryWorkerForTopicsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *QueryWorkerForTopicsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *QueryWorkerForTopicsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryWorkerForTopicsResult(%+v)", *p)
}

type QueryOrgOffsetArgs struct {
	Request *QueryOrgOffsetRequest `thrift:"request,1" json:"request"`
}

func NewQueryOrgOffsetArgs() *QueryOrgOffsetArgs {
	return &QueryOrgOffsetArgs{}
}

var QueryOrgOffsetArgs_Request_DEFAULT *QueryOrgOffsetRequest

func (p *QueryOrgOffsetArgs) GetRequest() *QueryOrgOffsetRequest {
	if !p.IsSetRequest() {
		return QueryOrgOffsetArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *QueryOrgOffsetArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *QueryOrgOffsetArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryOrgOffsetArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &QueryOrgOffsetRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *QueryOrgOffsetArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryOrgOffset_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryOrgOffsetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *QueryOrgOffsetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryOrgOffsetArgs(%+v)", *p)
}

type QueryOrgOffsetResult struct {
	Success *QueryOrgOffsetResponse      `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewQueryOrgOffsetResult() *QueryOrgOffsetResult {
	return &QueryOrgOffsetResult{}
}

var QueryOrgOffsetResult_Success_DEFAULT *QueryOrgOffsetResponse

func (p *QueryOrgOffsetResult) GetSuccess() *QueryOrgOffsetResponse {
	if !p.IsSetSuccess() {
		return QueryOrgOffsetResult_Success_DEFAULT
	}
	return p.Success
}

var QueryOrgOffsetResult_E_DEFAULT *common.GalaxyTalosException

func (p *QueryOrgOffsetResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return QueryOrgOffsetResult_E_DEFAULT
	}
	return p.E
}
func (p *QueryOrgOffsetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *QueryOrgOffsetResult) IsSetE() bool {
	return p.E != nil
}

func (p *QueryOrgOffsetResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryOrgOffsetResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &QueryOrgOffsetResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *QueryOrgOffsetResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *QueryOrgOffsetResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryOrgOffset_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryOrgOffsetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *QueryOrgOffsetResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *QueryOrgOffsetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryOrgOffsetResult(%+v)", *p)
}

type GetWorkerIdArgs struct {
	Request *GetWorkerIdRequest `thrift:"request,1" json:"request"`
}

func NewGetWorkerIdArgs() *GetWorkerIdArgs {
	return &GetWorkerIdArgs{}
}

var GetWorkerIdArgs_Request_DEFAULT *GetWorkerIdRequest

func (p *GetWorkerIdArgs) GetRequest() *GetWorkerIdRequest {
	if !p.IsSetRequest() {
		return GetWorkerIdArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *GetWorkerIdArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *GetWorkerIdArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetWorkerIdArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &GetWorkerIdRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *GetWorkerIdArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getWorkerId_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetWorkerIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *GetWorkerIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetWorkerIdArgs(%+v)", *p)
}

type GetWorkerIdResult struct {
	Success *GetWorkerIdResponse         `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewGetWorkerIdResult() *GetWorkerIdResult {
	return &GetWorkerIdResult{}
}

var GetWorkerIdResult_Success_DEFAULT *GetWorkerIdResponse

func (p *GetWorkerIdResult) GetSuccess() *GetWorkerIdResponse {
	if !p.IsSetSuccess() {
		return GetWorkerIdResult_Success_DEFAULT
	}
	return p.Success
}

var GetWorkerIdResult_E_DEFAULT *common.GalaxyTalosException

func (p *GetWorkerIdResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return GetWorkerIdResult_E_DEFAULT
	}
	return p.E
}
func (p *GetWorkerIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetWorkerIdResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetWorkerIdResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetWorkerIdResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetWorkerIdResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetWorkerIdResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetWorkerIdResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getWorkerId_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetWorkerIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetWorkerIdResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetWorkerIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetWorkerIdResult(%+v)", *p)
}

type DeleteConsumerGroupArgs struct {
	Request *DeleteConsumerGroupRequest `thrift:"request,1" json:"request"`
}

func NewDeleteConsumerGroupArgs() *DeleteConsumerGroupArgs {
	return &DeleteConsumerGroupArgs{}
}

var DeleteConsumerGroupArgs_Request_DEFAULT *DeleteConsumerGroupRequest

func (p *DeleteConsumerGroupArgs) GetRequest() *DeleteConsumerGroupRequest {
	if !p.IsSetRequest() {
		return DeleteConsumerGroupArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *DeleteConsumerGroupArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *DeleteConsumerGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteConsumerGroupArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &DeleteConsumerGroupRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *DeleteConsumerGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteConsumerGroup_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteConsumerGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *DeleteConsumerGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteConsumerGroupArgs(%+v)", *p)
}

type DeleteConsumerGroupResult struct {
	E *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewDeleteConsumerGroupResult() *DeleteConsumerGroupResult {
	return &DeleteConsumerGroupResult{}
}

var DeleteConsumerGroupResult_E_DEFAULT *common.GalaxyTalosException

func (p *DeleteConsumerGroupResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return DeleteConsumerGroupResult_E_DEFAULT
	}
	return p.E
}
func (p *DeleteConsumerGroupResult) IsSetE() bool {
	return p.E != nil
}

func (p *DeleteConsumerGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteConsumerGroupResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *DeleteConsumerGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteConsumerGroup_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteConsumerGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *DeleteConsumerGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteConsumerGroupResult(%+v)", *p)
}
