// Code generated by MockGen. DO NOT EDIT.
// Source: thrift/message/messageservice.go

// Package mock_message is a generated GoMock package.
package mock_message

import (
	reflect "reflect"

	common "github.com/XiaoMi/talos-sdk-golang/thrift/common"
	message "github.com/XiaoMi/talos-sdk-golang/thrift/message"
	gomock "github.com/golang/mock/gomock"
)

// MockMessageService is a mock of MessageService interface.
type MockMessageService struct {
	ctrl     *gomock.Controller
	recorder *MockMessageServiceMockRecorder
}

// MockMessageServiceMockRecorder is the mock recorder for MockMessageService.
type MockMessageServiceMockRecorder struct {
	mock *MockMessageService
}

// NewMockMessageService creates a new mock instance.
func NewMockMessageService(ctrl *gomock.Controller) *MockMessageService {
	mock := &MockMessageService{ctrl: ctrl}
	mock.recorder = &MockMessageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageService) EXPECT() *MockMessageServiceMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockMessageService) Commit(request *message.CommitRequest) (*message.CommitResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", request)
	ret0, _ := ret[0].(*message.CommitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Commit indicates an expected call of Commit.
func (mr *MockMessageServiceMockRecorder) Commit(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockMessageService)(nil).Commit), request)
}

// GetMessage mocks base method.
func (m *MockMessageService) GetMessage(request *message.GetMessageRequest) (*message.GetMessageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessage", request)
	ret0, _ := ret[0].(*message.GetMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessage indicates an expected call of GetMessage.
func (mr *MockMessageServiceMockRecorder) GetMessage(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessage", reflect.TypeOf((*MockMessageService)(nil).GetMessage), request)
}

// GetPartitionOffset mocks base method.
func (m *MockMessageService) GetPartitionOffset(request *message.GetPartitionOffsetRequest) (*message.GetPartitionOffsetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartitionOffset", request)
	ret0, _ := ret[0].(*message.GetPartitionOffsetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartitionOffset indicates an expected call of GetPartitionOffset.
func (mr *MockMessageServiceMockRecorder) GetPartitionOffset(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartitionOffset", reflect.TypeOf((*MockMessageService)(nil).GetPartitionOffset), request)
}

// GetPartitionsOffset mocks base method.
func (m *MockMessageService) GetPartitionsOffset(request *message.GetPartitionsOffsetRequest) (*message.GetPartitionsOffsetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartitionsOffset", request)
	ret0, _ := ret[0].(*message.GetPartitionsOffsetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartitionsOffset indicates an expected call of GetPartitionsOffset.
func (mr *MockMessageServiceMockRecorder) GetPartitionsOffset(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartitionsOffset", reflect.TypeOf((*MockMessageService)(nil).GetPartitionsOffset), request)
}

// GetScheduleInfo mocks base method.
func (m *MockMessageService) GetScheduleInfo(request *message.GetScheduleInfoRequest) (*message.GetScheduleInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScheduleInfo", request)
	ret0, _ := ret[0].(*message.GetScheduleInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScheduleInfo indicates an expected call of GetScheduleInfo.
func (mr *MockMessageServiceMockRecorder) GetScheduleInfo(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScheduleInfo", reflect.TypeOf((*MockMessageService)(nil).GetScheduleInfo), request)
}

// GetServiceVersion mocks base method.
func (m *MockMessageService) GetServiceVersion() (*common.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceVersion")
	ret0, _ := ret[0].(*common.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceVersion indicates an expected call of GetServiceVersion.
func (mr *MockMessageServiceMockRecorder) GetServiceVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceVersion", reflect.TypeOf((*MockMessageService)(nil).GetServiceVersion))
}

// GetTopicOffset mocks base method.
func (m *MockMessageService) GetTopicOffset(request *message.GetTopicOffsetRequest) (*message.GetTopicOffsetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopicOffset", request)
	ret0, _ := ret[0].(*message.GetTopicOffsetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopicOffset indicates an expected call of GetTopicOffset.
func (mr *MockMessageServiceMockRecorder) GetTopicOffset(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopicOffset", reflect.TypeOf((*MockMessageService)(nil).GetTopicOffset), request)
}

// GetUnkownStateTransaction mocks base method.
func (m *MockMessageService) GetUnkownStateTransaction(request *message.GetUnkownStateTransactionRequest) (*message.GetUnkownStateTransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnkownStateTransaction", request)
	ret0, _ := ret[0].(*message.GetUnkownStateTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnkownStateTransaction indicates an expected call of GetUnkownStateTransaction.
func (mr *MockMessageServiceMockRecorder) GetUnkownStateTransaction(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnkownStateTransaction", reflect.TypeOf((*MockMessageService)(nil).GetUnkownStateTransaction), request)
}

// LookupTopics mocks base method.
func (m *MockMessageService) LookupTopics(request *message.LookupTopicsRequest) (*message.LookupTopicsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupTopics", request)
	ret0, _ := ret[0].(*message.LookupTopicsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupTopics indicates an expected call of LookupTopics.
func (mr *MockMessageServiceMockRecorder) LookupTopics(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupTopics", reflect.TypeOf((*MockMessageService)(nil).LookupTopics), request)
}

// Prepare mocks base method.
func (m *MockMessageService) Prepare(request *message.PrepareRequest) (*message.PrepareResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepare", request)
	ret0, _ := ret[0].(*message.PrepareResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prepare indicates an expected call of Prepare.
func (mr *MockMessageServiceMockRecorder) Prepare(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockMessageService)(nil).Prepare), request)
}

// PutMessage mocks base method.
func (m *MockMessageService) PutMessage(request *message.PutMessageRequest) (*message.PutMessageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutMessage", request)
	ret0, _ := ret[0].(*message.PutMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutMessage indicates an expected call of PutMessage.
func (mr *MockMessageServiceMockRecorder) PutMessage(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMessage", reflect.TypeOf((*MockMessageService)(nil).PutMessage), request)
}

// Rollback mocks base method.
func (m *MockMessageService) Rollback(request *message.RollbackRequest) (*message.RollbackResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", request)
	ret0, _ := ret[0].(*message.RollbackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rollback indicates an expected call of Rollback.
func (mr *MockMessageServiceMockRecorder) Rollback(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockMessageService)(nil).Rollback), request)
}

// ValidClientVersion mocks base method.
func (m *MockMessageService) ValidClientVersion(clientVersion *common.Version) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidClientVersion", clientVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidClientVersion indicates an expected call of ValidClientVersion.
func (mr *MockMessageServiceMockRecorder) ValidClientVersion(clientVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidClientVersion", reflect.TypeOf((*MockMessageService)(nil).ValidClientVersion), clientVersion)
}
