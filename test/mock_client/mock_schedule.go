// Code generated by MockGen. DO NOT EDIT.
// Source: client/ScheduleInfoCache.go

// Package mock_client is a generated GoMock package.
package mock_client

import (
	reflect "reflect"

	message "github.com/XiaoMi/talos-sdk-golang/thrift/message"
	topic "github.com/XiaoMi/talos-sdk-golang/thrift/topic"
	gomock "github.com/golang/mock/gomock"
)

// MockScheduleInfoCacheInterface is a mock of ScheduleInfoCacheInterface interface.
type MockScheduleInfoCacheInterface struct {
	ctrl     *gomock.Controller
	recorder *MockScheduleInfoCacheInterfaceMockRecorder
}

// MockScheduleInfoCacheInterfaceMockRecorder is the mock recorder for MockScheduleInfoCacheInterface.
type MockScheduleInfoCacheInterfaceMockRecorder struct {
	mock *MockScheduleInfoCacheInterface
}

// NewMockScheduleInfoCacheInterface creates a new mock instance.
func NewMockScheduleInfoCacheInterface(ctrl *gomock.Controller) *MockScheduleInfoCacheInterface {
	mock := &MockScheduleInfoCacheInterface{ctrl: ctrl}
	mock.recorder = &MockScheduleInfoCacheInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScheduleInfoCacheInterface) EXPECT() *MockScheduleInfoCacheInterfaceMockRecorder {
	return m.recorder
}

// GetOrCreateMessageClient mocks base method.
func (m *MockScheduleInfoCacheInterface) GetOrCreateMessageClient(topicAndPartition *topic.TopicAndPartition) message.MessageService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateMessageClient", topicAndPartition)
	ret0, _ := ret[0].(message.MessageService)
	return ret0
}

// GetOrCreateMessageClient indicates an expected call of GetOrCreateMessageClient.
func (mr *MockScheduleInfoCacheInterfaceMockRecorder) GetOrCreateMessageClient(topicAndPartition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateMessageClient", reflect.TypeOf((*MockScheduleInfoCacheInterface)(nil).GetOrCreateMessageClient), topicAndPartition)
}

// GetScheduleInfo mocks base method.
func (m *MockScheduleInfoCacheInterface) GetScheduleInfo(name *topic.TopicTalosResourceName) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScheduleInfo", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetScheduleInfo indicates an expected call of GetScheduleInfo.
func (mr *MockScheduleInfoCacheInterfaceMockRecorder) GetScheduleInfo(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScheduleInfo", reflect.TypeOf((*MockScheduleInfoCacheInterface)(nil).GetScheduleInfo), name)
}

// GetScheduleInfoTask mocks base method.
func (m *MockScheduleInfoCacheInterface) GetScheduleInfoTask() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScheduleInfoTask")
	ret0, _ := ret[0].(error)
	return ret0
}

// GetScheduleInfoTask indicates an expected call of GetScheduleInfoTask.
func (mr *MockScheduleInfoCacheInterfaceMockRecorder) GetScheduleInfoTask() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScheduleInfoTask", reflect.TypeOf((*MockScheduleInfoCacheInterface)(nil).GetScheduleInfoTask))
}

// Shutdown mocks base method.
func (m *MockScheduleInfoCacheInterface) Shutdown(topicTalosResourceName *topic.TopicTalosResourceName) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown", topicTalosResourceName)
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockScheduleInfoCacheInterfaceMockRecorder) Shutdown(topicTalosResourceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockScheduleInfoCacheInterface)(nil).Shutdown), topicTalosResourceName)
}

// UpdateScheduleInfoCache mocks base method.
func (m *MockScheduleInfoCacheInterface) UpdateScheduleInfoCache() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateScheduleInfoCache")
}

// UpdateScheduleInfoCache indicates an expected call of UpdateScheduleInfoCache.
func (mr *MockScheduleInfoCacheInterfaceMockRecorder) UpdateScheduleInfoCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScheduleInfoCache", reflect.TypeOf((*MockScheduleInfoCacheInterface)(nil).UpdateScheduleInfoCache))
}
