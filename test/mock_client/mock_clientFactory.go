// Code generated by MockGen. DO NOT EDIT.
// Source: client/TalosClientFactory.go

// Package mock_client is a generated GoMock package.
package mock_client

import (
	reflect "reflect"

	consumer "github.com/XiaoMi/talos-sdk-golang/thrift/consumer"
	message "github.com/XiaoMi/talos-sdk-golang/thrift/message"
	metric "github.com/XiaoMi/talos-sdk-golang/thrift/metric"
	quota "github.com/XiaoMi/talos-sdk-golang/thrift/quota"
	topic "github.com/XiaoMi/talos-sdk-golang/thrift/topic"
	gomock "github.com/golang/mock/gomock"
)

// MockTalosClientFactoryInterface is a mock of TalosClientFactoryInterface interface.
type MockTalosClientFactoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTalosClientFactoryInterfaceMockRecorder
}

// MockTalosClientFactoryInterfaceMockRecorder is the mock recorder for MockTalosClientFactoryInterface.
type MockTalosClientFactoryInterfaceMockRecorder struct {
	mock *MockTalosClientFactoryInterface
}

// NewMockTalosClientFactoryInterface creates a new mock instance.
func NewMockTalosClientFactoryInterface(ctrl *gomock.Controller) *MockTalosClientFactoryInterface {
	mock := &MockTalosClientFactoryInterface{ctrl: ctrl}
	mock.recorder = &MockTalosClientFactoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTalosClientFactoryInterface) EXPECT() *MockTalosClientFactoryInterfaceMockRecorder {
	return m.recorder
}

// NewConsumerClient mocks base method.
func (m *MockTalosClientFactoryInterface) NewConsumerClient(url string) consumer.ConsumerService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewConsumerClient", url)
	ret0, _ := ret[0].(consumer.ConsumerService)
	return ret0
}

// NewConsumerClient indicates an expected call of NewConsumerClient.
func (mr *MockTalosClientFactoryInterfaceMockRecorder) NewConsumerClient(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewConsumerClient", reflect.TypeOf((*MockTalosClientFactoryInterface)(nil).NewConsumerClient), url)
}

// NewConsumerClientDefault mocks base method.
func (m *MockTalosClientFactoryInterface) NewConsumerClientDefault() consumer.ConsumerService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewConsumerClientDefault")
	ret0, _ := ret[0].(consumer.ConsumerService)
	return ret0
}

// NewConsumerClientDefault indicates an expected call of NewConsumerClientDefault.
func (mr *MockTalosClientFactoryInterfaceMockRecorder) NewConsumerClientDefault() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewConsumerClientDefault", reflect.TypeOf((*MockTalosClientFactoryInterface)(nil).NewConsumerClientDefault))
}

// NewMessageClient mocks base method.
func (m *MockTalosClientFactoryInterface) NewMessageClient(url string) message.MessageService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewMessageClient", url)
	ret0, _ := ret[0].(message.MessageService)
	return ret0
}

// NewMessageClient indicates an expected call of NewMessageClient.
func (mr *MockTalosClientFactoryInterfaceMockRecorder) NewMessageClient(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMessageClient", reflect.TypeOf((*MockTalosClientFactoryInterface)(nil).NewMessageClient), url)
}

// NewMessageClientDefault mocks base method.
func (m *MockTalosClientFactoryInterface) NewMessageClientDefault() message.MessageService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewMessageClientDefault")
	ret0, _ := ret[0].(message.MessageService)
	return ret0
}

// NewMessageClientDefault indicates an expected call of NewMessageClientDefault.
func (mr *MockTalosClientFactoryInterfaceMockRecorder) NewMessageClientDefault() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMessageClientDefault", reflect.TypeOf((*MockTalosClientFactoryInterface)(nil).NewMessageClientDefault))
}

// NewMetricClient mocks base method.
func (m *MockTalosClientFactoryInterface) NewMetricClient(url string) metric.MetricService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewMetricClient", url)
	ret0, _ := ret[0].(metric.MetricService)
	return ret0
}

// NewMetricClient indicates an expected call of NewMetricClient.
func (mr *MockTalosClientFactoryInterfaceMockRecorder) NewMetricClient(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMetricClient", reflect.TypeOf((*MockTalosClientFactoryInterface)(nil).NewMetricClient), url)
}

// NewMetricClientDefault mocks base method.
func (m *MockTalosClientFactoryInterface) NewMetricClientDefault() metric.MetricService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewMetricClientDefault")
	ret0, _ := ret[0].(metric.MetricService)
	return ret0
}

// NewMetricClientDefault indicates an expected call of NewMetricClientDefault.
func (mr *MockTalosClientFactoryInterfaceMockRecorder) NewMetricClientDefault() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMetricClientDefault", reflect.TypeOf((*MockTalosClientFactoryInterface)(nil).NewMetricClientDefault))
}

// NewQuotaClient mocks base method.
func (m *MockTalosClientFactoryInterface) NewQuotaClient(url string) quota.QuotaService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewQuotaClient", url)
	ret0, _ := ret[0].(quota.QuotaService)
	return ret0
}

// NewQuotaClient indicates an expected call of NewQuotaClient.
func (mr *MockTalosClientFactoryInterfaceMockRecorder) NewQuotaClient(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewQuotaClient", reflect.TypeOf((*MockTalosClientFactoryInterface)(nil).NewQuotaClient), url)
}

// NewQuotaClientDefault mocks base method.
func (m *MockTalosClientFactoryInterface) NewQuotaClientDefault() quota.QuotaService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewQuotaClientDefault")
	ret0, _ := ret[0].(quota.QuotaService)
	return ret0
}

// NewQuotaClientDefault indicates an expected call of NewQuotaClientDefault.
func (mr *MockTalosClientFactoryInterfaceMockRecorder) NewQuotaClientDefault() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewQuotaClientDefault", reflect.TypeOf((*MockTalosClientFactoryInterface)(nil).NewQuotaClientDefault))
}

// NewTopicClient mocks base method.
func (m *MockTalosClientFactoryInterface) NewTopicClient(url string) topic.TopicService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTopicClient", url)
	ret0, _ := ret[0].(topic.TopicService)
	return ret0
}

// NewTopicClient indicates an expected call of NewTopicClient.
func (mr *MockTalosClientFactoryInterfaceMockRecorder) NewTopicClient(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTopicClient", reflect.TypeOf((*MockTalosClientFactoryInterface)(nil).NewTopicClient), url)
}

// NewTopicClientDefault mocks base method.
func (m *MockTalosClientFactoryInterface) NewTopicClientDefault() topic.TopicService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTopicClientDefault")
	ret0, _ := ret[0].(topic.TopicService)
	return ret0
}

// NewTopicClientDefault indicates an expected call of NewTopicClientDefault.
func (mr *MockTalosClientFactoryInterfaceMockRecorder) NewTopicClientDefault() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTopicClientDefault", reflect.TypeOf((*MockTalosClientFactoryInterface)(nil).NewTopicClientDefault))
}
